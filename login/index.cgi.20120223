#!/usr/bin/perl

use lib "/httpd/modules";
require ZAUTH;
require ZOOVY;
require ZTOOLKIT;
require DBINFO;
use strict;
require GTOOLS;
require LUSER;

&ZOOVY::init();
&GTOOLS::init();

## sanitize all css variables.
foreach my $p (keys %{$ZOOVY::cgiv}) {
	$ZOOVY::cgiv->{$p} =~ s/["\>\<]+//gs;
	}

my $gmt = time();
my $t = 43200; # 12 hour tolerance for timecheck
my $ACTION = $ZOOVY::cgiv->{'ACTION'};
$ACTION =~ s/[^A-Z0-9]+//gs;

$GTOOLS::TAG{'<!-- TIMECHECK -->'} = qq~
<script>
<!--
var nowms = (new Date()).getTime();
nowms = nowms / 1000;

// document.write(Date()+".")
if ( (nowms - $gmt > $t) || ($gmt - nowms > $t)) {
	document.write('<br><table bgcolor="yellow"><tr><td><font size="2" color="red">WARNING: SYSTEM CLOCK IS INCORRECT!<br>CANNOT SAVE COOKIES</b></font></td></tr></table><br>');
	}

//-->
</script>
~;


my $HTML = q~
<!-- NO_TAB -->

<br>
<center>
<form target="_top" METHOD="post" name="FrmLogin" ACTION="/login/index.cgi" ENCTYPE="application/x-www-form-urlencoded">
<input type="hidden" name="JS_TEST" value="<!-- TS -->">
<input type="hidden" name="SAW_COOKIE" value="0">

<table cellpadding="1" cellspacing="0" border="0" class="zoovytable" width='300'>
<tr><td align='center' class="zoovytableheader"><b>Login to Zoovy</b></td></tr>
<tr><td class="zoovytabledata">
<table cellpadding="1" cellspacing="0" border="0" bgcolor="#FFFFFF" width='100%'><tr><td align='center'>

<table cellpadding="5"><tr><td valign="center" align="center">

<Font size="1" color="red">
<!-- MESSAGE -->
<!-- TIMECHECK -->
</font></td></tr></table>
</font>
<table cellpadding="0" border="0" cellspacing="0">
<tr><td align="left" bgcolor="AAAADD"><b><font size="1" face="verdana, Helvetica, Arial">Username</font></b></td></tr>
<td><input onKeyUp="isEnter(event.which)" value="<!-- LOGIN -->" type="text" NAME="login" size="15" maxlength="25"></td></tr>
<tr><td><img src="/images/blank.gif" height="10" width="10"></td></tr>
<tr><td align="left" bgcolor="AAAADD"><b><font size="1" face="verdana, Helvetica, Arial">Password</font></b></td></tr>
<td><input onKeyUp="isEnter(event.which)" type="password" NAME="password" size="15" maxlength="25"></td></tr>
<tr><td><img src="/images/blank.gif" height="5" width="10"></td></tr>
<tr><td align="middle">
<center><input class="button" type="submit" value=" Login "></center>
</td></tr>
</table>

<input type="hidden" name="authenticate" value="true">
<input type="hidden" name="sendto" value="<!-- SENDTO -->">
</form>
<SCRIPT type="text/javascript" language="JavaScript"><!--

var d = new Date();
var diff = document.FrmLogin.JS_TEST.value.valueOf() - (d.getTime()/1000);
if (diff < 0) { diff = 0 - diff; }
diff = diff - (diff % 1);
if (diff>60) {
	document.FrmLogin.JS_TEST.value = diff;
	// alert("Warning the time is off on your computer by "+diff+" seconds - this could cause login complications.");
	}



//--></SCRIPT>
<font face="verdana, helvetica, arial" size="1" color="white"><b>Having Trouble?</b><br></font>
<font face="verdana, helvetica, arial" size="1" color="white"><a href="/setup">Do you need an Account?</a><br></font>
<font face="verdana, helvetica, arial" size="1" color="white"><a href="index.cgi?ACTION=RECOVER">Did you forget your Password?</a><br></font>
<br>
<br>
</td></tr></table>
</td></tr></table>

</center>
<br><br>
<br>
~;


if ($ACTION eq 'RECOVERNOW') {
	my $lookfor = $ZOOVY::cgiv->{'lookfor'};
	$lookfor =~ s/[^a-zA-Z0-9\@\.]+//gs;

	if ($lookfor eq '') { $GTOOLS::TAG{'<!-- RECOVERMSG -->'} = '<font color=red>no username or email received.</font><br>'; }

	my $dbh = &DBINFO::db_zoovy_connect();
	my $qt_lookfor = $dbh->quote($lookfor);
	my $pstmt = "select PASSWORD,USERNAME,EMAIL from ZUSERS where USERNAME=$qt_lookfor or EMAIL=$qt_lookfor";

	my $sth = $dbh->prepare($pstmt);
	my $rv = $sth->execute();

	if ($rv) {
	while ( my ($pass,$username,$email) = $sth->fetchrow() ) {
		if (&ZTOOLKIT::validate_email_strict($email)) {
			## This used to have &ZMAIL::sendmail referenced in it but it was looking up user 'zoovy'
			## which didn't exist, so it was failing (it used to work before the merchant.bin change apparently
			## It was easier to just do the same thing here than to try to make ZMAIL handle not having
			## a merchant.  -AK 11/10/2003
			if (open MH, '|/usr/sbin/sendmail -t') {
				$GTOOLS::TAG{'<!-- RECOVERMSG -->'} = "<font color=red>Password was mailed to $email</font><br>";
				print MH "From: support\@zoovy.com\n";
				print MH "To: $email\n";
				print MH "Reply-To: support\@zoovy.com\n";
				print MH "Subject: Password Recovery\n";
				print MH "\n";
				print MH "Hi, you or somebody who thinks they're you requested your password for $username.zoovy.com\n";
				print MH "Don't worry, this is the only copy of the password we sent out and you've got it.\n";
				print MH "\n";
				print MH "\n";
				print MH "Your login information is:\n";
				print MH "Username: $username\n";
				print MH "Password: $pass\n";
				print MH "\n";
				print MH "Helpful Hints:\n";
				print MH "\n";
				print MH " * Passwords are case sensitive - which means that you must type the password in either upper\n";
				print MH "     or lower case as shown above.\n";
				print MH " * You must have cookies enabled to login, you can test your cookies by simply trying to add a\n";
				print MH "     product to the shopping cart in any Zoovy store http://shops.zoovy.com - if you receive a\n";
				print MH "     cookie error, then the store will also include instructions to fix the cookie error.\n";
				print MH " * Avoid simple mistakes, for example people often confuse \"trial\" and \"trail\" it helps to\n";
				print MH "     try typing one letter at a time if you think this may be the problem.\n";
				print MH "\n";
				print MH "\n";
				print MH "If you have any questions please contact your support provider.\n";
				close MH;
				}
			else {
				$GTOOLS::TAG{'<!-- RECOVERMSG -->'} = "<font color=red>Unable to connect to mail server to send password, please contact Zoovy support support\@zoovy.com</font><br>";
				}
			}
		else {
			$GTOOLS::TAG{'<!-- RECOVERMSG -->'} = "<font color=red>Unable to send password to invalid email address $email, please contact Zoovy support support\@zoovy.com</font><br>";
			}
		}
	}
else {
	$GTOOLS::TAG{"<!-- RECOVERMSG -->"} = '<font color=red>Could not find user / email $lookfor.</font><br>'; 
	}

	$dbh->disconnect();
	$ACTION = 'RECOVER';
	}
	



if ($ACTION eq 'RECOVER') {
	$HTML = q~
<!-- NO_TAB -->

<form action="/login/index.cgi">
<center>
<br>

<table width=500 cellspacing="0" cellpadding="0" class="zoovytable">
<tr>
	<td class="zoovytableheader"><strong>Password Recovery Form</strong></td>
</tr>
<tr>
<td>
<!-- RECOVERMSG -->

To recover your store password simply enter your UserName or registered email address 
and your password will be emailed to you.<br>
<br>

<center>
<input type="hidden" name="ACTION" value="RECOVERNOW">
<b>Email or UserName:</b> <input type="textbox" name="lookfor"><br>
</center>

<br>
<center>
<table>
<tr><td nowrap>
	<input type="submit" class="button" value=" Continue ">
	<input type="button" class="button" onClick="document.location='/login';" value=" Cancel ">
</td><td>
</table>
</center>

</td></tr>
</table>

</form>

	~;
	}



sub resolvehost {
   my ($addr) = @_;

   if ($addr eq '192.168.2.60') { $addr = 'www1'; }
   elsif ($addr eq '192.168.2.65') { $addr = 'www2'; }
   elsif ($addr eq '192.168.2.70') { $addr = 'www3'; }
   elsif ($addr eq '192.168.2.75') { $addr = 'www4'; }
   elsif ($addr eq '192.168.2.80') { $addr = 'www5'; }
   elsif ($addr eq '192.168.2.85') { $addr = 'www6'; }
   elsif ($addr eq '192.168.1.12') { $addr = 'dev'; }

   return($addr);
	}


# print STDERR "Running ... login\n";
my $sendto = $ZOOVY::cgiv->{'sendto'};
if ($sendto =~ /^\/login/) { $sendto = '/biz/'; }	## override anything redirecting to /login

$GTOOLS::TAG{'<!-- SENDTO -->'} = $sendto;
#my $HOSTNAME = &resolvehost($ENV{'SERVER_ADDR'});
my $HOSTNAME = &ZOOVY::servername();
$GTOOLS::TAG{'<!-- HOSTNAME -->'} = $HOSTNAME;
$GTOOLS::TAG{'<!-- TS -->'} = time();

my ($CODE, $RESULT) = (-1,'');

## DIFF is the number of seconds between now and when the request was made.
my $diff = -1; 
if ($ZOOVY::cgiv->{'ts'}) {
	$diff = time()-$ZOOVY::cgiv->{'ts'};
	if ($diff<0) { $diff = 0-$diff; }
	}

my ($LOGIN,$PASSWORD) = ();

#if ($ENV{'REMOTE_ADDR'} =~ /192\.168/) {
#	$CODE = 12;
#	$RESULT = 'Login not allowed from internal address';
#	}
#elsif ($ENV{'REMOTE_ADDR'} =~ /63\.108\.93/) {
#	$CODE = 13;
#	$RESULT = 'Public Login not allowed from Zoovy internal netblock ['.$diff.']';
#	}

if ($ACTION ne '') {}
elsif (not defined $ZOOVY::cgiv->{'authenticate'}) {
	## the user just arrived at the login page - don't show invalid/user password message
	$CODE = 11; $RESULT = 'Please provide your username and password.';
	use Data::Dumper; print STDERR Dumper($ZOOVY::cgiv);
	}
elsif (uc($ZOOVY::cgiv->{'authenticate'}) eq 'AUTO') {
	## automatic login, sent once when we first create the account
	}
elsif (uc($ZOOVY::cgiv->{'authenticate'}) eq 'PARTITION') {
	require LUSER;
	my $dbh = &DBINFO::db_zoovy_connect();
	my ($MID,$USERNAME,$LUSER,$FLAGS) = LUSER->authenticate(scalar=>1);
	
	if ($MID>0) {
		if ($LUSER eq 'ADMIN') { $LUSER = ''; }
		my $pstmt = "update COOKIE_CACHE set PRT=".int($ZOOVY::cgiv->{'PRT'})." where MID=".int($MID)." /* $USERNAME */ and LUSER=".$dbh->quote($LUSER);
		print STDERR $pstmt."\n";
		$dbh->do($pstmt);
		unlink("/dev/shm/sessions.bin");
		}
	&DBINFO::db_zoovy_close();
	print "Location: /biz\n\n";
	exit;
	}
else {
	##
	## this is where *MOST* users login.
	##
	$LOGIN = lc($ZOOVY::cgiv->{'login'});
	$PASSWORD = $ZOOVY::cgiv->{'password'}; 
	
	# added to fix creme lure space in login problem.
	$LOGIN =~ s/[^\w\*]+//igs;

#	## filter out dumb and retarted passwords.
#	if (uc($PASSWORD) eq 'PASSWORD') { $ZOOVY::cgiv->{'sendto'} = 'http://www.zoovy.com/biz/changepassword.cgi'; }
#	elsif (uc($PASSWORD) eq 'TRIAL') { $ZOOVY::cgiv->{'sendto'} = 'http://www.zoovy.com/biz/changepassword.cgi'; }

	#if (not defined $ZOOVY::cookies->{'checkcookie'}) { 
	#	$CODE = 1; $RESULT = '<b>You must have cookies enabled to use zoovy</b>.  '; 
	#	}

	# they didn't enter a password
	if (($CODE<=0) && ((!$PASSWORD) || (!$LOGIN))) {
		$CODE = 2; $RESULT = "Login and password must be provided.";
		}

	if (($CODE<=0) && ($PASSWORD eq '')) {
		$CODE = 2; $RESULT = "Login and password must be provided.";
		}

	

	# the password is incorrect.
	if ($CODE>0) {
		}		## NOTE: CODE will be -1 
	elsif (not &ZAUTH::get_user_password($LOGIN,$PASSWORD)) {
		$CODE = 3; $RESULT = "Login or password is incorrect.";
		}
	else {
		$CODE = 0; 	# SUCCESS!
		}
	}

if ($CODE>0) {
	#if ((defined $ZOOVY::cgiv->{'SAW_COOKIE'}) && ($ZOOVY::cgiv->{'SAW_COOKIE'} == 0)) { 
	#	$CODE = 5; $RESULT = "Login program did not detect authentication cookie, please allow cookies for *.zoovy.com";
	#	}
	#elsif ((defined $ZOOVY::cgiv->{'JS_TEST'}) && 
	#	(	((time()-int($ZOOVY::cgiv->{'JS_TEST'}))>600) || 
	#		((int($ZOOVY::cgiv->{'JS_TEST'})-time())>600)	)
	#		) {
	#	require ZTOOLKIT;
	#	$CODE = 6; $RESULT = "Your computers clock is more than 10 minutes off, please correct this before logging in. Computer Time: ".&ZTOOLKIT::pretty_date($ZOOVY::cgiv->{'JS_TEST'},1)." Actual Time: ".&ZTOOLKIT::pretty_date(time(),1);
	#	}
	}


##
## At this point $CODE is 0 or the shit hit the fan!
##
##
print STDERR "CODE=$CODE RESULT=$RESULT\n";

my $AUTH_TOKEN = '';
if ($CODE==0) {
	##
	## LOGIN SUCCESS
	##
	my $dbh = &DBINFO::db_zoovy_connect();

	print STDERR "login: $LOGIN\n";

	my ($server,$row_id) = &ZAUTH::get_session_db($LOGIN);
	if ($row_id) {
		## okay, so we're going to be logging somebody out.
		if (index($LOGIN,'*')>=0) {
			my ($u,$lu) = split(/\*/,$LOGIN);
			my $pstmt = "DELETE FROM COOKIE_CACHE WHERE LUSER=".$dbh->quote($lu)." and USERNAME=".$dbh->quote($u);
			print STDERR $pstmt."\n";
			$dbh->do($pstmt);
			}
		else {
			my $pstmt = "DELETE FROM COOKIE_CACHE WHERE LUSER='' and USERNAME=".$dbh->quote($LOGIN);
			print STDERR $pstmt."\n";
			$dbh->do($pstmt);
			}
		}
	print STDERR "login2: $ZOOVY::FLAGS\n";

	($server,$row_id) = &LUSER::create_session_db($LOGIN);
	$AUTH_TOKEN = "$LOGIN\@$server\@$row_id\@$ZOOVY::RESELLER\@".$ZOOVY::FLAGS;
	&ZAUTH::set_session_cookie($AUTH_TOKEN);

	my ($LU) = LUSER->new($LOGIN);
	if (defined $LU) {
		print STDERR Dumper($LU);
		$LU->log("LOGIN","REMOTE_IP=$ENV{'REMOTE_ADDR'} ROW:$row_id SESSION:$server","INFO");
		}
	else {
		die("Could not create luser");
		}

	print STDERR "login3: $ZOOVY::FLAGS\n";

	## NOTE: This basically just bumps the login count, and last_login date in ZUSERS
	&ZAUTH::refresh_session_db($LOGIN);

	&DBINFO::db_zoovy_close();	
	
	if ((not defined $sendto) || (not $sendto)) {
		if ((defined $ZOOVY::cgiv->{'sendto'}) && $ZOOVY::cgiv->{'sendto'}) { $sendto = $ZOOVY::cgiv->{'sendto'}; }
		else { $sendto = '/biz'; }
		}

	if ($sendto =~ /^http[s]?\:\/\//) { $RESULT = $sendto; } else { $RESULT = "http://www.zoovy.com$sendto"; }
	
	$CODE = 0;
	}


if ($CODE!=0) {
	## Failed login, give the user the prompt with whatever message was
	## returned from authenticate by shifting the results array again

	my $VAR;
	my $req_uri = $ZOOVY::cgiv->{'req'};
	
	$GTOOLS::TAG{"<!-- MESSAGE -->"} = "[$CODE] $RESULT";
	
	my $LOGIN = $ZOOVY::cgiv->{'login'};
	$GTOOLS::TAG{"<!-- LOGIN -->"} = $LOGIN;
	
	if ($LOGIN eq "") { $VAR = "login"; }
	else { $VAR = "password"; }
	$GTOOLS::TAG{"<!-- VAR -->"} = $VAR;
	
	&ZAUTH::set_session_cookie("");
	&GTOOLS::output(
		header=>q~
<SCRIPT type="text/javascript" language="JavaScript"><!--

if (top != self) { top.location.href = self.location.href; }

function isEnter(key) {
  if (key==13) 
     { document.forms[0].submit() }
	}


function readCookie(name) {
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for(var i=0;i < ca.length;i++) {
		var c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1,c.length);
		if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
		}
	return null;
	}

if (readCookie('session_id') != null) { window.document.FrmLogin.SAW_COOKIE.value = 1; }

//-->~,
	title=>"Zoovy - Login to $HOSTNAME", html=>$HTML,header=>1,bc=>[ {'name'=>'Login'} ]);
	}
else {
	# Successful login, send the user to the location returned from
	# authenticate by shifting the results array again

	# print STDERR "SUCCESS --> [$sendto]\n";
	$GTOOLS::TAG{'<!-- SENDTO -->'} = $sendto;
	$GTOOLS::TAG{'<!-- AUTH_TOKEN -->'} = $AUTH_TOKEN;
	
	## NOTE: we *must* do a 302 redirect instead of a 301, so that the web browser PASSES the cookie
	##			that we set earlier.. remove the line below at your own peril!
	print "Status: 302 Moved\n";
	print "Location: $sendto\n\n";
	}


