#!/usr/bin/perl

use XML::Simple;
use lib "/httpd/modules";
use CART;


$xml = XMLin(q~<?xml version="1.0" encoding="UTF-8"?>
<OrderCalculationsResponse xmlns="http://payments.amazon.com/checkout/2008-11-30/">
  <Response>
    <CallbackOrders>
      <CallbackOrder>
        <Address>
          <AddressId>AddressId</AddressId>
          <AddressFieldOne>1200 5th Avenue South</AddressFieldOne>
          <AddressFieldTwo>Suite 116</AddressFieldTwo>
          <AddressFieldThree>Station M162K7</AddressFieldThree>
          <City>Seattle</City>
          <State>WA</State>
          <PostalCode>98104</PostalCode>
          <CountryCode>US</CountryCode>
        </Address>
        <CallbackOrderItems>
          <CallbackOrderItem>
            <SKU>JKL909</SKU>
            <TaxTableId>SixPercent</TaxTableId>
            <PromotionIds>
              <PromotionId>TenDollar</PromotionId>
            </PromotionIds>
            <ShippingMethodIds>
              <ShippingMethodId>US Standard</ShippingMethodId>
              <ShippingMethodId>US Expedited</ShippingMethodId>
              <ShippingMethodId>US One-day</ShippingMethodId>
              <ShippingMethodId>US Two-day</ShippingMethodId>
            </ShippingMethodIds>
          </CallbackOrderItem>
        </CallbackOrderItems>
      </CallbackOrder>
    </CallbackOrders>
 </Response>
 <TaxTables>
   <TaxTable>
     <TaxTableId>SixPercent</TaxTableId>
     <TaxRules>
       <TaxRule>
         <Rate>0.06</Rate>
         <IsShippingTaxed>true</IsShippingTaxed>
         <USZipRegion>98104</USZipRegion>
        </TaxRule>
      </TaxRules>
    </TaxTable>
 </TaxTables>
 <Promotions>
   <Promotion>
     <PromotionId>TenDollar</PromotionId>
     <Description>Ten Dollars Off</Description>
     <Benefit>
       <FixedAmountDiscount>
         <Amount>10.0</Amount>
         <CurrencyCode>USD</CurrencyCode>
       </FixedAmountDiscount>
      </Benefit>
    </Promotion>
 </Promotions>
 <ShippingMethods>
   <ShippingMethod>
     <ShippingMethodId>US One-day</ShippingMethodId>
     <ServiceLevel>OneDay</ServiceLevel>
     <Rate>
       <ItemQuantityBased>
         <Amount>10.29</Amount>
         <CurrencyCode>USD</CurrencyCode>
        </ItemQuantityBased>
      </Rate>
      <IncludedRegions>
        <USZipRegion>98104</USZipRegion>
      </IncludedRegions>
    </ShippingMethod>
 <ShippingMethod>
   <ShippingMethodId>US Standard</ShippingMethodId>
     <ServiceLevel>Standard</ServiceLevel>
     <Rate>
       <WeightBased>
         <Amount>3.49</Amount>
         <CurrencyCode>USD</CurrencyCode>
       </WeightBased>
      </Rate>
      <IncludedRegions>
        <USZipRegion>98104</USZipRegion>
      </IncludedRegions>
    </ShippingMethod>
    <ShippingMethod>
      <ShippingMethodId>US Two-day</ShippingMethodId>
      <ServiceLevel>TwoDay</ServiceLevel>
      <Rate>
        <ShipmentBased>
          <Amount>15.49</Amount>
          <CurrencyCode>USD</CurrencyCode>
        </ShipmentBased>
      </Rate>
      <IncludedRegions>
        <USZipRegion>98104</USZipRegion>
      </IncludedRegions>
    </ShippingMethod>
    <ShippingMethod>
      <ShippingMethodId>US Expedited</ShippingMethodId>
      <ServiceLevel>Expedited</ServiceLevel>
      <Rate>
        <ShipmentBased>
          <Amount>7.49</Amount>
          <CurrencyCode>USD</CurrencyCode>
        </ShipmentBased>
      </Rate>
      <IncludedRegions>
        <USZipRegion>98104</USZipRegion>
      </IncludedRegions>
    </ShippingMethod>
  </ShippingMethods>
</OrderCalculationsResponse>
~);

use Data::Dumper;
print Dumper($xml);

__DATA__

$VAR1 = {
          'order-calculations-request' => '<?xml version="1.0" encoding="UTF-8"?><OrderCalculationsRequest xmlns="http://payments.amazon.com/checkout/2008-11-30/"><CallbackReferenceId>1-f5316886-afb3-4814-9289-5698cb02ec62</CallbackReferenceId><OrderCalculationCallbacks><CalculateTaxRates>false</CalculateTaxRates>
<CalculatePromotions>false</CalculatePromotions>
<CalculateShippingRates>true</CalculateShippingRates>
<OrderCallbackEndpoint>https://webapi.zoovy.com/webapi/amazon/callback.cgi/u=mcdc/prt=0/c=TBnfpCTpfSUf8Sde3nRviyp1v</OrderCallbackEndpoint>
<ProcessOrderOnCallbackFailure>false</ProcessOrderOnCallbackFailure>
</OrderCalculationCallbacks><ClientRequestId>TBnfpCTpfSUf8Sde3nRviyp1v</ClientRequestId><IntegratorId>ZOOVY</IntegratorId><IntegratorName>ZOOVY</IntegratorName><Cart>
<Items>
<Item><SKU>HS207</SKU>
<MerchantId>A10LQAJU44FUKM</MerchantId>
<Title>Webkinz Lil\' Kinz White Mouse</Title>
<Price><Amount>13.99</Amount><CurrencyCode>USD</CurrencyCode>
</Price><Quantity>2</Quantity>
<Weight><Amount>0.25</Amount>
<Unit>lb</Unit>
</Weight>
<TaxTableId>default</TaxTableId>
<FulfillmentNetwork>MERCHANT</FulfillmentNetwork>
</Item>
</Items>
</Cart><CallbackOrders><CallbackOrder><Address><AddressId>e3fb8896995936dacfe4dea334d5ba3f</AddressId><AddressFieldOne>1175 Opal St</AddressFieldOne><AddressFieldTwo/><AddressFieldThree/><City>San Diego</City><State>CA</State><PostalCode>92109</PostalCode><CountryCode>US</CountryCode></Address><CallbackOrderItems><CallbackOrderItem><SKU>HS207</SKU></CallbackOrderItem></CallbackOrderItems></CallbackOrder></CallbackOrders></OrderCalculationsRequest>',
          'Timestamp' => '2009-04-15T22:29:43.252Z',
          'Signature' => '3EkbQydyyRIthZHjG5HIQafZUms=',
          '_prt' => '0',
          '_c' => 'TBnfpCTpfSUf8Sde3nRviyp1v',
          'UUID' => '20c2f8e4-c861-4139-b362-67ee8a97d234',
          '_u' => 'mcdc'
        };

my ($x) = XML::Simple::XMLin(
  $VAR1->{'order-calculations-request'}, 
  ForceArray=>1);

## validate to make sure cart geometry hasn't changed.
foreach my $item (@{$x->{'Cart'}->[0]->{'Items'}}) {
  # print Dumper($y);
  }
  
print Dumper($x);
my $address = $x->{'CallbackOrders'}->[0]->{'CallbackOrder'}->[0]->{'Address'};
#$VAR1 = [
#          {
#            'PostalCode' => [
#                              '92109'
#                            ],
#            'AddressFieldThree' => [
#                                     {}
#                                   ],
#            'AddressFieldOne' => [
#                                   '1175 Opal St'
#                                 ],
#            'AddressFieldTwo' => [
#                                   {}
#                                 ],
#            'City' => [
#                        'San Diego'
#                      ],
#            'State' => [
#                         'CA'
#                       ],
#            'AddressId' => [
#                             'e3fb8896995936dacfe4dea334d5ba3f'
#                           ],
#            'CountryCode' => [
#                               'US'
#                             ]
#          }

  
my ($cart) = CART->new($VAR1->{'_u'},$VAR1->{'_c'});
$cart->save_property('cgi.address',$address->{'AddressFieldOne'}->[0]);
$cart->save_property('cgi.zip', $address->{'PostalCode'}->[0]);
$cart->save_property('cgi.city', $address->{'City'}->[0]);
$cart->save_property('cgi.state', $address->{'State'}->[0]);
$cart->save_property('cgi.countrycode', $address->{'CountryCode'}->[0]);
$cart->shipping(0,1);  

#		my $methodsref = $cart->fetch_property('ship.%methods');
#		foreach my $method (keys %{$methodsref}) {
#			# print "METHOD: $method\n";
#			$address->{'shipping-rate'} = $methodsref->{$method};
#			$address->{'shipping-name'} = $method;
#			$address->{'total-tax'} = $cart->fetch_property('data.tax_total');

# print Dumper($c);
  
use Data::Dumper;
# print Dumper($x);
