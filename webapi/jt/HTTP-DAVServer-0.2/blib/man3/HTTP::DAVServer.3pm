.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::DAVServer 3"
.TH HTTP::DAVServer 3 "2003-04-05" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
HTTP::DAVServer \- allows you to write server\-side functions to accept, process and respond to WebDAV client requests. WebDAV \- RFC 2518 \- is a protocol which allows clients to manipulate files on a remote server using HTTP.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your favorite \s-1NPH\s0 \s-1CGI\s0 script ( for now )
.PP
.Vb 2
\&      use HTTP::DAVServer;
\&      HTTP::DAVServer->handle;
.Ve
.PP
You will need to add directives to Apache to request that certain methods be
handled by the \s-1CGI\s0 script:
.PP
.Vb 2
\&      Script PROPFIND /cgi-bin/nph-webdav
\&      Script PUT      /cgi-bin/nph-webdav
.Ve
.PP
See \s-1INSTALL\s0 for more details.  See \s-1INSTALL\s0 for important warning!
.SH "MODULE STATUS"
.IX Header "MODULE STATUS"
This module is a prototype. Please see \s-1INSTALL\s0 for important warnings. You should try this module
if you're interested in developing a customized WebDAV server and you want to use Perl to do
most or all of fancy footwork behind the scenes.
.PP
My short term goal is to provide a reference implementation of a WebDAV server which can be subclassed
for specific implementation features. Information to resolve any of the following bugs is most welcome! I will
be fixing all the failed items in copymove next.
.PP
Litmus test results:
.PP
.Vb 1
\&    http and basic tests are good, some errors on copymove and propfind. proppatch not done so skips lots of tests.
.Ve
.PP
.Vb 6
\&    -> running `http':
\&    0. init.................. pass
\&    1. begin................. pass
\&    2. expect100............. pass
\&    3. finish................ pass
\&    <- summary for `http': of 4 tests run: 4 passed, 0 failed. 100.0%
.Ve
.PP
.Vb 18
\&    -> running `basic':
\&    0. init.................. pass
\&    1. begin................. pass
\&    2. options............... WARNING: server does not claim Class 2 compliance
\&     ...................... pass (with 1 warning)
\&    3. put_get............... pass
\&    4. put_get_utf8_segment.. pass
\&    5. mkcol_over_plain...... pass
\&    6. delete................ pass
\&    7. delete_null........... pass
\&    8. mkcol................. pass
\&    9. mkcol_again........... pass
\&    10. delete_coll........... pass
\&    11. mkcol_no_parent....... pass
\&    12. mkcol_with_body....... pass
\&    13. finish................ pass
\&    <- summary for `basic': of 14 tests run: 14 passed, 0 failed. 100.0%
\&    -> 1 warning was issued.
.Ve
.PP
.Vb 15
\&    -> running `copymove':
\&     0. init.................. pass
\&     1. begin................. pass
\&     2. copy_init............. pass
\&     3. copy_simple........... FAIL 
\&     4. copy_overwrite........ WARNING: COPY-on-existing fails with 412
\&        ...................... FAIL 
\&     5. copy_cleanup.......... pass
\&     6. copy_coll............. FAIL 
\&     7. move.................. FAIL 
\&     8. move_coll............. FAIL 
\&     9. move_cleanup.......... pass
\&    10. finish................ pass
\&    <- summary for `copymove': of 11 tests run: 6 passed, 5 failed. 54.5%
\&    -> 1 warning was issued.
.Ve
.PP
.Vb 28
\&    -> running `props':
\&     0. init.................. pass
\&     1. begin................. pass
\&     2. propfind_invalid...... pass
\&     3. propfind_invalid2..... pass
\&     4. propfind_d0........... FAIL (No responses returned)
\&     5. propinit.............. pass
\&     6. propset............... FAIL (PROPPATCH on `/litmus/litmus/prop': 400 Bad Request)
\&     7. propget............... SKIPPED
\&     8. propmove.............. SKIPPED
\&     9. propget............... SKIPPED
\&    10. propdeletes........... SKIPPED
\&    11. propget............... SKIPPED
\&    12. propreplace........... SKIPPED
\&    13. propget............... SKIPPED
\&    14. propnullns............ SKIPPED
\&    15. propget............... SKIPPED
\&    16. prophighunicode....... SKIPPED
\&    17. propget............... SKIPPED
\&    18. propvalnspace......... SKIPPED
\&    19. propwformed........... pass
\&    20. propinit.............. pass
\&    21. propmanyns............ FAIL (PROPPATCH on `/litmus/litmus/prop': 400 Bad Request)
\&    22. propget............... FAIL (PROPFIND on `/litmus/litmus/prop': 400 Bad Request)
\&    23. propcleanup........... pass
\&    24. finish................ pass
\&    -> 12 tests were skipped.
\&    <- summary for `props': of 13 tests run: 9 passed, 4 failed. 69.2%
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
This code requires:
.PP
.Vb 3
\&  XML::Simple
\&  XML::SAX     (for namespace support in XML::Simple)
\&  DateTime     (THE new Date and Time support in Perl)
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
For technical support please email to jlawrenc@cpan.org ... 
for faster service please include \*(L"HTTP::DAVServer\*(R" and \*(L"help\*(R" in your subject line.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\& Jay J. Lawrence - jlawrenc@cpan.org
\& Infonium Inc., Canada
\& http://www.infonium.ca/
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003 Jay J. Lawrence, Infonium Inc. All rights reserved.
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thank you to the authors of my prequisite modules. With out your help this code
would be much more difficult to write!
.PP
.Vb 3
\& XML::Simple - Grant McLean
\& XML::SAX    - Matt Sergeant
\& DateTime    - Dave Rolsky
.Ve
.PP
Also the authors of litmus, a very helpful tool indeed!
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1HTTP::DAV\s0, HTTP::Webdav, http://www.webdav.org/, \s-1RFC\s0 2518
