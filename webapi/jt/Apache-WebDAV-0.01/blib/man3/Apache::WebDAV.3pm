.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Apache::WebDAV 3"
.TH Apache::WebDAV 3 "2006-11-22" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Apache::WebDAV \- Extensible WebDAV server for Apache.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Apache::WebDAV;
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Write perl modules to handle file transfers through WebDAV.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Apache::WebDAV is a WebDAV server implementation.  It was originally based on Net::DAV::Server (which isn't compatible with Apache), but has undergone significant architectural changes.  Apache::WebDAV can be used with a simple mod_perl handler and tied to Filesys::Virtual::Plain to provide a simple, file-system-based WebDAV server.  However, the real power of this module lies in its ability to use any Filesys::Virtual subclass as a storage mechanism.  For example, you can write a subclass of Filesys::Virtual to store and retrieve data directly from a database.
.PP
It is also possible to use different Filesys::Virtual subclasses to respond to different paths under your WebDAV root.  This allows you to have some sections interact with the filesystem, others with a database, etc.
.SH "WebDAV Standards Compatibility"
.IX Header "WebDAV Standards Compatibility"
The WebDAV protocol is unclear and client behavior differs drastically.  During development of this module, the following clients were identified as targets for support:
.PP
.Vb 6
\& WebDrive  (windows)
\& Transmit  (osx)
\& Goliath   (osx)
\& Cadaver   (linux)
\& Konqueror (linux)
\& HTTP::DAV (perl)
.Ve
.PP
The MacOSX Finder is also supported, assuming your Filesys::Virtual subclass is fully and correctly implemented.  Specifically, you can't expect the Finder to \*(L"\s-1PUT\s0\*(R" a file in one nice step, rather, it takes multiple requests and it's difficult to programmatically determine when the file is \*(L"finished\*(R" uploading.
.PP
In addition, depending on your Filesys::Virtual subclass, of course, this module passes most of the WebDAV Litmus tests (http://www.webdav.org/neon/litmus/) without errors or warnings.  Specifically:
.PP
.Vb 8
\& OPTIONS for DAV: header 
\& PUT, GET with byte comparison 
\& MKCOL 
\& DELETE (collections, non-collections) 
\& COPY, MOVE using combinations of: 
\&  overwrite t/f 
\&  destination exists/doesn't exist 
\&  collection/non-collection
.Ve
.PP
However, there is currently no support for \s-1LOCKING\s0 or \s-1PROPERTY\s0 \s-1MANIPULATION\s0.
.PP
Finally, there are certain pieces of code in this module that purposefully break from the WebdAV protocol in order to support a specific client.  As of this writing, both Goliath and WebDrive require these hacks.  (Both are commented in the code.)
.PP
Microsoft Internet Explorer \*(L"Web Folders\*(R" do not seem to work and no effort has been made to figure out why.
.PP
Here is the output of the Litmus Test when running basic, copymove, and http:
.PP
.Vb 42
\&    $ echo $TESTS
\&    basic copymove http
\&    lozier@ruggles:~$ litmus http://pg.ruggles:8080/ApacheDAV
\&    -> running `basic':
\&     0. init.................. pass
\&     1. begin................. pass
\&     2. options............... pass
\&     3. put_get............... pass
\&     4. put_get_utf8_segment.. pass
\&     5. mkcol_over_plain...... pass
\&     6. delete................ pass
\&     7. delete_null........... pass
\&     8. delete_fragment....... WARNING: DELETE removed collection resource with Request-URI including fragment; unsafe
\&        ...................... pass (with 1 warning)
\&     9. mkcol................. pass
\&    10. mkcol_again........... pass
\&    11. delete_coll........... pass
\&    12. mkcol_no_parent....... pass
\&    13. mkcol_with_body....... pass
\&    14. finish................ pass
\&    <- summary for `basic': of 15 tests run: 15 passed, 0 failed. 100.0%
\&    -> 1 warning was issued.
\&    -> running `copymove':
\&     0. init.................. pass
\&     1. begin................. pass
\&     2. copy_init............. pass
\&     3. copy_simple........... pass
\&     4. copy_overwrite........ pass
\&     5. copy_nodestcoll....... pass
\&     6. copy_cleanup.......... pass
\&     7. copy_coll............. pass
\&     8. move.................. pass
\&     9. move_coll............. pass
\&    10. move_cleanup.......... pass
\&    11. finish................ pass
\&    <- summary for `copymove': of 12 tests run: 12 passed, 0 failed. 100.0%
\&    -> running `http':
\&     0. init.................. pass
\&     1. begin................. pass
\&     2. expect100............. pass
\&     3. finish................ pass
\&    <- summary for `http': of 4 tests run: 4 passed, 0 failed. 100.0%
.Ve
.PP
The props tests mostly fail.
.SH "IMPLEMENTATION"
.IX Header "IMPLEMENTATION"
In order to get a working WebDAV server up and running quickly, the following instructions are provided.  It is recommended that you install Filesys::Virtual::Plain and follow the instructions below.  Please be advised that there is no authentication layer built in, so don't just put this out on a public server somewhere and expect it to be secure!  Rather, write your own mod_perl authentication handler.
.Sh "mod_perl handler"
.IX Subsection "mod_perl handler"
My theoretical server is \*(L"myserver\*(R" in all examples.  First you need to write a simple mod_perl handler.  Mine is called DAVHandler.pm.  The code looks like this:
.PP
.Vb 1
\& package DAVHandler;
.Ve
.PP
.Vb 2
\& use strict;
\& use warnings;
.Ve
.PP
.Vb 2
\& use Apache::WebDAV;
\& use Filesys::Virtual::Plain;
.Ve
.PP
.Vb 3
\& sub handler
\& {
\&     my $r = shift;
.Ve
.PP
.Vb 1
\&     my $dav = new Apache::WebDAV();
.Ve
.PP
.Vb 9
\&     my @handlers = (
\&         {
\&             path   => '/DAV',
\&             module => 'Filesys::Virtual::Plain',
\&             args   => {
\&                 root_path => '/home/lozier'
\&             }
\&         }
\&     );
.Ve
.PP
.Vb 1
\&     $dav->register_handlers(@handlers);
.Ve
.PP
.Vb 2
\&     return $dav->process($r);
\& }
.Ve
.PP
Many Filesys::Virtual subclasses require arguments to their constructors.  Notice the \*(L"args\*(R" subscript in the \f(CW@handlers\fR array above.  Use this to pass any required arguments.  If no arguments are present, the root_path will be set to the path that was matched ($handlers[0]\->{'path'} in this example), and cwd will be set to the full \s-1URI\s0 (from \f(CW$r\fR\->\fIuri()\fR).
.Sh "Apache Configuration"
.IX Subsection "Apache Configuration"
You will need to tell your apache server to respond to webdav requests on a specific path.  Here is a full example of the required section:
.PP
.Vb 4
\& <Location /DAV>
\&     SetHandler perl-script
\&     PerlHandler Finch::Web::Handler::ApacheDAV
\& </Location>
.Ve
.PP
Please note, this example doesn't have any authentication requirement.  Please use a mod_perl authentication handler to allow valid users only.
.SH "UNIT TESTS"
.IX Header "UNIT TESTS"
Since this module requires a running instance of Apache with a properly configured mod_perl handler in order to even run, there are no unit tests provided.  Feedback requested.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Filesys::Virtual
Filesys::Virtual::Plain
Net::DAV::Server
\&\s-1HTTP::DAV\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Lozier, Geospiza, Inc. lozier@geospiza.com
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 Geospiza, Inc. <http://www.geospiza.com/>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
