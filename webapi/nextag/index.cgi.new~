#!/usr/bin/perl

use strict;

use lib "/httpd/modules";
use ZOOVY;
use NAVCAT::FEED;
use ZSHIP;
use INVENTORY;
use GTOOLS;
use WHOLESALE;
use SYNDICATION;
use POGS;

my $USERNAME = $ENV{'REQUEST_URI'};
if ($USERNAME =~ /\/([a-zA-Z0-9\.]+)\.txt$/) { $USERNAME = $1; } else { $USERNAME = ''; }
my $PROFILE = 'DEFAULT';


## separate USERNAME+PROFILE 
if ($USERNAME =~ /\./) {
	($USERNAME,$PROFILE) = split(/\./,$USERNAME);
	}


my $ERROR = '';
if ($USERNAME eq '') { $ERROR = 'Could not find username.'; }

my ($so) = SYNDICATION->new($USERNAME,$PROFILE,'NXT');
tie my %s, 'SYNDICATION', THIS=>$so;
if (not defined $so) { $ERROR = 'Feed Record does not exist in database'; }
my ($DOMAIN,$ROOTPATH,$nsref) = $so->syn_info();
my $LINK = "http://$DOMAIN";

########################################################################
## step 1: create a list of products, and navcats
my ($ncprettyref,$ncprodref,$ncref) = ();
if ($ERROR eq '') {
	($ncprettyref,$ncprodref,$ncref) = &NAVCAT::FEED::matching_navcats($USERNAME,'NEXTAG',0,$ROOTPATH);
	}

########################################################################
## step 2: segment these into batches of 25 products for easy processing
my @batches = ();
my @new = ();
my $thisref = \@new;
my %done = ();
if ($ERROR eq '') {
	foreach my $prod (sort keys %{$ncprodref}) {
		next if (defined $done{$prod});
		push @{$thisref}, $prod;
		if (scalar(@{$thisref})==25) {
			my @new = ();
			push @batches, $thisref;
			$thisref = \@new;
			}
		$done{$prod}++;
		}
	if (scalar(@{$thisref})>0) { push @batches, $thisref; }
	}


print "Content-type: text/palain\n\n";

if (0) {
	print "USERNAME: $USERNAME PROFILE: $PROFILE\n";
	use Data::Dumper;
	print Dumper($so);
	print "Generating file format $s{'.format'}\n";
	}

if ($ERROR ne '') {
	print "ERROR: $ERROR\n";
	$so->syn_finish($ERROR,1);
	}
else {
	########################################################################
	## step 3: parse through the products 
	my $FILENAME = "/tmp/nextag-$USERNAME.txt";
	print STDERR "FILENAME: $FILENAME ERROR: $ERROR\n";
	my $linecount = 0;
	open my $F, ">$FILENAME";
	
	if ($s{'.format'}==0) {
		## SOFT GOODS
		## http://merchants.nextag.com/serv/main/buyer/SoftGoodsFeedSpec.jsp?nxtg=2a2b81_3209B333E7964B4B
		&output($F,"Product Title\tManufacturer Name\tPrice\tURL\tManufacturer SKU\tProduct Category\tImage URL\tProduct Description\tDistributor ID\tMSRP Price\tStock Status\tGround shipping\tProduct Weight\tUPC\tMarketing Message\tWarranty\n");
		}
	elsif ($s{'.format'}==1) {
		## Tech Feed
		## http://merchants.nextag.com/serv/main/buyer/TechFeedSpec.jsp?nxtg=2a2b81_3209B333E7964B4B
		&output($F,"Product Title\tManufacturer Name\tManufacturer Part Number\tPrice\tURL\tProduct Image URL\tMUZE ID\tShipping Cost\tProduct Weight\tProduct Description\tProduct Category\tWarranty Info\tProduct Condition\tPromotional Details\tCPC Rate\tMax CPC\n");
		}

	my $pdbh = &DBINFO::db_products_connect();
	foreach my $batchref (@batches) {
		## get product data
		my $prodsref = &ZOOVY::fetchproducts_into_hashref($USERNAME,$batchref);
		my ($ONHANDREF,$RESREF,$LOCREF) = &INVENTORY::fetch_incrementals($USERNAME,$batchref,undef,0);

		foreach my $prod (keys %{$prodsref}) {
			next if ($prod eq '');
			next if ($prodsref->{$prod}->{'zoovy:base_price'} <= 0);
	
			if (not defined $prodsref->{$prod}->{'nextag:ts'}) { $prodsref->{$prod}->{'nextag:ts'} = 0; }
			next unless ($prodsref->{$prod}->{'nextag:ts'} >= 0);		# -1 means we should not submit.

			#my $QTY = undef;
			#if (defined $ONHANDREF->{$prod}) { $QTY = $ONHANDREF->{$prod}-$RESREF->{$prod}; }
			#next if ($QTY<=0);
			my $QTY = undef;
			## Unlimited inventory
 			if ($prodsref->{$prod}->{'zoovy:inv_enable'} & 32) {
				$QTY = 9999;
            }
         ## product w/o inventorable options
         elsif ($prodsref->{$prod}->{'zoovy:pogs'} eq '' && $prodsref->{$prod}->{'zoovy:pogs'} =~ /inv=1/) {
         	if (defined $ONHANDREF->{$prod}) { $QTY = $ONHANDREF->{$prod}-$RESREF->{$prod}; }
            }
         ## product w/options
         else {
         	my @pogs = POGS::text_to_struct($USERNAME,$prodsref->{$prod}->{'zoovy:pogs'},1);
            my $hashref = POGS::build_sku_list($prod,\@pogs,3);
            my @skus = keys %{$hashref};
            foreach my $sku (@skus) {
            	$QTY += ($ONHANDREF->{$sku}-$RESREF->{$sku});
               }
            }
#         print STDERR "QTY $prod: $QTY\n";
			next if ($QTY<=0);


			if ($s{'.schedule'} ne '') { &WHOLESALE::tweak_product($USERNAME,$s{'.schedule'},$prodsref->{$prod}); }

			my $CATNAME = $ncprettyref->{$ncprodref->{$prod}};
			my $line = buildLine($LINK,$s{'.format'},$USERNAME,$nsref,$prod,$prodsref->{$prod},$ncref->{$prod},$QTY,$CATNAME);
			next if ($line eq '');
			&output($F,$line);
			$linecount++;
			}
		&DBINFO::db_products_close();
		close $F;

		}

	$so->syn_finish("Successfully generated feed",0,$linecount);

	}


sub output {
	my ($F, $line) = @_;

	print $F $line;
	print $line;
	}

##
##
sub buildLine {
	my ($LINK,$FORMAT,$USERNAME,$nsref,$PID,$ref,$CATEGORY,$QTY,$CATNAME) = @_;

   my $c = '';
   foreach my $k (keys %{$ref}) {
      next if ($k eq 'zoovy:prod_thumb');
      next if ($k eq 'zoovy:prod_image1');
      $ref->{$k} =~ s/<java.*?>.*?<\/java.*?>//gis;
      $ref->{$k} =~ s/<script.*?<\/script>//gis;
      $ref->{$k} =~ s/<.*?>//gs;
      $ref->{$k} =~ s/[\t]+/ /g;
      $ref->{$k} =~ s/[^\"\w\.\:\:\!\@\#\$\%\^\&\*\(\)\-\+]+/ /g;
      }

   if ($ref->{'zoovy:prod_image1'} eq '') {
      $ref->{'zoovy:prod_image1'} = $ref->{'zoovy:prod_thumb'};
      }

   # Mfr
   my $key = undef;
   if (not defined $key) { $key = $ref->{'zoovy:prod_mfg'}; if ($key eq '') { $key = undef; } }
   if (not defined $key) { $key = $ref->{'zoovy:prod_mfgid'}; if ($key eq '') { $key = undef; } }
   if (not defined $key) { $key = $PID; }

	my $IMGURL = '';
   if ($ref->{'zoovy:prod_image1'} =~ /http[s]:/) {
      ## http://www.someimage.com
      $IMGURL = $ref->{'zoovy:prod_image1'};
      }
   elsif ($ref->{'zoovy:prod_image1'}) {
      $IMGURL = &GTOOLS::imageurl($USERNAME,$ref->{'zoovy:prod_image1'},0,0,'FFFFFF',0,'jpg');
      }

	if ($ref->{'zoovy:prod_mfgid'} eq '') { $ref->{'zoovy:prod_mfgid'} = $PID; }
	if ($ref->{'zoovy:prod_mfg'} eq '') { $ref->{'zoovy:prod_mfg'} = &ZOOVY::fetchmerchant_attrib($USERNAME,'zoovy:company_name'); }
	if ($ref->{'zoovy:prod_mfg'} eq '') { $ref->{'zoovy:prod_mfg'} = $USERNAME; }

	
	if ($FORMAT == 0) {
		## SOFT GOODS
		## http://merchants.nextag.com/serv/main/buyer/SoftGoodsFeedSpec.jsp?nxtg=2a2b81_3209B333E7964B4B

		## Product Title	Yes	See restrictions below
		$c .= $ref->{'zoovy:prod_name'}."\t";
		## Manufacturer Name	Yes	This name is used as the brand of the product on the site
		$c .= $ref->{'zoovy:prod_mfg'}."\t";
		## Price	Yes	Merchant List Price
		$c .= $ref->{'zoovy:base_price'}."\t";

		## URL of product page	Yes	 
		# $c .= "http://$USERNAME.zoovy.com/product/$PID?META=nextag-$PID\t";


   my $analytics = '';
   if ($nsref->{'analytics:syndication'} eq 'GOOGLE') {
      $analytics = sprintf("&utm_source=NEXTAG&utm_medium=CPC&utm_content=%s&utm_campaign=%s",
         $ref->{'nextag:content'},$ref->{'nextag:campaign'});
      }

		$c .= "$LINK/product/$PID?META=nextag-$PID$analytics\t";

		## Manufacturer SKU	Yes	 
		$c .= $ref->{'zoovy:prod_mfgid'}."\t";

		## Product Category	Yes	If you categorize products using a hierarchical taxonomy, please include one field for each level of the taxonomy
		$c .= $CATNAME."\t";
		## Image URL of product	Yes	Please provide largest available image size with highest resolution. Images should be at least 100 by 100 pixels
		$c .= $IMGURL."\t";
		## Product Description	Yes	Approximately the first 180 characters are displayed on the search results page
		$c .= $ref->{'zoovy:prod_desc'}."\t";
		## Distributor ID	No	 
		$c .= "\t";
		## MSRP Price	No	Recommended
		$c .= $ref->{'zoovy:prod_msrp'}."\t";
		## Stock Status	No	Values: Yes, No
		$c .= "Yes\t";
		## Ground shipping	No	If you cannot provide, please provide the calculation for ground shipping
		$c .= $ref->{'zoovy:ship_cost1'}."\t";
		## 2nd day shipping	No	If you cannot provide, please provide the calculation for 2nd day shipping
		$c .=	"\t";
		## Overnight	No	If you cannot provide, please provide the calculation for overnight shipping
		$c .= "\t";
		## Product Weight	No	Only required for weight-based shipping calculations. At a minimum, it is recommended that this field or the ground-shipping field is included
		$c .= sprintf("%.1f",&ZSHIP::smart_weight($ref->{'zoovy:base_weight'})/16)."\t";
		## UPC	No	Only required if Manufacturer SKU and Manufacturer name are not both specified
		$c .= $ref->{'zoovy:prod_upc'}."\t";
		## Marketing Message	No	Promotional tag (24 character limit) Ex: Free shipping, 20% off sale, $3.00 flat shipping
		$c .= $ref->{'zoovy:prod_promotxt'}."\t";
		## Warranty	No	Information on warranty and service programs		
		$c .= $ref->{'zoovy:prod_warranty'}."\n";
		}
	else {
		## Product Title	Yes	Under 40 characters - see below for *important* restrictions
		$c .= $ref->{'zoovy:prod_name'}."\t";
		## Manufacturer Name	Yes	Under 40 characters
		$c .= $ref->{'zoovy:prod_mfg'}."\t";
		## Manufacturer Part Number	Yes	Under 40 characters
		$c .= $ref->{'zoovy:prod_mfgid'}."\t";
		## Price	Yes	U.S. Dollars
		$c .= $ref->{'zoovy:base_price'}."\t";
		## URL of product page	Yes	URL
		$c .= "http://$USERNAME.zoovy.com/product/$PID?META=nextag-$PID\t";
		## Product Image URL	No	URL For better success with conversion rates, it is strongly suggested that you include a link to your largest, highest resolution images
		$c .= $IMGURL."\t";
		## MUZE ID	No	Applicable only for Music and Video Products
		$c .= $ref->{'nextag:muze_id'}."\t";
		## Shipping Cost	No	For ground - if you cannot provide, let us know what your shipping calculation is
		$c .= $ref->{'zoovy:ship_cost1'}."\t";
		## Product Weight	No	For weight-based shipping calculations
		$c .= sprintf("%.1f",&ZSHIP::smart_weight($ref->{'zoovy:base_weight'})/16)."\t";
		## Product Description	No	Under 255 characters, no HTML tags or special characters
		$c .= $ref->{'zoovy:prod_desc'}."\t";
		## Product Category	No	 
		$c .= $CATNAME."\t";
		## Warranty Info	No	 
		$c .= $ref->{'zoovy:prod_warranty'}."\t";
		## Product Condition	No	New, Used, Refurbished, Blank
		$c .= $ref->{'zoovy:prod_condition'}."\t";
		## Promotional Details	No	 
		$c .= $ref->{'zoovy:prod_promotxt'}."\t";
		## CPC Rate	No	For setting CPC product-by-product in your feed
		$c .= $ref->{'nextag:cpc_rate'}."\t";
		## Max CPC	No	For defining CPC as the maximum you want to bid for this product
		$c .= $ref->{'nextag:max_cpc'}."\n";
		}

	return($c);	
	}