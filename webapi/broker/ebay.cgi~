#!/usr/bin/perl

use lib "/httpd/modules";
use lib ".";
use CGI;
use ZAUTH;
use ZOOVY;
use EBAY;
use GT;


$|++;
$q = new CGI;

$USERNAME = $q->param("USERNAME");
$PASSWORD = $q->param("PASSWORD");
if (!$USERNAME && !$PASSWORD) 
   { 
   # if they didn't pass username, then lets try cookie authentication
   ($USERNAME) = ZOOVY::authenticate();
   if (!$USERNAME || $SESSION_STATUS != 0) 
      {
      print $q->header(-type=>"text/error");
      print "ERROR: Invalid Username/Password or not specified! ($SESSION_STATUS -> $USERNAME)\n";
      exit; 
      }
   } else {
   if (!ZOOVY::verifypassword($USERNAME,$PASSWORD,1))
      { 
      print $q->header(-type=>"text/error");
      print "ERROR: Invalid Username/Password\n"; 
      exit(0); 
      }
   }

$GT::TAG{'<!-- DATA -->'} = $q->param('ZOOVY');
open F, ">/tmp/foo";
print F $q->param('ZOOVY');
close F;
$ZOOVY = $q->unescape($q->param('ZOOVY'));

print $q->header;

# print STDERR "ZOOVY is=[$ZOOVY]\n";
%vars = &attrib_handler($ZOOVY);
 foreach (keys %vars) { print STDERR "BROKER=".$_." -> ".$vars{$_}."\n"; }

if ($vars{"ebay:use_gallery"} eq 'ON' && ($vars{'zoovy:prod_thumb'} ne ''))
	{
	$GT::TAG{"<!-- GALLERY -->"} = "<img src='".&GT::imageurl($USERNAME,$vars{"zoovy:prod_thumb"},96,96,"FFFFFF",0)."' border='0'>";
	} else {
	$GT::TAG{"<!-- GALLERY -->"} = "Gallery Not Enabled for this Auction [".$vars{'ebay:use_gallery'}.'/'.$vars{'zoovy:prod_thumb'}.']';
	}

if ($vars{"zoovy:prod_image1"})
   {
   $GT::TAG{"<!-- IMAGE -->"} = "<img src='".&GT::imageurl($USERNAME,$vars{"zoovy:prod_image1"},300,300,"FFFFFF",0)."' border='0'>";
   } else {
	if ($vars{"ebay:prod_image1"})
		{
	   $GT::TAG{"<!-- IMAGE -->"} = "<img src='".&GT::imageurl($USERNAME,$vars{"ebay:prod_image1"},300,300,"FFFFFF",0)."' border='0'>";
		} else {
	   $GT::TAG{"<!-- IMAGE -->"} = "Not Configured";
		}
   }
%AR = ();


if ($vars{'ebay:type'} eq 'CUSTOM')
	{
	$pretty = '</center>'.$vars{'ebay:description'}.'<center>';
	if ($vars{'ebay:counter'} ne '')
			{
			$pretty .= "<center>";
			$pretty .= "<a href='http://$USERNAME.zoovy.com/counter.cgis?channel=0'>";
			if (($vars{'ebay:counter'} eq 'blank') || ($vars{'ebay:counter'} eq 'hidden')) { $BORDER = 0; } else { $BORDER = 1; }
			$pretty .= "<br><img border=$BORDER src='http://track.zoovy.com/counter.cgi?MERCHANT=$USERNAME&CHANNEL=0&STYLE=".$vars{'ebay:counter'}."'><br>";
			$pretty .= "</a>";
			}

		if ($vars{'ebay:linklocation'} eq 'BOTTOM') { $pretty .= "<br><center><a href='http://$USERNAME.zoovy.com/counter.cgis?channel=0'>".$vars{'ebay:linktext'}.'</center><br></a>'; }	
		if ($vars{'ebay:linklocation'} eq 'TOP') { $pretty = "<br><center><a href='http://$USERNAME.zoovy.com/counter.cgis?channel=0'>".$vars{'ebay:linktext'}.'</center><br></a>'.$pretty; }	

		if ($vars{'zoovy:tellaboutzoovy'}) 
			{
			$pretty .= "<img border='0' src='http://www.zoovy.com/images/poweredby.gif'>";
			$pretty .= "</a></td><td><font face='Arial' size='2'>";
			$pretty .= "This Auction will be closed using Zoovy Auction processing technology. ";
			$pretty .= "Winners of multiple auctions will be able to save shipping. Serious bidders only.";
			}

		$vars{'ebay:description'} = $pretty;
		$GT::TAG{"<!-- PRETTY -->"} = $pretty;

	} else {
	$GT::TAG{"<!-- PRETTY -->"} = &EBAY::make_pretty($ZOOVY,\%AR,1,$USERNAME);
	}

if (defined($vars{'zoovy:html'}))
	{
	$pretty = $vars{'zoovy:html'};
	$GT::TAG{'<!-- PRETTY -->'} = $vars{'zoovy:html'};
	}

&GT::print_form("","ebay.shtml");

exit(0);

##############################
## 
## sub: attrib_handler
##
## PURPOSE: converts strings from the format <merchant.tag>data</tag> to 
##          a usable hash
##
## returns: HASH with key=merchant.tag and value=data
##
###############################
sub attrib_handler
{
	my ($BUFFER) = @_;
	if ((not defined($BUFFER)) || ($BUFFER eq '')) { return; }
	# first match all the merchant:tag combinations (note this will NOT
	# match </merchant:attrib>
	$BUFFER .= "\n";
	study($BUFFER);
	my %HASH = ();

	# split on the end tags.
	my @ar = split (/.*?\<\/([\w|:]+)\>.*?/s, $BUFFER);

	foreach my $KEY (@ar)
	{
		# find the data which matches the KEY
		# print STDERR "\n\nKEY IS:".$KEY;
		if ($KEY ne "")
		{
			if ($BUFFER =~ /\<$KEY\>(.*?)\<\/$KEY\>/s) { $HASH{$KEY} = &dcode("$1"); }
		}
	}

	return (%HASH);
} ## end sub attrib_handler
