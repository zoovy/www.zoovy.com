zoovy dialtone protocol
TODO: Authentication. 

web based flash object
  parameters are passed into the flash object when the page is generated.
	Product page: USERNAME=  PRODUCT=	PAGE=sdomain:[speciality domain]
 	eBay Listing: USERNAME=	 PRODUCT=	PAGE=ebay:[ebay uuid -- ID column in
MONITOR_OO_QUEUE]
	Overstock   : USERNAME=	 PRODUCT=	PAGE=os:[overstock uuid -- ID column
in OVERSTOCK_LISTINGS]
  posts to http://webapi.zoovy.com/webapi/dialtone/client.cgi
  passes: 
	USERNAME=  [received from flashvars]
	PRODUCT=  [received from flashvars]
	PAGE=    [received from flashvars]
	V=1.0	[hardcoded version #]
	TYPE=CALL [eventually this might be other types e.g. CHAT|VIDEO]
	DIAL=remote phone 
	IP=remote ip address (if known)
	SESSION=unique id generated by client identifying this call (required)


client.cgi returns to flash object:
<clientResponse>
  <call session="[SESSION ID PASSED BY CLIENT]" status="[STATUS]"/>
</clientResponse>

[STATUS] can be any of the following:
-- RINGING = attempting to locate the remote party
-- NOANSWER = the remote party was not available to take the call
-- CONNECTING = the remote party is trying to contact you right now, please
answer your phone.
-- DONE = the call has been completed.

FUTURE: 
  web based flash object can check "STATUS" to see if operators really are
available e.g. are operators
 available (based on the last polling time)
e.g. http://webapi.zoovy.com/dialtone.cgi?USERNAME=xxx&METHOD=STATUS
response:
<clientStatus>
  <Operators>#</Operators>
</clientStatus>

# will be the # of operators available. 
0 means display a "No operators available"
Possibly lets them send an email or some such nonsense (we could potentially
use the 
feedback form on the website)



-----------------------------------------------------------
operator version # should be 1.00

the windows client polls by hitting 
http://webapi.zoovy.com/webapi/dialtone/operator.cgi as well - 

to make this fast and light on both sides we have implemented a key/value
exchange -
content-type: text/plain, just like the old versioncheck.cgi protocol.
delimited by ='s -- the keys are always a-z0-9_ values are URI encoded -- so
you will need to decode them.

it passes the following information on the URI
  MODE=OPERATOR
  VERSION=client version
  CUID=a guid uniquely identifying this particular client (this can be any
random number)
  USERNAME=
  METHOD=QUERY
  
Responses in OPERATOR MODE - 
-- note: a CALL_ variables will ONLY be displayed if count>0
COUNT=1
METHOD=Query
CALL_ID=[REMOTE SESSION]
CALL_USERNAME=
CALL_PRODUCT=
CALL_PAGE=
CALL_URL=[url to display]
CALL_PARTY=########## (the number to dial)

NOTE: we will pass a 10 digit phone number, so you will need to add the 1
and 
optionally the "9" (if it's a PBX) before dialing. 

note: count of -1 means the CUID is no longer valid. the client should
generate a new CUID
and attempt to re-register. Once a -1 has been passed, the client should NOT
continue polling
(this is our upgrade mechanism).

Before making the call - the client should acknowledge that is in fact
handling the call
by posting to:
  MODE=OPERATOR 
  VERSION=client version
  CUID=
  METHOD=ACK
  CALLID=session variable
response:
METHOD=ACK


When the call is over, the client should post to:
   MODE=OPERATOR
   VERSION=client version
   CUID=
   METHOD=DONE
   CALLID=session variable
response:
METHOD=DONE


-------------------------------------------------------------

The CUID is generated by the client. It's just a random string.

there is a registration protocol, for each CUID -- that corresponds 
back to one account in the ZUSER_LOGIN table.

the basic protocol is as follows - posts to:
https://webapi.zoovy.com/webapi/dialtone/register.cgi
passes: USERNAME=USERNAME*LOGIN PASSWORD=xxxx CUID= VERSION=

response:
STATUS=SUCCESS|FAIL
MESSAGE=The reason why registration failure occurred e.g. bad
password/invalid version

once a success has occurred, then the client can being using the CUID in
polling.
