#!/usr/bin/perl
#
# Install (a modified version of) this program in your webserver's cgi-bin directory.
# 
# This demo program calculates tax & shipping for an order
#
# Relevant Order fields are:
#
# {Ship,Bill}-Address1, -Address2, -City, -State, -Zip, -Country
#   The shipping and billing address. Both will be filled in, and will be the same if the
#   user only gave one address
#
# Item-Id-N, -Code-N, -Quantity-N, -Unit-Price-N, -Description-N, -Url-N,
#   For values of N from 1 to Item-Count, the relevant attributes of each item are given.
#   This script contains code to separate these into an @items array.
#   Code is from the "Code" field when editing the item, typically an SKU or ISBN
#   Unit-Price takes any quantity pricing into account
#

use lib "/httpd/modules";
use ZOOVY;
use ZWEBSITE;
use Data::Dumper;
my $USERNAME = 'def'; 
my $PASS = 'def';


if ($ENV{'REQUEST_METHOD'} ne "POST") {
    die("Expecting a POST, bailing");
}


if ($ENV{'REQUEST_URI'} =~ /user\=(.*?)$/s) {
	$USERNAME = $1;
	} else {
	print "Status: 400\n";
	print "Content-type: text/plain\n";
	print "argh. no username $ENV{'HTTP_REFERER'} \n";
	exit;
	}

my $o;
read(STDIN,$o,$ENV{'CONTENT_LENGTH'});

my %o;
for (split(/&/,$o)) {
    $_ =~ s/\+/ /g;
    my($key,$val) = split(/=/,$_,2);
    for ($key,$val) {
        $_ =~ s/%([0-9a-fA-F][0-9a-fA-F])/chr(hex($1))/ge;
    }
    $o{$key} = $val;
}

# Unpack the named item fields into an array of items
# The fields are Item-Id-1, Item-Code-1, Item-Quantity-1, Item-Unit-Price-1, Item-Description-1, Item-Url-1
# and the second item is Item-Code-2, ...
# Item-Count gives the total number.

my @items;
my $i;
for ($i=1; $i<=$o{'Item-Count'}; $i++) {
	push(@items,{map {($_,$o{"Item-$_-$i"})} qw(Id Code Quantity Unit-Price Description Url)});
}

open(RAW,">/tmp/yahoo-ship.raw");
for (sort keys %o) {
    print RAW "$_ = $o{$_}\n";
}
close(RAW);

&handle_order(\%o,@items);

# A successful delivery is indicated by a good HTTP result code.
print "Status: 200 OK\n";
print "\n";
exit(0);


######################################################################
# Replace this function with something that does what you want
#   $info gets a hash ref of all the order fields, like Ship-Zip.
#   @items gets an array of hash refs, one for each item.

sub handle_order {
    my($info,@items)=@_;

    my $tax;
    my $shipping;

	# sku is $info->{'Item-Code-1'}
	# quantity is  $info->{'Item-Quantity-1'}
	# taxable is $info->{'Item-Taxable-1'}
	# ship zip is $info->{'Ship-Zip'}
	# Ship type is $info->{'Shipping'}
	# Total Weight is $info->{'Total-Weight'}
	# country is $info->{'Ship-Country'}
	# state is $info->{'Ship-State'}

	my $count = $info->{'Item-Count'};
	my %CONTENTS = ();
	while ($count) {
		$CONTENTS{$info->{'Item-Code-'.$count}} = $info->{'Item-Price-'.$count}.','.$info->{'Item-Quantity-'.$count}.','. 
				$info->{'Item-Weight-'.$count}.'#,'.$info->{'Item-Taxable-'.$count};
		$count--;
		}

#	print "Shipping-Charge: 999.99\n";
#	print "Tax-Charge: 100.00\n";

	my ($methodref,$inforef);
	my $value = undef;
	my $stateamt = undef;
	my $zipamt = undef;
	my $shipamt = undef;
	my $staterate = undef;
	my $ziprate = undef;

	if ($info->{'Ship-Country'} ne 'US United States') {		
		# International
		print "Shipping-Error: Cannot ship UPS outside contintal US\n";
		}
	else {
		# Not International

		require CART;
		my $cart = CART->new($MERCHANT_ID,'*');

		## NOT SUPPORTED:
		## $cart->save_property('cgi.country',$info->{'Ship-Country'});
		$cart->save_property('cgi.zip',$info->{'Ship-Zip'});
		$cart->save_property('data.order_subtotal',$info->{'Taxable-Total'});

		my $stuff = $cart->{'stuff'};
		$stuff->contents_to_stuff($MERCHANT_ID,\%CONTENTS);
		foreach my $stid ($stuff->stids()) {
			my $product = $stid;
			if (index($product,'*')>=0) { $product = substr($product,index($product,'*')+1); }
			if (index($product,':')>=0) { $product = substr($product,0,index($product,':')); }
			if (index($product,'/')>=0) { $product = substr($product,0,index($product,'/')); }
		
			if (defined $PRODINFO->{$product}) {
				$stuff->update_item($stid,{'%attribs'=>$PRODINFO->{$product}});
				}
			}

		$cart->shipping();
		$value = $cart->fetch_property('ship.selected_price');
		$stateamt = $cart->fetch_property('data.tax_total');
		
		print "Shipping-Charge: $value\n";
		print "Tax-Charge: $stateamt\n";
		}

open F, ">/tmp/yahoo.shipping";
print F Dumper($ENV{'REQUEST_URI'})."\n\n";
print F Dumper($info)."\n\n";
print F Dumper(\%CONTENTS)."\n\n";
print F Dumper($methodref)."\n\n";
print F "VALUE: $value\n";
close F;

}

