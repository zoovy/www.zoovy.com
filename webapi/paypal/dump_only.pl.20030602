#!/usr/bin/perl -w

use strict;
use CGI;

use lib '/httpd/modules';
use DBINFO;
use ZOOVY;
use ZPAY::PAYPAL;
use ZTOOLKIT;

&ZOOVY::init();
&DBINFO::init();

## Set up $env, $cgi and $params hashes
my $env    = \%ENV;
my $cgi    = new CGI;
my $params = { map { $_ => ($cgi->param($_))[0] } $cgi->param() }; ## Create a hash of cgi params with scalar (not array ref) values

foreach (1) ## Just put it in a loop so the "next" function breaks out of the block.
{
	############################################################
	## Begin shared code with /httpd/scripts/paypal/ipn_import.pl (test script from old notify.cgi)
	## If the CGI call isn't a post from the paypal server, bail
	my $method  = defined($env->{'REQUEST_METHOD'}) ? $env->{'REQUEST_METHOD'} : '' ;
	my $address = defined($env->{'REMOTE_ADDR'})    ? $env->{'REMOTE_ADDR'}    : '' ;
	if (($method ne 'POST') || ($address ne '65.206.229.140'))
	{
		&invalid_entry($env,$cgi,$params);
		next;
	}
	## Get the username, first from the URL path, then from the custom variable,
	## then from the custom variable parsed as a set of key-value pairs
	my $username;
	if (defined($env->{'PATH_INFO'}) && ($env->{'PATH_INFO'} =~ m/^\/([a-zA-Z0-9]+)$/))
	{
		## Got it from the URL path
		$username = $1;
	}
	elsif ((defined $params->{'custom'}) && ($params->{'custom'} =~ m/[a-zA-Z0-9\-]+/))
	{
		## Got it from the whole username in the custom parameter
		$username = $params->{'custom'};
	}
	elsif ((defined $params->{'custom'}) && ($params->{'custom'} =~ m/\//))
	{
		## Got it from the key-value pairs encoded into the paypal custom variable
		my $custom = {};
		foreach my $keyval (split /\//, $params->{'custom'})
		{
			my ($key,$val) = split /\:/, $keyval, 2;
			if (not defined $key) { $key = ''; }
			if (not defined $val) { $val = ''; }
			$custom->{$key} = $val;
		}
		$username = $custom->{'username'};
	}
	my $mid   = &ZOOVY::resolve_mid($username);
	my $webdb = &ZWEBSITE::fetch_website_dbref($username);
	unless (defined($username) && $username && defined($mid) && $mid && defined($webdb) && (scalar keys %{$webdb}))
	{
		&no_username($env,$cgi,$params);
		next;
	}
	## Then dump the entry into the database
	my $dbh = &DBINFO::db_zoovy_connect();
	$username = $dbh->quote($username);
	my $item_number = $dbh->quote(defined($params->{'item_number'})?$params->{'item_number'}:'');
	my $invoice     = $dbh->quote(defined($params->{'invoice'})?$params->{'invoice'}:'');
	my $paypal_id   = $dbh->quote(defined($params->{'txn_id'})?$params->{'txn_id'}:'');
	my $content     = $dbh->quote(&ZTOOLKIT::hashref_to_xmlish($params,'sort'=>1));
	my $pstmt = "insert into PAYPAL_QUEUE (PAYPAL_ID,USERNAME,MID,CREATED,ITEM_NUMBER,INVOICE,DATA) values ($paypal_id,$username,$mid,now(),$item_number,$invoice,$content)";
	my $rv = $dbh->do($pstmt);
	&DBINFO::db_zoovy_close();
	unless (defined($rv))
	{
		&database_error($env,$cgi,$params);
		next;
	}
	## End shared code with /httpd/scripts/paypal/ipn_import.pl (test script from old notify.cgi)
	############################################################
}

## Tell PayPal everything's OK (even if we're lying)
print "Pragma: no-cache\n";           # HTTP 1.0 non-caching specification
print "Cache-Control: no-cache\n";    # HTTP 1.1 non-caching specification
print "Expires: 0\n";                 # HTTP 1.0 way of saying "expire now"
print "Content-type: text/plain\n\n";
print "OK\n";
exit;

sub invalid_entry
{
	print "Pragma: no-cache\n";             # HTTP 1.0 non-caching specification
	print "Cache-Control: no-cache\n";      # HTTP 1.1 non-caching specification
	print "Expires: 0\n";                   # HTTP 1.0 way of saying "expire now"
	print "Content-type: text/html\n\n";
	print "<html>\n";
	print "	<head>\n";
	print "		<title>Internal Use Only</title>\n";
	print "	</head>\n";
	print "	<body>\n";
	print "		<h1>Internal Use Only</h1>\n";
	print "		This URL is for internal use with PayPal's online payment system.  To use PayPal\n";
	print "		with your Zoovy account, paste this URL into the Instant Payment Notification (IPN)\n";
	print "		section of your PayPal preferences at\n";
	print "		<a target=\"_new\" href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_profile-ipn-notify\">https://www.paypal.com/cgi-bin/webscr?cmd=_profile-ipn-notify</a>\n";
	print "		(log in to your PayPal account before clicking the link).\n";
	print "	</body>\n";
	print "</html>\n";
	print STDERR "ipn.pl: called from incorrect address or without POST\n";
	exit;
}

sub database_error
{
	## die means that the server will return a 500 which will cause paypal to try again later.
	die "ipn.pl: Could not insert into PAYPAL_QUEUE\n";
}

sub no_username
{
	my ($env,$cgi,$params) = @_;
	print STDERR "ipn.pl: Could not find merchant login:\n";
	print STDERR &ZTOOKIT::prepend_text('ipn.pl',Data::Dumper->Dump([$params],['$params']));
	print STDERR &ZTOOKIT::prepend_text('ipn.pl',Data::Dumper->Dump([$env],['$env']));
}

