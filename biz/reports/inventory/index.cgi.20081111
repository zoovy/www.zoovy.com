#!/usr/bin/perl

use lib "/httpd/modules";
use GTOOLS;
use CGI;
require ZOOVY;
require INVENTORY;
require POGS;
use strict;
use URI::Escape;

&ZOOVY::init();
my $dbh = &DBINFO::db_zoovy_connect();
my ($USERNAME,$FLAGS) = &ZOOVY::authenticate('/biz',1);
if (!$USERNAME) { exit; }


my @BC = ();
push @BC, { name=>'Reports',link=>'https://www.zoovy.com/biz/reports','target'=>'_top', };
push @BC, { name=>'Inventory',link=>'https://www.zoovy.com/biz/utilities/inventory','target'=>'_top', };

# push @BC, { name=>'',link=>'','target'=>'_top', },


my $template_file = 'main.shtml';

my $q = new CGI;
my $ACTION = $q->param('ACTION');
my $SHOW_PRICE = int($q->param('PRICE'));

$SHOW_PRICE++;
#my $USERNAME = 'greatlookz';
#my $FLAGS = '';
#$ACTION = 'DISPLAY';

$GTOOLS::TAG{'<!-- USERNAME -->'} = $USERNAME;


if ($ACTION eq 'MISSING') {

	push @BC, { name=>'Show Unconfigured',link=>'','target'=>'_top', };

	my ($onhandref,$reserveref) = &INVENTORY::load_records($USERNAME,undef);
	my @ar = &ZOOVY::fetchproduct_list_by_merchant($USERNAME);
	my @missing = ();
	use Data::Dumper;

#	open F, ">/tmp/inv"; print F Dumper($onhandref)."\n"; close F;
	foreach my $prod (@ar) {
		my $found = 0;
		if (defined $onhandref->{$prod}) { 
			$found = 1; 
			delete $onhandref->{$prod};
			}

		# search for this product with options
		if (not $found) {
			foreach my $k (keys %{$onhandref}) {
				if ($k =~ /^$prod\:/) {
					$found = 1; 
					delete $onhandref->{$k};
					}
				elsif ($k =~ /^$prod\-/) { 
					$found = 1; 
					delete $onhandref->{$k};
					}
				}
			}
		
		if (not $found) { 
			push @missing, $prod; 
			}
		}


#	open F, ">>/tmp/inv"; print F Dumper($onhandref)."\n"; close F;
	my $c = '';
	foreach my $prod (@missing) {
		my $url = URI::Escape::uri_escape("/biz/product/modify_product.cgi?product=$prod");
		$c .= "<tr><td></td><td><a target=\"_product\" href=\"/biz/product/index.pl?goto=$url\">$prod</a></td><td>?</td><td>$reserveref->{$prod}</td><td>_</td></tr>\n";
		}
	if ($c eq '') { $c .= "<tr><td colspan='4'><i>All products currently have inventory enabled.</i></td></tr>"; }

	$GTOOLS::TAG{'<!-- LIST -->'} = $c;
	$template_file = 'dump.shtml';
	}

if ($ACTION eq 'UPDATERESERVE') {
	push @BC, { name=>'Update Reserve',link=>'','target'=>'_top', };
	my ($onhandref,$reserveref) = &INVENTORY::load_records($USERNAME,undef);
	foreach my $prod (keys %{$onhandref}) {
		&INVENTORY::update_reserve($USERNAME,$prod);
	   }

	$ACTION = '';
	$GTOOLS::TAG{'<!-- MSG -->'} = "<b><br><font color='red'>Reserved Inventory has been updated.</b></font><br>";
	}

if (($ACTION =~ /EXPORTCSV/) && ($FLAGS !~ /,CSV,/)) {
	&GTOOLS::output(file=>'denied.shtml',header=>1);
	&DBINFO::db_zoovy_close();
	exit;
	}
elsif ($ACTION =~ /EXPORTCSV/) {
	print "Content-type: text/csv\n\n";

	print "%SKU,%INVENTORY,%MIN_QTY,%LOCATION,!RESERVED,!DESCRIPTION\n";

	my %prodnames = &ZOOVY::fetchproducts_by_name($USERNAME);
	my ($invref,$reserveref,$locref,$reorderref) = &INVENTORY::fetch_qty($USERNAME,undef);
	
	use Data::Dumper;
        print STDERR "REORDER: ".Dumper($reorderref);

	my $c = '';
	my @col = ();
	my $k = '';
	foreach my $sku (keys %{$invref}) {
		$col[0] = $sku;
		$col[1] = $invref->{$sku};
		$col[2] = $reorderref->{$sku};
		$col[3] = $locref->{$sku};
		$col[4] = $reserveref->{$sku};

		## Handle for IN STOCK, OUT OF STOCK, ALL
		if ($ACTION eq 'EXPORTCSV_OUT' && $invref->{$sku} > 0) { next; }
		elsif ($ACTION eq 'EXPORTCSV_IN' && $invref->{$sku} <= 0) { next; }

		my $itemref = &ZOOVY::fetchproduct_as_hash($USERNAME,$sku);

		if ($sku =~ /\:(.*?)$/) {
			&POGS::apply_options($USERNAME,$sku,$itemref);
			$itemref->{'zoovy:prod_name'} =~ s/\n/ /g;
			}
		$col[4] = $itemref->{'zoovy:prod_name'};

		$c = '';
		foreach $k (@col) { 
			$k =~ s/"/""/gs;
			$k =~ s/[\n\r]+//gs;
			$c .= '"'.$k.'",'; 
			}
		chop($c);
		print "$c\n";
		}

	&DBINFO::db_zoovy_close();
	exit;
	}


if ($ACTION eq 'UPDATE') {
	push @BC, { name=>'[Updated]',link=>'','target'=>'_top', };

	foreach my $k ($q->param())
		{
		if (substr($k,0,1) eq '_') 
			{
			$k = substr("$k",1);
			print STDERR "nuking $k\n"; 
			&INVENTORY::nuke_record($USERNAME,"$k","$k");
			}
		}
	$ACTION = 'DISPLAY';
	}


if ($ACTION eq 'DISPLAY') {
	$template_file = 'dump.shtml';
	my ($invref,$reserveref,$locref) = &INVENTORY::fetch_qty($USERNAME,undef);


	my $c = '';
	my $price = 0;
	my $counter = 0;
	my $bgcolor = '';
	if ($SHOW_PRICE==1) {
		push @BC, { name=>'Show',link=>'','target'=>'_top', };

		$GTOOLS::TAG{'<!-- PRICING -->'} = '<td>Item Cost</td><td>Price</td><td>Extended</td><td>Supplier</td>';
		$price = 1;
		}
	else {
		push @BC, { name=>'Show w/Price',link=>'','target'=>'_top', };
		}

	my $skucount = (scalar keys %{$invref});
	if ($skucount>10000) { $price=0; }

	my $AMOUNT = 0;
	my %PRODUCTS = ();
	foreach my $sku (sort keys %{$invref}) {
		if ($counter++ % 2 ==0) { $bgcolor = 'CCCCCC' } else { $bgcolor = "FFFFFF"; }
		print STDERR "SKU: $sku\n";

		my $PID = $sku;
		if ($PID =~ /^(.*?)\:/) { $PID = $1; }

		my $prodref = {};
#		if ($sku eq $PID) {
#			}

		if ($skucount>25000) {
			## no data for you, too many sku's!
			$prodref = undef;
			$GTOOLS::TAG{'<!-- MESSAGE -->'} = "<font color='red'>25,000 sku max exceeded, will not show product data.</font>";
			}
		elsif (defined $PRODUCTS{$PID}) {
			$prodref = $PRODUCTS{$PID};
			}
		else {
			print STDERR "GRABBING: $PID\n";
			($prodref) = &ZOOVY::fetchproduct_as_hashref($USERNAME,$PID);	
			$PRODUCTS{$PID} = $prodref;
			}


		$c .= qq~
<tr bgcolor='$bgcolor'>
<td><input type='checkbox' name='_$sku'></td>
<td>$sku</td><td>$invref->{$sku}</td><td>$reserveref->{$sku}</td><td>$locref->{$sku}</td>
~;


		if ((not defined $prodref)) {
			$c .= "<td>&nbsp;</td>";
			}
		elsif ($sku =~ /\:(.*?)$/) {
			&POGS::apply_options($USERNAME,$sku,$prodref);
			$c .= "<td>".$prodref->{'zoovy:prod_name'}."</td>";
			}
		else {
			$c .= "<td>".$prodref->{'zoovy:prod_name'}."</td>";
			}

		if ($SHOW_PRICE) {
			my $x = &ZSKU::calc_modifiedprice_by_sku($USERNAME,$PID,$prodref);
			$c .= "<td>\$".sprintf("%.2f",$prodref->{'zoovy:base_cost'})."</td>";
			$c .= "<td>\$".sprintf("%.2f",$x)."</td>";
			if (index($invref->{$sku},'#')<0) {
				$x = ($invref->{$sku}*$x);
				$c .= "<td>\$".sprintf("%.2f",$x)."</td>";
				$AMOUNT += $x;
				} else {
				$c .= "<td>N/A</td>";
				}

			$c .= "<td>$prodref->{'zoovy:prod_supplier'}</td>";
			}
		$c .= "</tr>\n";
		}

	if ($price) {
		$c .= "<tr bgcolor='330066'><td colspan='6' align='right'><font color='white'><b>Total Value: \$".sprintf("%.2f",$AMOUNT)."</b></td></tr>";
		}
	$GTOOLS::TAG{"<!-- LIST -->"} = $c;
	}




&GTOOLS::output(
   'title'=>'Inventory Management',
   'file'=>$template_file,
   'header'=>'1',
   'help'=>'#50332',
	'tabs'=>[
		{ name=>'Show', link=>'index.cgi?ACTION=DISPLAY', },
		{ name=>'Show w/Price', link=>'index.cgi?ACTION=DISPLAY&PRICE=1', },
		{ name=>'Show Unconfigured', link=>'index.cgi?ACTION=MISSING', },
		{ name=>'Update Reserve', link=>'index.cgi?ACTION=UPDATERESERVE', },

		],
   'bc'=>\@BC,
   );



&DBINFO::db_zoovy_close();
