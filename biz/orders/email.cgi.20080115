#!/usr/bin/perl

use lib "/httpd/modules";
require GTOOLS;
require ORDER;
require TOXML::EMAIL;
# require ORDER::EMAIL;
# require AUTOEMAIL;
require ZOOVY;
require ZTOOLKIT;
use CGI;
use Data::Dumper;
use strict;



my ($USERNAME,$FLAGS,$MID,$LUSER,$RESELLER) = ZOOVY::authenticate("/biz/setup",2,'_O&2');
if ($USERNAME eq '') { exit; }
if (!$USERNAME) { exit; }
my $q = new CGI;
my $CMD = uc($q->param('CMD'));
if (!defined($CMD)) { $CMD = ''; }

my $ORDERS = $q->param('ORDERS');
$GTOOLS::TAG{'<!-- ORDERS -->'} = $ORDERS;

my $message = $q->param('message');
$GTOOLS::TAG{'<!-- message -->'} = $message;

my $AREA = uc($q->param('AREA'));
$GTOOLS::TAG{'<!-- AREA -->'} = $AREA;

my $SORTBY = lc($q->param('SORTBY'));
$GTOOLS::TAG{'<!-- SORTBY -->'} = $SORTBY;


if ($CMD eq '') {
	print "Content-type: text/html\n\n";
	print "<body>Javascript command failure, please retry. If this message persists please contact technical support.</body>\n";
	} 
elsif ($CMD eq 'SENDNOW') {

	#my $msgref = &AUTOEMAIL::safefetch_message($USERNAME,$message);
	#if (defined($q->param('TITLE')))
	#	{
	#	print STDERR "Override title!\n";
	#	$msgref->{'zoovy:title'} = $q->param('TITLE');
	#	$msgref->{'zoovy:body'} = $q->param('CONTENTS');
	#	}
	#use Data::Dumper;
	#print STDERR Dumper($q)."\n";

	$|++;
	print "Content-type: text/html\n\n";

print "<head><STYLE>\n<!--\nTD { font-face: arial; font-size: 10pt; }\n-->\n</STYLE>\n</head>\n";
print "<body><center>";

my @ar = ();
foreach my $oid (split(/,/,$ORDERS)) {
	next if ($oid eq '');
	push @ar, $oid;
	}

print "<h1>Sending email for ".scalar(@ar)." orders.</h1>";
print "<table width='60%'><tr><Td><center>When complete, use the buttons along the top to return.</center><br><b>Email Results:</b></td></tr></table>\n";
# print "$message ($ORDERS)\n";
foreach my $order (sort @ar) { 
#	print STDERR "Handling Order: $order\n";

	next if ($order eq '');
	
	my ($o,$error) = ORDER->new($USERNAME,$order);
	if ($error) { print "<div><table width='60%'><tr><Td><font color='red'>ERROR: $error</font></td></tr></table></div>\n"; }
	next if (not defined $o);
	next if ($error ne '');

	my $email = $o->get_attrib('bill_email');
	if (&ZTOOLKIT::validate_email($email)) {
#		print STDERR "Sending $USERNAME $message\n";
		my ($warnings) = &TOXML::EMAIL::sendmail($USERNAME,$message,$email,ORDER=>$o);
		# &ORDER::EMAIL::customer_email($USERNAME,$order,$message,$msgref,0,$o);
		print "<div><table width='60%'><tr><Td>Emailing $email for $order</td></tr>";
		if (defined $warnings && $warnings ne '') {
			print '<tr><td>'.Dumper($warnings).'</td></tr>';
			}
		print "</table></div>\n";
		} 
	else {
		print "<div><table width='60%'><font color='red'>ERROR:</font> Email for order $order not valid. ($email)</td></tr></table></div>\n";
		}
	}
	print "<h1>Finished.</h1>\n";
	print "<a target='body' href='move.cgi?AREA=$AREA&SORTBY=$SORTBY'>Click here to Exit</a></center></body>";


	} 
elsif ($CMD eq 'REVIEW') {

#	my $msgref = &AUTOEMAIL::safefetch_message($USERNAME,$message);
#	my @ar = split(/,/,$ORDERS);
#	if (scalar(@ar)==1) {
#		my ($o,$error) = ORDER->new($USERNAME,$ar[0]);
#		next if (not defined $o);
#		next if ($error ne '');
#
#		my ($tagref) = &ORDER::EMAIL::customer_email($USERNAME,$ar[0],$message,undef,1,$o);
#
#		use Data::Dumper;
#		print STDERR Dumper($tagref);
#
#		$GTOOLS::TAG{'<!-- TITLE -->'} = &ZOOVY::incode(${&AUTOEMAIL::interpolate(\$msgref->{'zoovy:title'},$tagref)});
#		$GTOOLS::TAG{'<!-- CONTENTS -->'} = &ZOOVY::incode(${&AUTOEMAIL::interpolate(\$msgref->{'zoovy:body'},$tagref)});
#		} else {
#		$GTOOLS::TAG{'<!-- TITLE -->'} = &ZOOVY::incode($msgref->{'zoovy:title'});
#		$GTOOLS::TAG{'<!-- CONTENTS -->'} = &ZOOVY::incode($msgref->{'zoovy:body'});
#		}
#	
#	my $c = '';
#	foreach my $o (@ar) { $c .= "<input type='hidden' name='order-$o' value='on'>\n"; }
#	$GTOOLS::TAG{'<!-- ORDERIDS_DEFINED -->'} = $c;

#	&GTOOLS::print_form('','email-review.shtml',1);
	}
