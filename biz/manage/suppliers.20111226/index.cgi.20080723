#!/usr/bin/perl

use lib "/httpd/modules";
use GTOOLS;
use ZOOVY;
use SUPPLIER;
use SUPPLIER::STOCK;
use INVENTORY;
use ZTOOLKIT;
use ORDER;
use LUSER;
use PRODUCT::BATCH;
use Data::Dumper;
use strict;

my $dbh = &DBINFO::db_zoovy_connect();


my $q = new CGI; 

my @BC = ();
push @BC, { 'name'=>'Utilities', 'link'=>'/biz/utilities', 'target'=>'_top'};
push @BC, { 'name'=>'Supply Chain', link=>'/biz/utilities/suppliers', 'target'=>'_top'};
my $title = "Utilities: Supply Chain Management";

#my $params = &ZTOOLKIT::buildparams($ZOOVY::cgiv);
require LUSER;
my ($LU) = LUSER->authenticate(flags=>'_ADMIN');
if (not defined $LU) { exit; }

my ($MID,$USERNAME,$LUSERNAME,$FLAGS,$PRT) = $LU->authinfo();
if ($MID<=0) { exit; }



my $template_file = 'index.shtml';
if ($FLAGS !~ /,SC,/) {
	my ($helplink, $helphtml) = GTOOLS::help_link('Supply Chain Webdoc', 50694);
	$GTOOLS::TAG{'<!-- WEBDOC -->'} = $helphtml;  
	$template_file = 'deny.shtml'; 
	}

my $qtUSERNAME = $dbh->quote($USERNAME);
## NOTE: 
##		ACTION=USETHEFORCE 
##
my $ACTION = $ZOOVY::cgiv->{'ACTION'};
my $CODE = uc($ZOOVY::cgiv->{'CODE'});
my $qtCODE = $dbh->quote($CODE);
my $DEBUG = $ZOOVY::cgiv->{'DEBUG'};
my $info = undef;



print STDERR "SUPPLIER: ACTION: $ACTION CODE: $CODE\n";

$GTOOLS::TAG{'<!-- CODE -->'} = $CODE;
$GTOOLS::TAG{'<!-- DEBUG -->'} = $DEBUG;

my @TABS = ();
if ($CODE ne '') {
	push @TABS, { 'name'=>"$CODE Setup", link=>"?ACTION=EDIT&CODE=$CODE" };
	push @TABS, { 'name'=>"$CODE Products", link=>"?ACTION=PRODUCTS&CODE=$CODE" };
	push @TABS, { 'name'=>"$CODE Orders", link=>"?ACTION=ORDERS&CODE=$CODE" };

#	push @TABS, { 'name'=>'Inventory', link=>"?ACTION=INVENTORY&CODE=$CODE" };
	}
else {
	push @TABS, { 'name'=>"Non-Confirmed Orders", link=>"?ACTION=NON_CONF_ORDERS" };	
	}
	
##
##
##	
if ($ACTION eq 'JEDI-SAVE') {
	my $ERROR = '';	

	require WHOLESALE;
	if ($ZOOVY::cgiv->{'COMPANY_NAME'} eq '') {
      $ERROR .= "Please supply a Company Name.<br>";
      }
	if (&ZTOOLKIT::validate_email($ZOOVY::cgiv->{'COMPANY_EMAIL'}) == 0) {
		$ERROR .= "Please supply a valid Company email address.<br>";
		}
	if (&ZTOOLKIT::validate_phone($ZOOVY::cgiv->{'COMPANY_PHONE'}) == 0) {
		$ERROR .= "Please supply a valid Company phone.<br>";
		}
	if ($ZOOVY::cgiv->{'MARKUP'} eq '' || &WHOLESALE::validate_formula($ZOOVY::cgiv->{'MARKUP'}) == 0) {
		$ERROR .= "Please supply a valid Default Markup.<br>";
		}

	if ($ERROR ne '') {
		$GTOOLS::TAG{'<!-- MESSAGE -->'} = "<font color=red>$ERROR</font>";
		}
	else {
		my ($S) = SUPPLIER->new($USERNAME, $CODE);
	
		$S->save_property('MARKUP', $ZOOVY::cgiv->{'MARKUP'});
		$S->save_property('PROFILE', $ZOOVY::cgiv->{'PROFILE'});
		$S->save_property('COMPANY_NAME',$ZOOVY::cgiv->{'COMPANY_NAME'});
		$S->save_property('COMPANY_PHONE',$ZOOVY::cgiv->{'COMPANY_PHONE'});
		$S->save_property('COMPANY_EMAIL',$ZOOVY::cgiv->{'COMPANY_EMAIL'});

		$S->save();
		$GTOOLS::TAG{'<!-- MESSAGE -->'} = "<font color='blue'>Successfully edited Company Information for $CODE</font><br><br>";
		}

   $ACTION = 'EDIT';

	}

if ($ACTION eq 'NEW-SAVE') {
	my $ERROR = '';

	if ($ERROR eq '') {
		my $path = &ZOOVY::resolve_userpath($USERNAME);
		print STDERR "in NEW-SAVE path: $path\n";
		mkdir($path.'/SC',0777);

		if (!-d $path.'/SC') {
			$ERROR = 'Could not create directory for supply chain orders.';
			}
		}
	
	require WHOLESALE;

	my $qtCODE = $dbh->quote($CODE);
	my $qtCNAME = $dbh->quote($ZOOVY::cgiv->{'name'});
	my $qtCPHONE = $dbh->quote($ZOOVY::cgiv->{'phone'});
	my $qtCEMAIL = $dbh->quote($ZOOVY::cgiv->{'email'});
	my $qtMARKUP = $dbh->quote($ZOOVY::cgiv->{'MARKUP'});
	my $qtPROFILE = $dbh->quote($ZOOVY::cgiv->{'PROFILE'});

	my $MODE = uc($ZOOVY::cgiv->{'mode'});
	my $FORMAT = uc($ZOOVY::cgiv->{'FORMAT'});
	my $qtMODE = $dbh->quote($MODE);
	my $qtFORMAT = $dbh->quote($FORMAT);

	if (($ERROR eq '') && ($CODE eq '')) {
		$ERROR = "Supplier Code cannot be blank";
		$GTOOLS::TAG{'<!-- SUPPLIER_ERROR -->'} = &GTOOLS::errmsg($ERROR);
		}

	if (($ERROR eq '') && (SUPPLIER::exists($USERNAME,$CODE))) {
		$ERROR = "Supplier Code [$CODE] already exists";
		$GTOOLS::TAG{'<!-- SUPPLIER_ERROR -->'} = &GTOOLS::errmsg($ERROR);
		}
	if (($ERROR eq '') && ($CODE !~ /^([0-9A-Z]+)$/)) {
		$ERROR = "Supplier Code is invalid.";
		$GTOOLS::TAG{'<!-- SUPPLIER_ERROR -->'} = &GTOOLS::errmsg($ERROR);
		}

	if (($ERROR eq '') && (not &WHOLESALE::validate_formula($ZOOVY::cgiv->{'MARKUP'}))) {
		$ERROR = "Markup formula does not appear to be valid.";
		$GTOOLS::TAG{'<!-- MARKUP_ERROR -->'} = &GTOOLS::errmsg($ERROR);
		}
	
	if (($ERROR eq '') && ($FORMAT eq '')) {
		$ERROR = "Supplier Order Format does not appear to be set, please make a selection.";
		$GTOOLS::TAG{'<!-- FORMAT_ERROR -->'} = &GTOOLS::errmsg($ERROR);
		}

	if (($ERROR eq '') && ($MODE eq '')) {
		$ERROR = "Supplier Data Integration Type does not appear to be set, please make a selection.";
		$GTOOLS::TAG{'<!-- FORMAT_ERROR -->'} = &GTOOLS::errmsg($ERROR);
		}

	if (($ERROR eq '') && ($MODE eq 'API')) {
		if (($FLAGS =~ /,API,/) || ($FLAGS =~ /,API2,/)) {
			}
		else {	
			$ERROR = qq~<br>
You do not appear to have the API flag on your account.<br>
<a href="/biz/configurator?VERB=VIEW&BUNDLE=API">Add this Functionality</a><br>
~;
			$GTOOLS::TAG{'<!-- API_ERROR -->'} = &GTOOLS::errmsg($ERROR);
			}
		}

	if (($ERROR eq '') && ($MODE eq 'JEDI')) {
		require SUPPLIER::JEDI;
		($ERROR) = SUPPLIER::JEDI::setup($USERNAME,$ZOOVY::cgiv->{'jedi_user'},$ZOOVY::cgiv->{'jedi_mid'},$ZOOVY::cgiv->{'jedi_email'});

		if ($ERROR ne '') { 
			print STDERR "ERROR, can't add SUPPLIER: $ERROR\n"; 
			$GTOOLS::TAG{'<!-- JEDI_ERROR -->'} = &GTOOLS::errmsg($ERROR); 
			}
		else{
			## ADD A JEDI SUPPLIER
			my $qtCODE = $dbh->quote($CODE);

			my $qtJMID = $dbh->quote($ZOOVY::cgiv->{'jedi_mid'});
			my $qtJUSER = $dbh->quote($ZOOVY::cgiv->{'jedi_user'});
			my $qtJEMAIL = $dbh->quote($ZOOVY::cgiv->{'jedi_email'});
		
			my $SRCUSER = $ZOOVY::cgiv->{'jedi_user'};
			my $qtCNAME = $dbh->quote(&ZOOVY::fetchmerchant_attrib($SRCUSER,'zoovy:company_name',''));
			my $qtCPHONE = $dbh->quote(&ZOOVY::fetchmerchant_attrib($SRCUSER,'zoovy:company_phone',''));
			my $qtCEMAIL = $dbh->quote(&ZOOVY::fetchmerchant_attrib($SRCUSER,'zoovy:company_email',''));
	
			my $pstmt = "insert into SUPPLIERS (MID,USERNAME,CODE,MARKUP,PROFILE,COMPANY_NAME,COMPANY_PHONE,COMPANY_EMAIL,MODE,FORMAT) values ";
			$pstmt .= "($MID,$qtUSERNAME,$qtCODE,$qtMARKUP,$qtPROFILE,$qtCNAME,$qtCPHONE,$qtCEMAIL,$qtMODE,$qtFORMAT)";
			$dbh->do($pstmt);

			$pstmt = "update SUPPLIERS set JEDI_MID=$qtJMID,JEDI_USERNAME=$qtJUSER,JEDI_CUSTOMER=$qtJEMAIL where MID=$MID and CODE=$qtCODE"; 
			$dbh->do($pstmt);

			## VERIFY THAT THE JEDI_MID IS SET IN THE CUSTOMER RECORD
			($ERROR) = SUPPLIER::JEDI::setup($USERNAME,$ZOOVY::cgiv->{'jedi_user'},$ZOOVY::cgiv->{'jedi_mid'},$ZOOVY::cgiv->{'jedi_email'});
			if ((defined $ERROR) && ($ERROR ne '')) {
				## delete the supplier (since JEDI is not configured!)
				$pstmt = "delete from SUPPLIERS where MID=$MID and CODE=$qtCODE";
				$dbh->do($pstmt);
				}
			}
		}
	elsif(($ERROR eq '') && (
		($MODE eq 'GENERIC') || 
		($MODE eq 'API') || ($MODE eq 'ATLAST') || ($MODE eq 'SHIPWIRE') ||
		($MODE eq 'QB') || ($MODE eq 'AMZ') || ($MODE eq 'DOBA')
		)) {
		## ADD A NON-JEDI SUPPLIER | API OR GENERIC
		print STDERR "adding GENERIC|API supplier\n";

		## VALIDATION
		if ($ZOOVY::cgiv->{'name'} eq '') {
			$ERROR = "Company Name is required.";
			$GTOOLS::TAG{'<!-- COMPANY_NAME_ERROR -->'} = &GTOOLS::errmsg($ERROR);
			}
		if (($ERROR eq '') && ($ZOOVY::cgiv->{'account'} eq '')) {
			$ERROR = "Company Account is required.";
			$GTOOLS::TAG{'<!-- COMPANY_ACCOUNT_ERROR -->'} = &GTOOLS::errmsg($ERROR);
			}
		if (($ERROR eq '') && (&ZTOOLKIT::validate_phone($ZOOVY::cgiv->{'phone'}) == 0)) {
			$ERROR = "Company Phone is invalid.";
			$GTOOLS::TAG{'<!-- COMPANY_PHONE_ERROR -->'} = &GTOOLS::errmsg($ERROR);
			}
		if (($ERROR eq '') && (&ZTOOLKIT::validate_email($ZOOVY::cgiv->{'email'}) == 0)) {
			$ERROR = "Company Email is invalid.";
			$GTOOLS::TAG{'<!-- COMPANY_EMAIL_ERROR -->'} = &GTOOLS::errmsg($ERROR);
			}

		print STDERR "ERROR: $ERROR\n";
		if($ERROR eq ''){
			my $qtMODE = $dbh->quote($MODE);
      	my $qtCNAME = $dbh->quote($ZOOVY::cgiv->{'name'});
			my $qtCACCOUNT = $dbh->quote($ZOOVY::cgiv->{'account'});
      	my $qtCPHONE = $dbh->quote($ZOOVY::cgiv->{'phone'});
      	my $qtCEMAIL = $dbh->quote($ZOOVY::cgiv->{'email'});
      	my $qtWEB = $dbh->quote($ZOOVY::cgiv->{'website'});
	
			my $pstmt = "insert into SUPPLIERS (MID,USERNAME,CODE,MARKUP,PROFILE,COMPANY_NAME,COMPANY_ACCOUNT,COMPANY_PHONE,COMPANY_EMAIL,COMPANY_WEBSITE,MODE,FORMAT) values ";
      	$pstmt .= "($MID,$qtUSERNAME,$qtCODE,$qtMARKUP,$qtPROFILE,$qtCNAME,$qtCACCOUNT,$qtCPHONE,$qtCEMAIL,$qtWEB,$qtMODE,$qtFORMAT)";
      	print STDERR $pstmt."\n";
      	$dbh->do($pstmt);
			}
		}

	if ($ERROR ne '') {	
		$GTOOLS::TAG{'<!-- MESSAGE -->'} = "<font color='red'>ERROR: $ERROR</font><br>";
		$ACTION = 'NEW';
		}
	else {	
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Your Supplier has been successfully added.</font>";
		$ACTION = 'EDIT';
		}


	}



######
##
## SANITY: at this point any information which is going to be saved, has been saved!
##				so we'll populate $info
##
######
if ($CODE ne '') {
	my $pstmt = "select * from SUPPLIERS where CODE=$qtCODE and MID=$MID";
	print STDERR $pstmt."\n";
	my $sth = $dbh->prepare($pstmt);
	$sth->execute();
	($info) = $sth->fetchrow_hashref();
	$sth->finish();

	#($info) = SUPPLIER->new($USERNAME,$CODE);
	if ($CODE ne '') {
		push @BC, { name=>"$CODE", link=>"/biz/manage/suppliers/index.cgi?ACTION=EDIT&CODE=$CODE", target=>'_top' };
		}
	}


##
## note: SUBSCRIBE is passed from customer_main.pl to a person subscribing to a feed
##		parameters: INDEX, LOAD
##
if ($ACTION eq 'SUBSCRIBE') {
	my $SUPPLIERMID = int($ZOOVY::cgiv->{'MID'});
	
	my $SAFE = '';
	my $PRETTY = '';
	
	my ($S) = SUPPLIER->new($USERNAME,"#$SUPPLIERMID");
	my $CODE = '';
	if (defined $S) {
		
		my $INDEX = $ZOOVY::cgiv->{'INDEX'};
		my $LOAD = $ZOOVY::cgiv->{'LOAD'};
		my $CODE= $S->fetch_property('CODE');
		

		require SUPPLIER::JEDI;
		require NAVCAT;

		my $dbh = &DBINFO::db_zoovy_connect();
		## http://www.zoovy.com/biz/utilities/suppliers/index.cgi?ACTION=SUBSCRIBE&MID=39440&INDEX=http://webapi.zoovy.com/webapi/supplychain/index.cgi/TOPGEARLEATHERS/fire.xml&LOAD=JEDI?SRCMID%3D39440%26SRCUSER%3DTOPGEARLEATHERS%26LOGIN%3Dmichael@sparrowseyeview.com
		#$pstmt = "select SAFE from SUPPLIER_SUBSCRIPTIONS where DSTMID=$MID /* $USERNAME */ and CODE="

		&DBINFO::db_zoovy_close();


		my ($ERROR,$PRODUCTSTR,$INFO) = &SUPPLIER::JEDI::load_subscription($USERNAME,$INDEX,$LOAD);
		$PRETTY = $INFO->{'pretty'};
		
		if ($ERROR eq '') {
			my $dbh = &DBINFO::db_zoovy_connect();

			## determine if subscription already exists
			my $pstmt = "select SRCSAFE,CREATED_GMT from SUPPLIER_SUBSCRIPTIONS ".
							"where CODE=".$dbh->quote($CODE)." and SRCMID=".$dbh->quote($S->fetch_property('JEDI_MID')).
							" and SRCUSER=".$dbh->quote($S->fetch_property('JEDI_USERNAME')).
							" and DSTMID=".$dbh->quote($MID)." and DSTUSER=".$dbh->quote($USERNAME).
							" and PRETTY=".$dbh->quote($PRETTY);
			print STDERR $pstmt."\n";
			my $sth = $dbh->prepare($pstmt);
			$sth->execute();
			my ($current_SAFE,$current_CREATED) = $sth->fetchrow();
			$sth->finish();

			my $CREATED = '';
			## insert
			if ($current_SAFE eq '') {
				$SAFE = $INFO->{'uuid'};
				$SAFE =~ s/[^A-Z0-9a-z\_]//g;    # lets just be safe.
				$SAFE = '$'.$SAFE;
				$CREATED = time();
				}
			## update
			else { 
				$SAFE = $current_SAFE; 
				$CREATED = $current_CREATED;
				}

			&DBINFO::insert($dbh,'SUPPLIER_SUBSCRIPTIONS',{
				'CODE'=>$CODE,
				'SRCMID'=>$S->fetch_property('JEDI_MID'),
				'SRCUSER'=>$S->fetch_property('JEDI_USERNAME'),
				'DSTMID'=>$MID,
				'DSTUSER'=>$USERNAME,
				'SRCSAFE'=>$SAFE,
				'DSTSAFE'=>$SAFE,
				'PRETTY'=>$PRETTY,
				'CREATED_GMT'=>$CREATED,
				'UPDATED_GMT'=>time(),	
				'PRODUCT_COUNT'=>$INFO->{'product_count'},			
				},key=>['CODE','SRCMID','DSTMID','SRCSAFE']
				 ,update=>1);

		#	my $pstmt = "insert into SUPPLIER_SUBSCRIPTIONS (CODE,SRCMID,SRCUSER,DSTMID,DSTUSER,SAFE,PRETTY,CREATED_GMT,UPDATED_GMT) values (";
		#	$pstmt .= $dbh->quote($CODE).",";
		#	$pstmt .= $dbh->quote($S->fetch_property('JEDI_MID')).",".$dbh->quote($S->fetch_property('JEDI_USERNAME')).',';
		#	$pstmt .= $dbh->quote($MID).','.$dbh->quote($USERNAME).',';
		#	$pstmt .= $dbh->quote($SAFE).','.$dbh->quote($PRETTY).',';
		#	$pstmt .= $dbh->quote(time()).',0)';
		#	#print STDERR $pstmt."\n";
		#	$dbh->do($pstmt);
			&DBINFO::db_zoovy_close();
			}
	
		if ($ERROR eq '') {
			my %M = ();
			$M{'VIRTUAL'} = 1;
			$M{'INDEX'} = $ZOOVY::cgiv->{'INDEX'};
			$M{'LOAD'} = $ZOOVY::cgiv->{'LOAD'};
			my $meta = &NAVCAT::encode_meta(\%M);
			
			my ($NC) = NAVCAT->new($USERNAME);
			print STDERR "Creating navcat: $SAFE, pretty=>$PRETTY, products=>$PRODUCTSTR\n"; 
			$NC->set( $SAFE, pretty=>$PRETTY, products=>$PRODUCTSTR, metaref=>\%M ); 
			$NC->save();
			undef $NC;
			}

		if ($ERROR eq '') {
			$GTOOLS::TAG{'<!-- MESSAGE -->'} = "<font color='blue'>Successfully added LIST[$PRETTY] from SUPPLIER[$CODE]</font>";
			}
		else {
			$GTOOLS::TAG{'<!-- MESSAGE -->'} = "<font color='red'>ERROR: $ERROR</font>";
			}

		}
	else {
		$GTOOLS::TAG{'<!-- MESSAGE -->'} = "<font color='red'>Supplier no longer defined!</font>";
		}
	$ACTION = '';

	push @BC, { name=>"$CODE", link=>"/biz/manage/suppliers/index.cgi?ACTION=EDIT&CODE=$CODE", target=>'_top' };
	}

##
## note: USETHEFORCE is passed to automatically setup a new JEDI business
##
if (($ACTION eq 'NEW') || ($ACTION eq 'USETHEFORCE')) { 
	$template_file = 'new.shtml';
	
	print STDERR "Adding new supplier\n";
	$GTOOLS::TAG{'<!-- CODE -->'} = ($ZOOVY::cgiv->{'CODE'})?$ZOOVY::cgiv->{'CODE'}:'';
	$GTOOLS::TAG{'<!-- MODE_JEDI -->'} = '';
	$GTOOLS::TAG{'<!-- MODE_GENERIC -->'} = '';
	$GTOOLS::TAG{'<!-- MODE_API -->'} = '';
	$GTOOLS::TAG{'<!-- MODE_ATLAST -->'} = '';
	$GTOOLS::TAG{'<!-- MODE_SHIPWIRE -->'} = '';
	$GTOOLS::TAG{'<!-- MODE_DOBA -->'} = '';
	$GTOOLS::TAG{'<!-- MODE_QB -->'} = '';
	$GTOOLS::TAG{'<!-- MODE_AMZ -->'} = '';

	## http://www.zoovy.com/biz/utilities/suppliers/index.cgi?ACTION=USETHEFORCE&USERNAME=ZSMC&MID=16804&LOGIN=brian@zoovy.com
	## IF ACTION eq USETHEFORCE
	if ($ACTION eq 'USETHEFORCE') {
		$GTOOLS::TAG{'<!-- MODE_JEDI -->'} = 'checked';
		$GTOOLS::TAG{'<!-- JEDI_USER -->'} = ($ZOOVY::cgiv->{'USERNAME'})?$ZOOVY::cgiv->{'USERNAME'}:'';
		$GTOOLS::TAG{'<!-- JEDI_MID -->'} = ($ZOOVY::cgiv->{'MID'})?$ZOOVY::cgiv->{'MID'}:'';
		$GTOOLS::TAG{'<!-- JEDI_EMAIL -->'} = ($ZOOVY::cgiv->{'LOGIN'})?$ZOOVY::cgiv->{'LOGIN'}:'';
		}
	else {
		$GTOOLS::TAG{'<!-- JEDI_USER -->'} = ($ZOOVY::cgiv->{'jedi_user'})?$ZOOVY::cgiv->{'jedi_user'}:'';
		$GTOOLS::TAG{'<!-- JEDI_MID -->'} = ($ZOOVY::cgiv->{'jedi_mid'})?$ZOOVY::cgiv->{'jedi_mid'}:'';
		$GTOOLS::TAG{'<!-- JEDI_EMAIL -->'} = ($ZOOVY::cgiv->{'jedi_email'})?$ZOOVY::cgiv->{'jedi_email'}:'';
		}

	if ($ZOOVY::cgiv->{'mode'}) {
		$GTOOLS::TAG{'<!-- MODE_'.($ZOOVY::cgiv->{'mode'}).' -->'} = 'checked';
		}

	$GTOOLS::TAG{'<!-- NAME -->'} = ($ZOOVY::cgiv->{'name'})?$ZOOVY::cgiv->{'name'}:'';
	$GTOOLS::TAG{'<!-- ACCOUNT -->'} = ($ZOOVY::cgiv->{'account'})?$ZOOVY::cgiv->{'account'}:'';
	$GTOOLS::TAG{'<!-- PHONE -->'} = ($ZOOVY::cgiv->{'phone'})?$ZOOVY::cgiv->{'phone'}:'';
	$GTOOLS::TAG{'<!-- EMAIL -->'} = ($ZOOVY::cgiv->{'email'})?$ZOOVY::cgiv->{'email'}:'';
	$GTOOLS::TAG{'<!-- WEBSITE -->'} = ($ZOOVY::cgiv->{'website'})?$ZOOVY::cgiv->{'website'}:'';	
	
	$GTOOLS::TAG{'<!-- MARKUP -->'} = ($ZOOVY::cgiv->{'MARKUP'})?$ZOOVY::cgiv->{'MARKUP'}:'';

	## PROFILE addition
	my $profileref = &ZOOVY::fetchprofiles($USERNAME);
	foreach my $profile (@{$profileref}) {
		my $selected = '';
		if ($profile eq 'DEFAULT') { $selected = "selected"; }
		$GTOOLS::TAG{'<!-- PROFILE -->'} .= qq~<option $selected value="$profile">$profile</option>~;
		} 
	
	$GTOOLS::TAG{'<!-- FORMAT_NONE -->'} = ($ZOOVY::cgiv->{'FORMAT'} eq 'NONE')?'checked':'';
	$GTOOLS::TAG{'<!-- FORMAT_STOCK -->'} = ($ZOOVY::cgiv->{'FORMAT'} eq 'STOCK')?'checked':'';
	$GTOOLS::TAG{'<!-- FORMAT_FULFILL -->'} = ($ZOOVY::cgiv->{'FORMAT'} eq 'FULFILL')?'checked':'';
	$GTOOLS::TAG{'<!-- FORMAT_DROPSHIP -->'} = ($ZOOVY::cgiv->{'FORMAT'} eq 'DROPSHIP')?'checked':'';

	push @BC, { name=>'Add New Supplier' };
	}


##
## this is what gets run when they click the "Update Now" button
##
if ($ACTION eq 'UPDATE-GENERIC-INVENTORY') {
	require SUPPLIER::GENERIC;
	&SUPPLIER::GENERIC::update_inventory($USERNAME,$LUSERNAME,$CODE);

	
	my ($S) = SUPPLIER->new($USERNAME, $CODE);
	my $count = $S->fetch_property('GEN_INVUPDATE_ROWS');
	my $error = $S->fetch_property('GEN_INVERRORS');
	my $gmt = ZTOOLKIT::pretty_date($S->fetch_property('GEN_INVUPDATE_GMT'),1);
	$GTOOLS::TAG{'<!-- RESULT -->'} = "Inventory updated $gmt<br>";
	if ($count == 0) {
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color='red'>ERRORS: $error</font>";
	}
	else {
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color=\"blue\">Successfully imported $count items.</font>";
		}
	$ACTION = 'GENERIC-INVENTORY';
	}


##
## Saves a CSV import for a GENERIC supplier
##
if ($ACTION eq 'SAVE-IMPORT') {
	my $ERROR = 0;
	my $BUFFER = '';
	my ($fieldref,$lineref,$optionsref);
	
	my $filename = $q->param("GEN_PRODFILE");
	my $url = $q->param("GEN_PRODURL");

	## get contents from client file
	if ($filename ne '') {
	
		my $fh = $q->upload("GEN_PRODFILE");
	
		## excel file
		if ($filename =~ /\.xls$/i) { 
			$ERROR = 1; 	
			$GTOOLS::TAG{'<!-- RESULT -->'} = "Filename has an .xls extension - should be .csv"; 
			}
		## zipped file
		elsif ($filename =~ /\.zip$/i) { 
			while (<$fh>) { $BUFFER .= $_; }
			require Archive::Zip;
			my $zip = Archive::Zip->new();
			open F, ">/tmp/$USERNAME-csv.zip";
			print F $BUFFER;
			close F;
			$zip->read("/tmp/$USERNAME-csv.zip");
			# $zip->readFromFileHandle($fh);
			my @names = $zip->memberNames();
			foreach my $m (@names) {
				next unless (($m =~ /.txt$/i) || ($m =~ /.csv/i));
				$BUFFER = $zip->contents($m);
				}
			}
		## regular file
		else {
			print STDERR "getting content from $filename\n";
			#while (<$fh>) { $BUFFER .= $_; print STDERR "BUFFER: $BUFFER\n";}
			while (<$filename>) { $BUFFER .= $_; }
			}
		
		## no contents
		if (length($BUFFER)<10) { 
			$ERROR = 1; 
			$GTOOLS::TAG{'<!-- RESULT -->'} = "File $filename had no contents.\n"; 
			}

		## find header
		if (not $ERROR) {
			require ZCSV;
			my @header = ();
			my $cols = 10;
			for (my $n=0;$n<$cols;$n++) {
				$header[$n] = $ZOOVY::cgiv->{'GEN_PROD'.$n} if ($ZOOVY::cgiv->{'GEN_PROD'.$n} ne '');
				}
			

			#print STDERR "Header: ".Dumper(@header);
			## find header in file
			if (scalar(@header) == 0) {
				($fieldref,$lineref,$optionsref) = &ZCSV::readHeaders($BUFFER);
				}
			
			## declared in UI
			else {
				require SUPPLIER::GENERIC;
				$fieldref = \@header;
				($fieldref, $lineref, $ERROR) = SUPPLIER::GENERIC::import_prods($USERNAME, $CODE, $fieldref, 'FILE', $BUFFER);
				}
				
			}
		}
	
	## get contents from URL
	## this needs testing
	elsif ($url ne '') {
		require SUPPLIER::GENERIC;
		($fieldref, $lineref, $ERROR) = SUPPLIER::GENERIC::import_prods($USERNAME, $CODE, undef, 'URL', $url);
	
		#print STDERR Dumper($fieldref);
		#print STDERR Dumper($lineref->[0], $lineref->[1]);
		}

	if (not $ERROR) {
		require ZCSV::PRODUCT;
		#require IMPORT;
		#$optionsref->{'MODE'} = $MODE;
		$optionsref->{'SUPPLIER'} = $CODE;
		$optionsref->{'TYPE'} = 'SUPPLIER';
		$IMPORT::SILENT = 1 if (!$DEBUG);

		print STDERR Dumper($fieldref,$lineref,$optionsref);
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<br><pre>Filter ".Dumper($fieldref,$lineref,$optionsref)."</pre>";

		&ZCSV::logImport($USERNAME,$LU,$fieldref,$lineref,$optionsref);
		
		my $lines = ''; my $output = '';
		my ($lines, $output) = &ZCSV::PRODUCT::parseproduct($LU,$fieldref,$lineref,$optionsref);
			
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color='blue'>Successfully imported $lines lines</font><br>";
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<br>$output<br>";
		}
	else {
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<br><font color='red'>$ERROR</font><br>";
		}

	print STDERR "$GTOOLS::TAG{'<!-- RESULT -->'}\n";
	$ACTION = 'IMPORT';
	}

##
##	Displays the generic CSV import screen
##
if ($ACTION eq 'IMPORT') {

	$GTOOLS::TAG{'<!-- GEN_PRODDATA_URL -->'} = '';
	$GTOOLS::TAG{'<!-- GEN_PRODDATA_FILE -->'} = '';
	$GTOOLS::TAG{'<!-- GEN_PRODURL -->'} = '';
   $GTOOLS::TAG{'<!-- GEN_PRODFILE -->'} = '';

	
	for (my $n=0;$n<16;$n++) {
		$GTOOLS::TAG{'<!-- GEN_PROD'.$n.' -->'} = '';
		}

	my ($helplink, $helphtml) = GTOOLS::help_link('Advanced Product Import Guide', 50285);
	$GTOOLS::TAG{'<!-- WEBDOC -->'} = $helphtml;
	
	$template_file = 'generic-import.shtml';
	push @BC, { name=>'Import Products' };
	}

## Disassociate product from SUPPLIER
## (this doesn't remove product from Zoovy Store)
if ($ACTION eq 'DISASSOCIATE') {
	my @prods = ();
	foreach my $var (keys %{$ZOOVY::cgiv}){
		next unless ($var =~ /^SKU_/);
		push @prods, $ZOOVY::cgiv->{$var};
		}

	if (scalar(@prods) > 0) {
		SUPPLIER::disassociate_products($USERNAME, $ZOOVY::cgiv->{'CODE'}, \@prods);
		}

	$ACTION = 'PRODUCTS';	
	}


##
##
##
if ($ACTION eq 'PRODUCTS') {
	require POGS;

	my ($S) = SUPPLIER->new($USERNAME, $CODE);
	my ($sup_to_prodref,$prod_to_supref) = SUPPLIER::fetch_supplier_products($USERNAME,$CODE);
	my @prods = (keys %{$prod_to_supref});
	my $c = '';

	if (scalar(@prods) > 5000) {
		$c .= "<tr><td colspan=10>Sorry, you have more than 5000 products, cannot display</td></tr>";	
		}
	else {
		my $jedi_username = '';
	
		require SUPPLIER::JEDI;
		$jedi_username = &SUPPLIER::JEDI::resolve_jedi_username($USERNAME,$CODE);
		my ($invref) = &INVENTORY::fetch_qty($USERNAME,\@prods);

		my $count = 0;
		my $pidsref = &ZOOVY::fetchskus_into_hashref($USERNAME,\@prods);
		
		
		foreach my $pid (sort (@prods)) {
			my $class = ($count++%2)?'table_bg1':'table_bg2';

			if ($pid =~ /:/) { POGS::apply_options($USERNAME,$pid,$pidsref->{$pid}); }
			
			## ACTION CHECKBOX
			$c .= qq~<tr class="$class">~;
			$c .= qq~<td nowrap><input type="checkbox" name="SKU_$count" value="$pid"></td>~;

			## COUNT
			$c .= qq~<td>$count</td>~;
			
			## SKU
			$c .= qq~<td nowrap><a target="_new" href="http://$USERNAME.zoovy.com/product/$pid">$pid</a> ~.
					qq~<a target="_new" href="http://www.zoovy.com/biz/product/index.cgi?VERB=QUICKSEARCH&VALUE=$pid">[Edit]</a></td>~;
			

			my $inv_enable = '';
			## SUPPLIER SKU (JEDI)
			if ($S->{'INFO'}->{'MODE'} eq 'JEDI') {
			      $c .= "<td><a href=\"http://$jedi_username".".zoovy.com/product/".
			      		$pid."\">".
			      		$pid."</a></td>";
					$inv_enable = &ZOOVY::fetchproduct_attrib($jedi_username,$pid,'zoovy:inv_enable');
					}
			## MANUFACTURER SKU (NON-JEDI)
			else { 
				#if ($pidsref->{$pid}->{'zoovy:prod_mfgid'} ne '') {$c .= "<td>$pidsref->{$pid}->{'zoovy:prod_mfgid'}</td>"; }
				#else {$c .= "<td>$pidsref->{$pid}->{'zoovy:prod_supplierid'}</td>"; }
				$c .= "<td>$prod_to_supref->{$pid}</td>"; 				

				$inv_enable = $pidsref->{$pid}->{'zoovy:inv_enable'};
				}

	
			## INVENTORY
			## check if Unlimited
			if (($inv_enable & 32) > 0) { $c .= "<td>Unlimited</td>"; }
			else { 
				## check the sku level
				if ($invref->{$pid} eq ''){
					require PRODUCT;
					require SUPPLIER::JEDI;
					my $invref = &SUPPLIER::JEDI::fetch_inventory($USERNAME,$jedi_username,[$pid]);
					my ($self) = PRODUCT->new($USERNAME,$pid);
					$c .= "<td>";
					foreach my $sku (keys %{$invref}){
   						my ($id) = substr($sku, -2, 2);
   						my ($prompt) = &PRODUCT::pog_option_fetch($self,"#Z",$id,"prompt");
						$c .= "$prompt: $invref->{$sku}<br>";
						}
					$c .= "</td>";
					}
				## inv at the product level
				else {
					$c .= "<td>$invref->{$pid}</td>";
					}
				}
			
			## PRODUCT NAME
			$c .= "<td>$pidsref->{$pid}->{'zoovy:prod_name'}</td>";
			
			## SHIPPING
			if (defined $pidsref->{$pid}->{'zoovy:ship_cost1'} && $pidsref->{$pid}->{'zoovy:ship_cost1'} > 0) {
				$c .= "<td>\$".sprintf("%.2f",$pidsref->{$pid}->{'zoovy:ship_cost1'})."</td>";
				}
			else { $c .= "<td>TBD</td>"; }

			## COST, PRICE
			foreach my $k ('zoovy:base_cost','zoovy:base_price') {
				$c .= "<td>\$".sprintf("%.2f",$pidsref->{$pid}->{$k})."</td>";
				}
			$c .= "</tr>";
			}
		}

	if ($c eq '') {
		$c .= "<tr><td colspan='5'>No products found - please add some</td></tr>";
		}
	$GTOOLS::TAG{'<!-- PRODUCTS -->'} = $c;

	$template_file = 'products.shtml';
   push @BC, { name=>"Products" };

	}



## for now, only used to update STOCK Supplier Order Items
## (change quantity, add to order)
if ($ACTION eq 'ORDERITEM-UPDATE') {
	use Data::Dumper;

	my $c = '';

	foreach my $var (keys %{$ZOOVY::cgiv}){
		$c .= "$var $ZOOVY::cgiv->{$var}<br>";
		if ($var =~ /^(.*)_QTY$/) {
			my $qtyID = $1;
 			my $QTY = $ZOOVY::cgiv->{$qtyID.'_QTY'};
			SUPPLIER::update_orderitem($qtyID,$MID,QTY=>$QTY);
			}
		if ($var =~ /^(.*)_DISPATCH$/) {
			my $disID = $1;
			SUPPLIER::update_orderitem($disID,$MID,STATUS=>'MANUAL_DISPATCH');		
			}
		}
	## create an order
	my ($S) = SUPPLIER->new($USERNAME, $CODE);
	my $orderref = SUPPLIER::create_order($MID,$CODE,$S->{'INFO'}->{'FORMAT'},check_stock_limits=>0);	

	$ACTION = 'ORDERS';	
	}




if ($ACTION eq 'ORDER-UPDATE') {

	if ($ZOOVY::cgiv->{'update'} eq 'RECEIVE') {
		my $results = '';
		foreach my $var (keys %{$ZOOVY::cgiv}){
			if ($var =~ /^(.*)_ID$/) {
				my $ID = $1;
				my ($srcorder) = SUPPLIER::receive_order($USERNAME,$ID);
				$results .= $srcorder.", ";
				}
			}
		$results =~ s/, ^//;
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=blue>The following orders have been received:<br> $results</font>";
		## stub..patti put code here.		
		}
	elsif ($ZOOVY::cgiv->{'update'} eq 'REDISPATCH') {

		my $results = '';
		foreach my $var (keys %{$ZOOVY::cgiv}){
			if ($var =~ /^(.*)_ID$/) {
				my $ID = $1;
				my ($srcorder) = SUPPLIER::redispatch_order($USERNAME,$ID);
				$results .= $srcorder.", ";
				}
			}
		$results =~ s/, ^//;
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=blue>The following orders are set to be redispatched (dispatchment will take place in the next hour):<br> $results</font>";
		}

	elsif ($ZOOVY::cgiv->{'update'} eq 'CONFIRM') {
		print STDERR "confirming orders with $ZOOVY::cgiv->{'name'} $ZOOVY::cgiv->{'email'}\n";
		if ($ZOOVY::cgiv->{'name'} eq '' || $ZOOVY::cgiv->{'email'} eq '') {
			$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=red>Both name and email are required when confirming orders from this screen.</font>";
			}
		elsif (not ZTOOLKIT::validate_email($ZOOVY::cgiv->{'email'})) {
			$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=red>Email is invalid.</font>";
			}
		else {
			foreach my $var (keys %{$ZOOVY::cgiv}){
				if ($var =~ /^(.*)_ID$/) {
					my $ID = $1;
					print STDERR "confirming $ID\n";

					my $pstmt = "select srcorder from SUPPLIER_ORDERS where id = ".$dbh->quote($ID);
					my $sth = $dbh->prepare($pstmt);
					$sth->execute();
					my ($orderid)=$sth->fetchrow();
					$sth->finish();

					##USERNAME,srcorder,supplierorderid,conf_ordertotal,ship_method,ship_num,conf_person,conf_email
					my (@errors) = SUPPLIER::confirm_order($USERNAME,$orderid,'NA','','','',$ZOOVY::cgiv->{'name'},$ZOOVY::cgiv->{'email'});
					print STDERR Dumper(@errors);
					}
				}
			}	
		}

		$ACTION = 'ORDERS';	
		if ($CODE eq '') { $ACTION = "NON_CONF_ORDERS"; }
	
	}
	



##
## Orders tab for a particular Supplier
## 
if ($ACTION eq 'ORDERS') {

	my ($S) = SUPPLIER->new($USERNAME, $CODE);
	
	if ($S->{'INFO'}->{'FORMAT'} eq 'STOCK') {
		$ACTION = 'STOCK_ORDERS';
		}

	else {
		my $c = '';
		$template_file = 'orders.shtml';
	
		require ORDER::SUPPLIER;
		my $orefs = ORDER::SUPPLIER::list_orderitems($USERNAME,$CODE);

		##	
		## BUILD ITEMS TO BE ORDERED	
		##
		my $count = 0;
		foreach my $supoid (sort keys %{$orefs}) {
			my $class = ($count++%2)?'r0':'r1';
			my ($SKU,$QTY,$STATUS,$SRCOID,$CTS,$SOID,$ID) = split(/\|/,$orefs->{$supoid});

			next unless ($STATUS eq 'NEW' || $STATUS eq 'ADDED'); 

			my $ACTIONS = '';

			$c .= qq~<tr class="$class">~;
			$c .= qq~<td></td>~;
			$c .= qq~<td><a target=_new href="https://www.zoovy.com/biz/orders/view.cgi?ID=$SRCOID">$SRCOID</a></td>~;
			$c .= qq~<td>$SKU</td>~;
			$c .= qq~<td>$QTY</td>~;
			$c .= qq~<td></td>~;
			$c .= qq~<td>$STATUS to $SOID</td>~;
			$c .= qq~<td>~.&ZTOOLKIT::pretty_date($CTS).qq~</td>~;
			$c .= qq~</tr>~;
			}

		if ($c eq '') { $c = "<tr class='table_bg2'><td colspan='7'><i>No New order items found for this supplier</td></tr>"; }
	
		$GTOOLS::TAG{'<!-- ORDERITEMS -->'} = $c;

		require SUPPLIER::JEDI;
		my $jedi_username = &SUPPLIER::JEDI::resolve_jedi_username($USERNAME,$CODE);	
		$orefs = ORDER::SUPPLIER::list_orders($USERNAME,$CODE);

		##
		## Build ORDERS table
		## 

		my $c = '';

		foreach my $id (reverse sort keys %{$orefs}) {
			my ($O) = ORDER->new($USERNAME,$orefs->{$id}->{'SRCORDER'});
			my $class = ($count++%2)?'r0':'r1';
			my $CREATED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CREATED_GMT'});
			my $DISPATCHED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'DISPATCHED_GMT'});
			my $CONFIRMED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CONF_GMT'});
			
			
			$c .= qq~<tr class="$class">~;

			## JEDI orders aren't "redispatchable"
			if ($S->{'INFO'}->{'MODE'} ne 'JEDI') {
				$c .= qq~<td><input type="checkbox" name="$orefs->{$id}->{'ID'}_ID"></td>~;
				$GTOOLS::TAG{'<!-- ACTIONS -->'} = qq~Action: <select name="update">
					<option value="">-</option>
					<option value="REDISPATCH">Redispatch</option>
					</select><input type="submit" class="button" value="Go">~;
				}
			else { $c .= qq~<td></td>~; }

			## Store order
			$c .= qq~<td><a target=_new href="https://www.zoovy.com/biz/orders/view.cgi?ID=$orefs->{$id}->{'SRCORDER'}">$orefs->{$id}->{'SRCORDER'}</a> ~;
			if (defined $O) { $c .= "(".$O->get_attrib('pool').")"; } 
			$c .= qq~</td>~;
			
			## JEDI ORDER
			if ($jedi_username ne '') {
				$c .= qq~<td><a target=_new href="https://ssl.zoovy.com/$jedi_username/order_status.cgis?order_id=$orefs->{$id}->{'SUPPLIERORDERID'}">$orefs->{$id}->{'SUPPLIERORDERID'}</a></td>~;
				}
			else { 
				$c .= qq~<td>$orefs->{$id}->{'SUPPLIERORDERID'}</td>~; 
				}
		
			my $confirmed = $CONFIRMED_GMT . qq~ <a href="mailto:$orefs->{$id}->{'CONF_EMAIL'}">~ . 
				($orefs->{$id}->{'CONF_PERSON'} eq ''?$orefs->{$id}->{'CONF_EMAIL'}:$orefs->{$id}->{'CONF_PERSON'})."</a>";
			
			$c .= qq~<td>$orefs->{$id}->{'STATUS'}</td>
				<td>$CREATED_GMT</td>
				<td>$DISPATCHED_GMT</td>
				<td>$confirmed</td></tr>~;

			}

		if ($c eq '') { $c = "<tr class='table_bg2'><td colspan='7'><i>No orders found for this supplier</td></tr>"; }

		$GTOOLS::TAG{'<!-- ORDERS -->'} = $c;
		$GTOOLS::TAG{'<!-- MODE -->'} = $S->{'INFO'}->{'MODE'};
		
		$template_file = 'orders.shtml';
   	push @BC, { name=>"Orders" };
		}
	}


##
##
##
if ($ACTION eq 'STOCK_ORDERS') {

	my $c = '';
	$template_file = 'stock-orders.shtml';
	
	require ORDER::SUPPLIER;
	my $orefs = ORDER::SUPPLIER::list_orderitems($USERNAME,$CODE);

	my ($S) = SUPPLIER->new($USERNAME, $CODE);

	##
	## BUILD ITEMS TO BE ORDERED
	##
	my $count = 0;
	my $stock_new_count = 0;
	foreach my $supoid (sort keys %{$orefs}) {
		my $class = ($count++%2)?'r0':'r1';
		my ($SKU,$QTY,$STATUS,$SRCOID,$CTS,$SOID,$ID) = split(/\|/,$orefs->{$supoid});
		

		next unless ($STATUS eq 'NEW' || $STATUS eq 'ADDED'); 

		my $cost = "\$".SUPPLIER::STOCK::order_item_total($MID,$ID);
		$c .= qq~<tr class="$class">~;
      if ($STATUS eq 'NEW') {
			$c .= qq~<td><input type="checkbox" name="${ID}_DISPATCH">Order?</td>~;
			}
		else {
			$c .= qq~<td></td>~;
			}

		$c .= qq~<td>STOCK</td>~;
		$c .= qq~<td>$SKU</td>~;
		
      if ($STATUS eq 'NEW') {
			$c .= qq~<td><input type="textbox" size="4" name="${ID}_QTY" value="$QTY"></td>~;
			}
		else {
			$c .= qq~<td>$QTY</td>~;
			}
	
		$c .= qq~<td>$cost</td>~;
		$c .= qq~<td>$STATUS to $SOID</td>~;
		$c .= qq~<td>~.&ZTOOLKIT::pretty_date($CTS).qq~</td>~;
		$c .= qq~</tr>~;
		}


	if ($c eq '') {
		$c = "<tr class='table_bg2'><td colspan='7'><i>No New order items found for this supplier</td></tr>";
		}
	
	## add UPDATE button
	elsif ($c ne '' && $stock_new_count>0) {
		$c .= qq~<tr><td colspan=6 align=center><input type="submit" src="/images/bizbuttons/update.gif" value="Update">
   	      </td></tr>~;
		}

	$GTOOLS::TAG{'<!-- ORDERITEMS -->'} = $c;

	

	use Data::Dumper;
   #print STDERR Dumper($orefs);

	##
	## Build ORDERS table
	## 
	$orefs = ORDER::SUPPLIER::list_orders($USERNAME,$CODE);
	my $c = '';

	foreach my $id (reverse sort keys %{$orefs}) {

		my ($O) = ORDER->new($USERNAME,$orefs->{$id}->{'SRCORDER'});
		my $class = ($count++%2)?'r0':'r1';
		my $CREATED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CREATED_GMT'});
		my $DISPATCHED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'DISPATCHED_GMT'});
		my $CONFIRMED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CONF_GMT'});
		my $RECEIVED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'RECEIVED_GMT'});

		$c .= qq~<tr class="$class">~;
		## ACTION
		$c .= qq~<td><input type="checkbox" name="$orefs->{$id}->{'ID'}_ID"></td>~;
		## Zoovy Order ID
		$c .= qq~<td><a target=_new href="?ACTION=STOCK_ORDER&CODE=$CODE&ID=~.$orefs->{$id}->{'ID'}.
		      qq~">$orefs->{$id}->{'ID'}</a> </td> ~;
		## Supplier Order ID
		$c .= qq~<td>$orefs->{$id}->{'SUPPLIERORDERID'}</td>~; 
		## Total Cost
		$c .= qq~<td>\$~.sprintf("%.2f",$orefs->{$id}->{'TOTAL_COST'}).qq~</td>~;
		
		## Status, Created, Dispatched, Confirmed
		my $confirmed = $CONFIRMED_GMT . qq~ <a href="mailto:$orefs->{$id}->{'CONF_EMAIL'}">~ . 
			($orefs->{$id}->{'CONF_PERSON'} eq ''?$orefs->{$id}->{'CONF_EMAIL'}:$orefs->{$id}->{'CONF_PERSON'})."</a>";
		$c .= qq~<td>$orefs->{$id}->{'STATUS'}</td>
			<td>$CREATED_GMT</td>
			<td>$DISPATCHED_GMT</td>
			<td>$confirmed</td>
			<td>$RECEIVED_GMT</td></tr>~;			
		}

	if ($c eq '') {
		$c = "<tr class='table_bg2'><td colspan='7'><i>No orders found for this supplier</td></tr>";
		}

	$GTOOLS::TAG{'<!-- ORDERS -->'} = $c;
	$GTOOLS::TAG{'<!-- ACTIONS -->'} = qq~Action: <select name="update">
					<option value="">-</option>
					<option value="RECEIVE">Receive Order</option>
					<option value="REDISPATCH">Redispatch</option>
					</select><input type="submit" class="button" value="Go">~;

   push @BC, { name=>"Orders" };
	}
	

##
## individual STOCK ORDER display
##
if ($ACTION eq 'STOCK_ORDER') {
	$template_file = 'stock_order.shtml';
	push @BC, { name=>"Orders",link=>"/biz/utilities/suppliers/index.cgi?ACTION=ORDERS&CODE=$CODE" };

	my $pstmt = "select srcsku,description,qty,I.cost,from_unixtime(I.created_gmt) from SUPPLIER_ORDERS O,SUPPLIER_ORDERITEMS I ".
		    "where I.SUPPLIEROID = O.ID and O.ID =".$dbh->quote($ZOOVY::cgiv->{'ID'}).
		    " order by I.created_gmt,srcsku";
	my $sth = $dbh->prepare($pstmt);
	$sth->execute();

	print STDERR $pstmt."\n";	
	my $c = '';
	my $total = 0;
	while( my ($sku,$desc,$qty,$cost,$added) = $sth->fetchrow()) {
		$total += ($cost*$qty);
		$c .= "<tr><td>$added</td><td>$sku</td><td>$desc</td><td>$qty</td><td>".'$'.sprintf("%.2f",($cost*$qty))."</td></tr>";
		}
	$sth->finish();
	
	$c .= "<tr><td colspan=4 halign=right><b>TOTAL:</b></td><td>".'$'.sprintf("%.2f",($total))."</td></tr>";

	$GTOOLS::TAG{'<!-- ORDER_ID -->'} = $ZOOVY::cgiv->{'ID'};		
	$GTOOLS::TAG{'<!-- ORDER_ITEMS -->'} = $c;		
	}
	
##
## Non-Confirmed Orders tab for all Suppliers
## 
if ($ACTION eq 'NON_CONF_ORDERS') {

	my $c = '';
	my $count = 0;
	
	require ORDER::SUPPLIER;
	my $orefs = ORDER::SUPPLIER::list_orders($USERNAME,'','NON_CONF');

	use Data::Dumper;

	foreach my $id (reverse sort keys %{$orefs}) {
		my ($O) = ORDER->new($USERNAME,$orefs->{$id}->{'SRCORDER'});
		my $class = ($count++%2)?'table_bg1':'table_bg2';
		#my ($SRCOID,$SUPPLIEROID,$STATUS,$CREATED_GMT,$DISPATCHED_GMT,undef,undef,undef,$CODE) = split(/\|/,$orefs->{$id});
		my $CREATED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CREATED_GMT'});
		my $DISPATCHED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'DISPATCHED_GMT'});
		
		my $ACTIONS = '';
		
		
		$c .= qq~<tr class="$class">~;
		
		if ($orefs->{$id}->{'FORMAT'} ne 'JEDI') {
			$c .= qq~<td><input type="checkbox" name="$orefs->{$id}->{'ID'}_ID"></td>~; 
			}
		else { $c .= "<td></td>"; }
		
		$c .= qq~<td><a href="?ACTION=ORDERS&CODE=$orefs->{$id}->{'SUPPLIERCODE'}">$orefs->{$id}->{'SUPPLIERCODE'}</a></td>~;

		if ($orefs->{$id}->{'FORMAT'} ne 'STOCK') {
			$c .= qq~<td><a target=_new href="https://www.zoovy.com/biz/orders/view.cgi?ID=$orefs->{$id}->{'SRCORDER'}">$orefs->{$id}->{'SRCORDER'}</a></td>~;
			}
		else {
			$c .= qq~<td><a target=_new href="?ACTION=STOCK_ORDER&CODE=$orefs->{$id}->{'SUPPLIERCODE'}&ID=$orefs->{$id}->{'ID'}">$orefs->{$id}->{'ID'}</a> </td> ~;
			}

		if (defined $O) { $c .= "<td>".$O->get_attrib('pool')."</td>"; }
		else { $c .= "<td>DELETED</td>"; }
		
		$c .= qq~ 
	<td>$CREATED_GMT</td>
	<td>$DISPATCHED_GMT</td>
	<td>$orefs->{$id}->{'DISPATCHED_COUNT'}</td>
	<td><a target="_new" href="http://$USERNAME.zoovy.com/confirm.cgis?reference=$orefs->{$id}->{'SRCORDER'}">Never</a></td></tr>~;
		}

	if ($c eq '') {
		$c = "<tr class='table_bg2'><td colspan='7'><i>No non-confirmed orders found.</td></tr>";
		}

	$GTOOLS::TAG{'<!-- ORDERS -->'} = $c;

	$template_file = 'non_conf_orders.shtml';
	push @BC, { name=>"Non-Confirmed Orders" };
	}


	
## 
##
##
if ($ACTION eq 'INVENTORY') {
	}



##
##
##
if ($ACTION eq 'SAVE-ADDPRODUCTS')  {

	my $SKU = $ZOOVY::cgiv->{'sku'};
	my $MODE = $info->{'MODE'};		## e.g. JEDI, API, GENERIC

	my ($S) = SUPPLIER->new($USERNAME,$CODE);

	## get current product information
	my $prodref = ZOOVY::fetchproduct_as_hashref($USERNAME,$SKU);
	
	## if values are put in, use those otherwise you current properties
	$prodref->{'zoovy:prod_name'} = ($ZOOVY::cgiv->{'prod_name'} ne ''?$ZOOVY::cgiv->{'prod_name'}:$prodref->{'zoovy:prod_name'});
	$prodref->{'zoovy:base_cost'} = ($ZOOVY::cgiv->{'cost'} ne ''?$ZOOVY::cgiv->{'cost'}:$prodref->{'zoovy:base_cost'});
	
	$prodref->{'zoovy:ship_cost1'} = ($ZOOVY::cgiv->{'suppliership'} ne ''?$ZOOVY::cgiv->{'suppliership'}:$prodref->{'zoovy:ship_cost1'});
	$prodref->{'zoovy:base_weight'} = ($ZOOVY::cgiv->{'base_weight'} ne ''?$ZOOVY::cgiv->{'base_weight'}:$prodref->{'zoovy:base_weight'});
	$prodref->{'zoovy:prod_supplierid'} = ($ZOOVY::cgiv->{'suppliersku'} ne ''?$ZOOVY::cgiv->{'suppliersku'}:$prodref->{'zoovy:prod_supplierid'});;
	$prodref->{'zoovy:prod_supplier'} = $CODE;
	$prodref->{'zoovy:virtual'} = "$MODE:$CODE";
	$prodref->{'zoovy:inv_enable'}=(defined $prodref->{'zoovy:inv_enable'}?$prodref->{'zoovy:inv_enable'}:1); 
	if (defined $ZOOVY::cgiv->{'inv_unlimited'} && $prodref->{'zoovy:inv_enable'} & 1) { 
		$prodref->{'zoovy:inv_enable'} = 33; 
		INVENTORY::add_incremental($USERNAME,$SKU,'I',9999);
		}


	## set price based on MARKUP
	if ($prodref->{'zoovy:base_price'} eq '') {
		my $formula = $S->fetch_property('MARKUP');
		my $price = '';

		require Math::Symbolic;
		my $tree = Math::Symbolic->parse_from_string($formula);         
		if (defined $tree) {
			$tree->implement('COST'=> sprintf("%.2f",$prodref->{'zoovy:base_cost'}) );
			$tree->implement('BASE'=> sprintf("%.2f",$prodref->{'zoovy:base_price'}) );
			$tree->implement('SHIP'=> sprintf("%.2f",$prodref->{'zoovy:ship_cost1'}) );
			$tree->implement('MSRP'=> sprintf("%.2f",$prodref->{'zoovy:prod_msrp'}) );

			my ($sub) = Math::Symbolic::Compiler->compile_to_sub($tree);
			$price = sprintf("%.2f",$sub->());
			}
		$prodref->{'zoovy:base_price'} = $price;
		}
			

	&ZOOVY::saveproduct_from_hashref($USERNAME,$SKU,$prodref,"/$CODE");
	$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited product $SKU</font><br><br>";
	$ACTION = 'ADDPRODUCTS';
	}


if ($ACTION eq 'ADDPRODUCTS') {
	$GTOOLS::TAG{'<!-- MODE -->'} = $info->{'MODE'};	
	$template_file = 'addproducts.shtml';	
	push @BC, { name=>"Add Product" };
	}

##
##
if ($ACTION eq 'SAVE-GENERIC-SHIPPING') {

	my ($S) = SUPPLIER->new($USERNAME, $CODE);

	# deal with SHIPPING METHOD checkboxes
	# add up all the values for bitwise comparison
	my $total_shipping_method = ($ZOOVY::cgiv->{'GEN_SHIPMETHODS_1'}?1:0) + 
		($ZOOVY::cgiv->{'GEN_SHIPMETHODS_2'}?2:0) + 
		($ZOOVY::cgiv->{'GEN_SHIPMETHODS_32'}?32:0);

	if (defined $ZOOVY::cgiv->{'GEN_SHIPMETHODS_0'}) {	
		$total_shipping_method = 0;
		}

	# deal with SHIPPING OPTIONS checkboxes
	# add up all the values for bitwise comparison
	my $total_shipping_options = ($ZOOVY::cgiv->{'GEN_SHIPOPTIONS_1'}?1:0); 

	$S->save_property('USERNAME',$USERNAME);
	$S->save_property('GEN_SHIPMETHODS',$total_shipping_method);
	$S->save_property('GEN_SHIPORIGZIP', $ZOOVY::cgiv->{'GEN_SHIPORIGZIP'});
	$S->save_property('GEN_SHIPORIGSTATE', $ZOOVY::cgiv->{'GEN_SHIPORIGSTATE'});
	$S->save_property('GEN_SHIPPROVIDER', $ZOOVY::cgiv->{'GEN_SHIPPROVIDER'});
	$S->save_property('GEN_SHIPACCOUNT', $ZOOVY::cgiv->{'GEN_SHIPACCOUNT'});
	$S->save_property('GEN_SHIPOPTIONS', $total_shipping_options);
	$S->save_property('GEN_HNDPERORDER', $ZOOVY::cgiv->{'GEN_HNDPERORDER'});
	$S->save_property('GEN_HNDPERITEM', $ZOOVY::cgiv->{'GEN_HNDPERITEM'});
	$S->save_property('GEN_HNDPERUNIITEM', $ZOOVY::cgiv->{'GEN_HNDPERUNIITEM'});
	$S->save();
	
	$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited shipping for $CODE</font><br><br>";
	$ACTION = 'GENERIC-SHIPPING';
	}

if ($ACTION eq 'GENERIC-SHIPPING') {

	my ($S) = SUPPLIER->new($USERNAME, $CODE);

		# bitwise compare
		$GTOOLS::TAG{'<!-- GEN_SHIPMETHODS_0 -->'} = ($S->{'INFO'}->{'GEN_SHIPMETHODS'}==0)?"checked":"";
		$GTOOLS::TAG{'<!-- GEN_SHIPMETHODS_1 -->'} = ($S->{'INFO'}->{'GEN_SHIPMETHODS'} & 1)?"checked":"";
		$GTOOLS::TAG{'<!-- GEN_SHIPMETHODS_2 -->'} = ($S->{'INFO'}->{'GEN_SHIPMETHODS'} & 2)?"checked":"";
		$GTOOLS::TAG{'<!-- GEN_SHIPMETHODS_32 -->'} = ($S->{'INFO'}->{'GEN_SHIPMETHODS'} & 32)?"checked":"";


		## Origin Zip Code, State, Provider, Account
		$GTOOLS::TAG{'<!-- GEN_SHIPORIGZIP -->'} = $S->{'INFO'}->{'GEN_SHIPORIGZIP'};
		$GTOOLS::TAG{'<!-- GEN_SHIPORIGSTATE -->'} = $S->{'INFO'}->{'GEN_SHIPORIGSTATE'};	
	
		## Configure veribiage for Shipping Meter
		my $params = &ZTOOLKIT::parseparams($S->{'INFO'}->{'GEN_SHIPMETER'});

		if($params->{'type'} eq "UPS"){
			$GTOOLS::TAG{'<!-- GEN_SHIPMETER -->'} = $params->{'type'} ." Shipper #: ". $params->{'shipper_number'}. "<br>License: ". $params->{'license'};
			}	
		elsif($params->{'type'} eq "FEDEX"){
			$GTOOLS::TAG{'<!-- GEN_SHIPMETER -->'} = $params->{'type'} ." Account #: ". $params->{'account_number'}. "<br>Meter: ". $params->{'meter'};
			}	
		else{ $GTOOLS::TAG{'<!-- GEN_SHIPMETER -->'} = "None confirmed at this time..."; }
		##

		my ($webdb) = &ZWEBSITE::fetch_website_dbref($USERNAME);
		if ($webdb->{'google_api_env'}==0) {}
		elsif ($webdb->{'google_dest_zip'} eq '00000') {
			$GTOOLS::TAG{'<!-- GEN_SHIP_WARNINGS -->'} .= "<font color='red'>Warning: your google checkout settings are incompatible with zone based shipping.</font>";
			}


		$GTOOLS::TAG{'<!-- GEN_SHIPOPTIONS_1 -->'} = ($S->{'INFO'}->{'GEN_SHIPOPTIONS'} & 1)?"checked":"";

		$GTOOLS::TAG{'<!-- GEN_HNDPERORDER -->'} = $S->{'INFO'}->{'GEN_HNDPERORDER'};
		$GTOOLS::TAG{'<!-- GEN_HNDPERITEM -->'} = $S->{'INFO'}->{'GEN_HNDPERITEM'};
		$GTOOLS::TAG{'<!-- GEN_HNDPERUNIITEM -->'} = $S->{'INFO'}->{'GEN_HNDPERUNIITEM'};

	$template_file = 'generic-shipping.shtml';
	push @BC, { name=>"Config Shipping" };
	}


################################################################
## Inventory Handler
##
if ($ACTION eq 'SAVE-GENERIC-INVENTORY') {
	my ($S) = SUPPLIER->new($USERNAME,$CODE);
	   $S->save_property('USERNAME',$USERNAME);
        $S->save_property('GEN_INVURL',$ZOOVY::cgiv->{'GEN_INVURL'});
   $S->save_property('GEN_INVTYPE',$ZOOVY::cgiv->{'GEN_INVTYPE'});
   $S->save_property('GEN_INVAUTO',$ZOOVY::cgiv->{'GEN_INVAUTO'});
	$S->save_property('GEN_INVTYPE_OTHER',$ZOOVY::cgiv->{'GEN_INVTYPE_OTHER'});
   $S->save_property('GEN_INVSKU',$ZOOVY::cgiv->{'GEN_INVSKU'});
   $S->save_property('GEN_INVSTOCK',$ZOOVY::cgiv->{'GEN_INVSTOCK'});
   $S->save_property('GEN_INVSHIP',$ZOOVY::cgiv->{'GEN_INVSHIP'});
   $S->save_property('GEN_INVAVAIL',$ZOOVY::cgiv->{'GEN_INVAVAIL'});
   $S->save_property('GEN_INVCOST',$ZOOVY::cgiv->{'GEN_INVCOST'});
   $S->save();

   $GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited shipping for $CODE</font><br><br>";
   $ACTION = 'GENERIC-INVENTORY';

	}

##
##
##
if ($ACTION eq 'GENERIC-INVENTORY') {

	my ($S) = SUPPLIER->new($USERNAME, $CODE);
	use Data::Dumper;

	if($S->{'INFO'}->{'GEN_INVTYPE'} eq 'CSV'){ $GTOOLS::TAG{'<!-- INV_TYPE_CSV -->'} = 'selected'; }
	else{ $GTOOLS::TAG{'<!-- INV_TYPE_CSV -->'} = ''; }
   
	if($S->{'INFO'}->{'GEN_INVTYPE'} eq 'TAB'){ $GTOOLS::TAG{'<!-- INV_TYPE_TAB -->'} = 'selected'; }
	else{ $GTOOLS::TAG{'<!-- INV_TYPE_TAB -->'} = ''; }
	
	if($S->{'INFO'}->{'GEN_INVTYPE'} eq 'OTHER'){ 
		$GTOOLS::TAG{'<!-- INV_TYPE_OTHER -->'} = 'selected'; 
		$GTOOLS::TAG{'<!-- GEN_INTYPE_OTHER -->'} = $S->{'INFO'}->{'GEN_INVTYPE_OTHER'}; 
		}
	
	else{ 
		$GTOOLS::TAG{'<!-- INV_TYPE_OTHER -->'} = ''; 
		$GTOOLS::TAG{'<!-- GEN_INTYPE_OTHER -->'} = ''; 
		}
	
	if($S->{'INFO'}->{'GEN_INVAUTO'} == 0){ $GTOOLS::TAG{'<!-- INV_AUTO_NO -->'} = 'selected'; }
   else{ $GTOOLS::TAG{'<!-- INV_AUTO_NO -->'} = ''; }
   if($S->{'INFO'}->{'GEN_INVAUTO'} == 1){ $GTOOLS::TAG{'<!-- INV_AUTO_YES -->'} = 'selected'; }
   else{ $GTOOLS::TAG{'<!-- INV_AUTO_YES -->'} = ''; }


   $GTOOLS::TAG{'<!-- GEN_INVURL -->'} = $S->{'INFO'}->{'GEN_INVURL'};
   $GTOOLS::TAG{'<!-- GEN_INVSKU -->'} = $S->{'INFO'}->{'GEN_INVSKU'};
   $GTOOLS::TAG{'<!-- GEN_INVSTOCK -->'} = $S->{'INFO'}->{'GEN_INVSTOCK'};
   $GTOOLS::TAG{'<!-- GEN_INVSHIP -->'} = $S->{'INFO'}->{'GEN_INVSHIP'};
   $GTOOLS::TAG{'<!-- GEN_INVAVAIL -->'} = $S->{'INFO'}->{'GEN_INVAVAIL'};
   $GTOOLS::TAG{'<!-- GEN_INVCOST -->'} = $S->{'INFO'}->{'GEN_INVCOST'};

	my $count = $S->fetch_property('GEN_INVUPDATE_ROWS');
	my $errors = $S->fetch_property('GEN_INVERRORS');
	my $gmt = ZTOOLKIT::pretty_date($S->fetch_property('GEN_INVUPDATE_GMT'),1);

	$GTOOLS::TAG{'<!-- RESULT -->'} = "Inventory updated $gmt<br>";
	if ($count == 0) {
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color='red'>ERRORS: $errors</font>";
		}
	else {
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color=\"blue\">Successfully imported $count items.</font>";
		}

   $template_file = 'generic-inventory.shtml';
   push @BC, { name=>"Config Inventory" };

	}


##
##
##
if ($ACTION eq 'STOCK-INVENTORY') {

   $template_file = 'stock-inventory.shtml';
   push @BC, { name=>"Config Inventory" };

	}

##
##
##
if ($ACTION eq 'UPDATE-STOCK-INVENTORY') {

	my $itemsref = SUPPLIER::STOCK::add_open_items($USERNAME,$CODE);

	my $items = '';
	foreach my $item (keys %{$itemsref}) {
		$items .= $item."<br>";
		}
	use Data::Dumper;
	$GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color=\"blue\">$USERNAME $CODE Successfully updated the following items:</font><br>$items<p>".Dumper($itemsref);
   $template_file = 'stock-inventory.shtml';
   push @BC, { name=>"Config Inventory" };

	}


################################################################
## ORDER SETUP Handler
##
## FORMAT
##		- NONE - no automatic orders
##		- DROPSHIP - dropshipping
##		- FULFILL - fulfillment
##		- STOCK - stock (inventory mode)
##
## GEN_ORDERTYPE
##    - email (1)
##    - fax (2)
## 	- defaults to 0
##
if (($ACTION eq 'SAVE-GENERIC-ORDERING') || ($ACTION eq 'SAVE-JEDI-ORDERING')) {

   my ($S) = SUPPLIER->new($USERNAME,$CODE);

	if ($S->{'INFO'}->{'FORMAT'} eq 'NONE') {
		}
	elsif ($S->{'INFO'}->{'FORMAT'} eq 'STOCK') {
		## Stock mode has specific settings limit which days/amounts orders may be placed.
		$S->save_property('LIMIT_AMOUNT',$ZOOVY::cgiv->{'LIMIT_AMOUNT'});
		$S->save_property('LIMIT_TIME',$ZOOVY::cgiv->{'LIMIT_TIME'});
		$S->save_property('LIMIT_DAYS',$ZOOVY::cgiv->{'LIMIT_DAYS'});
		$S->save_property('LIMIT_COMBOAMOUNT',$ZOOVY::cgiv->{'LIMIT_COMBOAMOUNT'});
		$S->save_property('LIMIT_COMBODAYS',$ZOOVY::cgiv->{'LIMIT_COMBODAYS'});
		my $v = 0;
		foreach my $i (0..6) {
			$v += (defined $ZOOVY::cgiv->{'LIMIT_DOW_'.$i})?(1<<$i):0;
			}
		$S->save_property('LIMIT_DOW',$v);
		}
	else {
		$S->save_property('LIMIT_DOW',$ZOOVY::cgiv->{"LIMIT_DOW"});
		}

	if ($ACTION eq 'SAVE-GENERIC-ORDERING') {
	   ## no errors found
 	  	$S->save_property('GEN_ORDERTYPE',$ZOOVY::cgiv->{'GEN_ORDERTYPE'});
      $S->save_property('GEN_ORDERSUBJECT',$ZOOVY::cgiv->{'GEN_ORDERSUBJECT'});
      $S->save_property('GEN_ORDERBODY',$ZOOVY::cgiv->{'GEN_ORDERBODY'});
		$S->save_property('GEN_ORDERNOTES',(defined $ZOOVY::cgiv->{'GEN_ORDERNOTES'}?1:0));
      $S->save_property('GEN_ORDEREMAIL',$ZOOVY::cgiv->{'GEN_ORDEREMAIL'});
		$S->save_property('GEN_ORDERBCC',$ZOOVY::cgiv->{'GEN_ORDERBCC'});
      $S->save_property('GEN_ORDEREMAIL_SRC', $ZOOVY::cgiv->{'GEN_ORDEREMAIL_SRC'});
      $S->save_property('GEN_ORDERFAX',$ZOOVY::cgiv->{'GEN_ORDERFAX'});
      $S->save_property('GEN_ORDERATTACH',$ZOOVY::cgiv->{'GEN_ORDERATTACH'});
      }

	if ($ACTION eq 'SAVE-JEDI-ORDERING') {
		## Jedi doesn't really have anything to setup.
		}

	$S->save();

	my $dbh = &DBINFO::db_zoovy_connect();
	my $pstmt = "update SUPPLIER_ORDERS set WAIT_GMT=0 where SRCMID=$MID and STATUS='OPEN'";
	#print STDERR $pstmt."\n";
	$dbh->do($pstmt);
	&DBINFO::db_zoovy_close();

	$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited order setup for $CODE</font><br><br>";

   $ACTION = 'ORDERING';
   }


if ($ACTION eq 'ORDERING') {
	my ($S) = SUPPLIER->new($USERNAME,$CODE);

	if ($S->{'INFO'}->{'FORMAT'} eq 'NONE') {		
		## None
		}
	elsif ($S->{'INFO'}->{'FORMAT'} eq 'STOCK') {
		## Stock mode

		## created 2007-03-21
		## determines what time orders should be dispatched daily
		my $limit_time = $S->{'INFO'}->{'LIMIT_TIME'};
		my $time_menu = qq~<select name="LIMIT_TIME">\n<option value=''>\n~;
		foreach my $type ('am','pm') {
			foreach my $i (12,1..11) {
				my $selected = '';
				my $time = $i.":00 ".$type;
				my $value = '';
				if ($type eq 'am') {
					if ($i == 12) { $value = '00'; }
					elsif ($i == 11 || $i == 10) { $value = $i; } 
					else { $value = '0'.$i; }
					}
				else {
					if ($i == 12) { $value = '12'; }
					else { $value = ($i+12); }
					}
				if ($limit_time eq "$value") { $selected = 'selected'; }
				$time_menu .= qq~<option $selected value="$value">$time\n~;
				}
			}
		$time_menu .= "</select>";

		my $limit_amount = $S->{'INFO'}->{'LIMIT_AMOUNT'};
		my $limit_comboamount = $S->{'INFO'}->{'LIMIT_COMBOAMOUNT'};
		my $limit_combodays = '';
		my $limit_days = '';
		foreach my $i (0..14) {
			$limit_combodays .= "<option ".(($S->{'INFO'}->{'LIMIT_COMBODAYS'} == $i)?'selected':'')." value=\"$i\">$i</option>\n";
			$limit_days .= "<option ".(($S->{'INFO'}->{'LIMIT_DAYS'} == $i)?'selected':'')." value=\"$i\">$i</option>\n";
			}
		my @dow = ();
		foreach my $i (0..6) {
			$dow[$i] =  (($S->{'INFO'}->{'LIMIT_DOW'} & (1<<$i))>0)?'checked':'';
			}

		$GTOOLS::TAG{'<!-- ORDER_LIMIT -->'} = qq~

<b>Automatic Order Closing:</b><br>
Some suppliers may require certain minimum orders in order to
qualify for free shipping, or discounted rates. The "Automatic Order Close" feature lets the system
automatically delay orders (by keeping them open) in order to qualify for those discounts. <br>
<br>
Allowed Days for Ordering:<br>
			<input type="checkbox" $dow[0] name="LIMIT_DOW_0"> Monday |
			<input type="checkbox" $dow[1] name="LIMIT_DOW_1"> Tuesday |
			<input type="checkbox" $dow[2] name="LIMIT_DOW_2"> Wednesday |
			<input type="checkbox" $dow[3] name="LIMIT_DOW_3"> Thursday |
			<input type="checkbox" $dow[4] name="LIMIT_DOW_4"> Friday |
			<input type="checkbox" $dow[5] name="LIMIT_DOW_5"> Saturday |
			<input type="checkbox" $dow[6] name="LIMIT_DOW_6"> Sunday<br><br>
			Process Orders at this time (PST/PDT): $time_menu &nbsp;&nbsp;<i>**NOTE: this time is NOT exact. It is starting at this time and within an hour.</i><br>
			Hold orders for <select name="LIMIT_DAYS">$limit_days</select> days to increase order size.<br>
			Hold order until it reaches \$<input type="textbox" size="5" value="$limit_amount" name="LIMIT_AMOUNT"> dollars.<br>
			Hold order until it reaches \$<input type="textbox" size="5" value="$limit_comboamount" name="LIMIT_COMBOAMOUNT"> dollars or <select name="LIMIT_COMBODAYS">$limit_combodays</select> days.<br>
<br>
Open vs. Closed Orders: As long as an order is open, additional items can be added.
An order will not be placed with the supplier until after it is closed.
An open orer is created whenever one or more items to a particular supplier needs to be ordered.
If you want to manually close orders then leave all the days of the week unchecked and no automatic closing will occur 
and you will manually need to close each order.<br>
<br>
<i>REMEMBER: The most restrictive set of selected options will always be used.
For example if "place orders on Monday", and "limit ordering to every 3 days"
are used together - then if the first item to be ordered is found on Saturday, the resulting
order will not be placed until the following Monday. 
(Since on 3 days would not have elapsed until Tuesday, so the first Monday would have been skipped!)</i><br> 

<hr>
~;
		}
	else {
		## DROPSHIP and FULFILL MODES
		my $DOW0 = ($S->{'INFO'}->{'LIMIT_DOW'}==0)?'selected':'';
		my $DOW255 = ($S->{'INFO'}->{'LIMIT_DOW'}>0)?'selected':'';
		
		$GTOOLS::TAG{'<!-- ORDER_LIMIT -->'} = qq~
Order Mode: $S->{'INFO'}->{'MODE'} - $S->{'INFO'}->{'FORMAT'}<br>
<br>
<b>Automatically Close Orders: </b>
<br>
<select name="LIMIT_DOW">
	<option $DOW255 value="255">Yes [RECOMMENDED]</option>
	<option $DOW0 value="0">No</option>
	</select><br>
Note: if you do not automatically close orders, then you will need to manually close each order. 
Some merchants who receive a relatively small volume and wish to approve each order individually prefer
this option. Orders will NOT be transmitted to the supplier until they are closed.<br><br>
~;
		
		}


	if ($S->{'INFO'}->{'MODE'} eq 'JEDI') {
		$template_file = 'jedi-ordering.shtml';
		}
	elsif ($S->{'INFO'}->{'MODE'} eq 'GENERIC') {
		## see if the merchant has chosen to deliver order via email and/or fax
		
		$GTOOLS::TAG{'<!-- GEN_ORDERTYPE_1 -->'} = ($S->{'INFO'}->{'GEN_ORDERTYPE'} == 1 || $ZOOVY::cgiv->{'GEN_ORDERTYPE'} == 1)?'checked':'';
		$GTOOLS::TAG{'<!-- GEN_ORDERTYPE_2 -->'} = ($S->{'INFO'}->{'GEN_ORDERTYPE'} == 2 || $ZOOVY::cgiv->{'GEN_ORDERTYPE'} == 2)?'checked':'';
		$GTOOLS::TAG{'<!-- GEN_ORDERATTACH_1 -->'} = ($S->{'INFO'}->{'GEN_ORDERATTACH'} == 1 || $ZOOVY::cgiv->{'GEN_ORDERATTACH'} == 1)?'selected':'';
		$GTOOLS::TAG{'<!-- GEN_ORDERATTACH_2 -->'} = ($S->{'INFO'}->{'GEN_ORDERATTACH'} == 2 || $ZOOVY::cgiv->{'GEN_ORDERATTACH'} == 2)?'selected':'';
		$GTOOLS::TAG{'<!-- GEN_ORDERATTACH_3 -->'} = ($S->{'INFO'}->{'GEN_ORDERATTACH'} == 3 || $ZOOVY::cgiv->{'GEN_ORDERATTACH'} == 3)?'selected':'';

		## confirmation required
	   if($S->{'INFO'}->{'GEN_ORDERCONF'} == 1 || $ZOOVY::cgiv->{'GEN_ORDERCONF'} == 1){ 
			$GTOOLS::TAG{'<!-- GEN_ORDERCONF -->'} = "checked";
			}
		else{$GTOOLS::TAG{'<!-- GEN_ORDERCONF -->'} = ''; }

		## include Order Notes (from the original order)
		if($S->{'INFO'}->{'GEN_ORDERNOTES'} == 1 || $ZOOVY::cgiv->{'GEN_ORDERNOTES'} == 1){ 
			$GTOOLS::TAG{'<!-- GEN_ORDERNOTES -->'} = "checked";
			}
		else{$GTOOLS::TAG{'<!-- GEN_ORDERNOTES -->'} = ''; }


		## other params
		$GTOOLS::TAG{'<!-- GEN_ORDEREMAIL -->'} = ($S->{'INFO'}->{'GEN_ORDEREMAIL'}?$S->{'INFO'}->{'GEN_ORDEREMAIL'}:$ZOOVY::cgiv->{'GEN_ORDEREMAIL'});
		$GTOOLS::TAG{'<!-- GEN_ORDERBCC -->'} = ($S->{'INFO'}->{'GEN_ORDERBCC'}?$S->{'INFO'}->{'GEN_ORDERBCC'}:$ZOOVY::cgiv->{'GEN_ORDERBCC'});
		$GTOOLS::TAG{'<!-- GEN_ORDERFAX -->'} = ($S->{'INFO'}->{'GEN_ORDERFAX'}?$S->{'INFO'}->{'GEN_ORDERFAX'}:$ZOOVY::cgiv->{'GEN_ORDERFAX'});
		$GTOOLS::TAG{'<!-- GEN_ORDERSUBJECT -->'} = ($S->{'INFO'}->{'GEN_ORDERSUBJECT'}?$S->{'INFO'}->{'GEN_ORDERSUBJECT'}:$ZOOVY::cgiv->{'GEN_ORDERSUBJECT'});	
		$GTOOLS::TAG{'<!-- GEN_ORDERBODY -->'} = ($S->{'INFO'}->{'GEN_ORDERBODY'}?$S->{'INFO'}->{'GEN_ORDERBODY'}:$ZOOVY::cgiv->{'GEN_ORDERBODY'});
		$GTOOLS::TAG{'<!-- CONFIRMATION_PAGE -->'} = "http://".lc($USERNAME).".zoovy.com/confirm.cgis"; 

		## changed to PROFILEs
	   #require AUTOEMAIL;
  		#$GTOOLS::TAG{'<!-- GEN_ORDEREMAIL_SRC -->'} = &AUTOEMAIL::find_email($USERNAME);
		my $PROFILE = ($S->{'INFO'}->{'PROFILE'}?$S->{'INFO'}->{'PROFILE'}:'DEFAULT');
		$GTOOLS::TAG{'<!-- PROFILE -->'} = $PROFILE;
		my $srcemail = ZOOVY::fetchmerchantns_attrib($USERNAME,$PROFILE,"zoovy:support_email");
		if ($srcemail eq '') { $srcemail = "<font color=red>You don't have this set!! THIS IS VERY BAD, your Supplier emails will NOT be delivered.</font>"; }
		$GTOOLS::TAG{'<!-- GEN_ORDEREMAIL_SRC -->'} = $srcemail;
		
		$template_file = 'generic-ordering.shtml'; 
		}

	$GTOOLS::TAG{'<!-- CODE -->'} = $CODE;
	push @BC, { name=>"Config Ordering" };
	}


##
##
## 
if (($ACTION eq 'SAVE-EDIT') || ($ACTION eq 'SAVE-API-EDIT')) {

	my ($S) = SUPPLIER->new($USERNAME, $CODE);
	my $MODE = $S->fetch_property('MODE');
	my $ERROR = '';
	## MODE is ATLAST, DOBA, SHIPWIRE, GENERIC, or API

	require WHOLESALE;

	if ($MODE eq 'ATLAST') {}	# no validation required
	elsif ($MODE eq 'SHIPWIRE') {} # no validation required
	elsif ($MODE eq 'DOBA') {}
	elsif (&ZTOOLKIT::validate_email($ZOOVY::cgiv->{'COMPANY_EMAIL'}) == 0) {
		$ERROR = "<font color='red'>Please supply a valid Company email address.</font><br><br>";
		}
	elsif ($ZOOVY::cgiv->{'COMPANY_ACCOUNT'} eq '') {
		$ERROR = "<font color='red'>Please supply a valid Company account.</font><br><br>";
		}
	elsif (&ZTOOLKIT::validate_phone($ZOOVY::cgiv->{'COMPANY_PHONE'}) == 0) {
		$ERROR = "<font color='red'>Please supply a valid Company phone.</font><br><br>";
		}
	elsif ($ZOOVY::cgiv->{'MARKUP'} eq '' || &WHOLESALE::validate_formula($ZOOVY::cgiv->{'MARKUP'}) == 0) {
		$ERROR = "<font color='red'>Please supply a valid Default Markup.</font><br><br>";
		}
	elsif ($ZOOVY::cgiv->{'COMPANY_NAME'} eq '') {
		$ERROR = "<font color='red'>Please supply a Company Name.</font><br><br>";
		}

	if ($ERROR ne '') {
		$GTOOLS::TAG{'<!-- RESULT -->'} = $ERROR;
		}
	else {
	
		$S->save_property('MARKUP', $ZOOVY::cgiv->{'MARKUP'});
		$S->save_property('PROFILE', $ZOOVY::cgiv->{'PROFILE'});
		$S->save_property('COMPANY_NAME',$ZOOVY::cgiv->{'COMPANY_NAME'});
		$S->save_property('COMPANY_ACCOUNT',$ZOOVY::cgiv->{'COMPANY_ACCOUNT'});
		$S->save_property('COMPANY_PHONE',$ZOOVY::cgiv->{'COMPANY_PHONE'});
		$S->save_property('COMPANY_EMAIL',$ZOOVY::cgiv->{'COMPANY_EMAIL'});
		$S->save_property('COMPANY_WEBSITE',$ZOOVY::cgiv->{'COMPANY_WEBSITE'});
		$S->save_property('PARTNER_USERNAME',$ZOOVY::cgiv->{'PARTNER_USERNAME'});
		$S->save_property('PARTNER_PASSWORD',$ZOOVY::cgiv->{'PARTNER_PASSWORD'});

		if ($ACTION eq 'SAVE-API-EDIT') {
			print STDERR "API_INVHDR: ".$ZOOVY::cgiv->{'API_INVHDR'}."\n";
			$S->save_property('DISPATCH_ON_CREATE', $ZOOVY::cgiv->{'DISPATCH_ON_CREATE'});
			$S->save_property('DISPATCH_FULL_ORDER', $ZOOVY::cgiv->{'DISPATCH_FULL_ORDER'});
			$S->save_property('API_VERSION',$ZOOVY::cgiv->{'API_VERSION'});
			$S->save_property('API_INVURL',$ZOOVY::cgiv->{'API_INVURL'});
			$S->save_property('API_INVHDR',$ZOOVY::cgiv->{'API_INVHDR'});
			$S->save_property('API_SHIPURL',$ZOOVY::cgiv->{'API_SHIPURL'});
			$S->save_property('API_ORDERURL',$ZOOVY::cgiv->{'API_ORDERURL'});
			}

		$S->save();
		$info = $S->{'INFO'};	## cheap hack since $info will not have been updated.
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited Company Information for $CODE</font><br><br>";
		}

   $ACTION = 'EDIT';
   }

##
## only used for JEDI
## 
if ($ACTION eq 'PAYMENT-SAVE') {
	my ($S) = SUPPLIER->new($USERNAME, $CODE);
	my $ERRORS = '';

	print STDERR "saving ACCT_PAYMENT_TYPE: ".$ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'}."\n";
	$S->save_property('ACCT_PAYMENT_TYPE',$ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'});

	## validation on Credit Card info
	if ($ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'} eq 'CREDIT') {
		require ZPAY;
		## check Credit Card number
		unless (&ZPAY::cc_verify_checksum($ZOOVY::cgiv->{'ACCT_CC_NUMBER'}) &&
				  &ZPAY::cc_verify_length($ZOOVY::cgiv->{'ACCT_CC_NUMBER'}) ) { 
			$ERRORS .= 'Credit card number must be a valid credit card number.<br>' 
			}
		
		## check credit card type is valid
		print STDERR "username: ".lc($S->fetch_property('JEDI_USERNAME'))."\n";
		unless (&ZPAY::cc_verify_type_for_merchant(lc($S->fetch_property('JEDI_USERNAME')),$ZOOVY::cgiv->{'ACCT_CC_NUMBER'})) {
			$ERRORS .= 'Credit card is not a type this merchant accepts.<br>';
			}

		## check expiration date
		my ($mm, $yyyy) = split("-", $ZOOVY::cgiv->{'ACCT_CC_EXP_DATE'});
		print STDERR "month: $mm year: $yyyy\n";
		unless (&ZPAY::cc_verify_expiration($mm,$yyyy)) {
			$ERRORS .= 'Credit card has expired or is invalid.<br>';
			}

		unless (&ZPAY::cc_verify_cvvcid($ZOOVY::cgiv->{'ACCT_CC_NUMBER'},$ZOOVY::cgiv->{'ACCT_CC_CODE'})) {
			$ERRORS .= 'CID or CVV number is invalid for card type.<br>';
			}
		}
	
	elsif ($ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'} eq 'PAYPAL') {
		require ZTOOLKIT;
		unless (&ZTOOLKIT::validate_email($ZOOVY::cgiv->{'ACCT_PAYPAL_EMAIL'})) {
			$ERRORS .= 'Paypal email is invalid.<br>';
			}
		}

	if ($ERRORS eq '') {
		$S->save_property('ACCT_CC_NUMBER',$ZOOVY::cgiv->{'ACCT_CC_NUMBER'});
		$S->save_property('ACCT_CC_EXP_DATE',$ZOOVY::cgiv->{'ACCT_CC_EXP_DATE'});
		$S->save_property('ACCT_CC_CODE',$ZOOVY::cgiv->{'ACCT_CC_CODE'});
		$S->save_property('ACCT_PAYPAL_EMAIL',$ZOOVY::cgiv->{'ACCT_PAYPAL_EMAIL'});

		print STDERR "Saving Supplier\n";
		$S->save();
		$info = $S->{'INFO'};	## cheap hack since $info will not have been updated.
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited Payment Information for $CODE</font><br><br>";
		}
	else { $GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='red'>$ERRORS</font><br><br>"; }

   $ACTION = 'PAYMENT-EDIT';
   }


##
## only used for JEDI
##
if ($ACTION eq 'PAYMENT-EDIT') {
	my ($S) = SUPPLIER->new($USERNAME, $CODE);
	$GTOOLS::TAG{'<!-- CODE -->'} = $CODE;
	$GTOOLS::TAG{'<!-- JEDI_CUSTOMER -->'} = $S->fetch_property('JEDI_CUSTOMER');
	
	$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_CREDIT -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_PAYPAL -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_PAYPAL_EMAIL -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_OTHER -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_CC_NUMBER -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_CC_EXP_DATE -->'} ="";
	$GTOOLS::TAG{'<!-- ACCT_CC_CODE -->'} = "";
	$GTOOLS::TAG{'<!-- PROFILE -->'} = ($info->{'PROFILE'})?$info->{'PROFILE'}:'DEFAULT';
	
	## get billing address
	my $address = ZOOVY::fetchmerchantns_attrib($USERNAME,$info->{'PROFILE'},'zoovy:company_name');
	$address .= "<br>".ZOOVY::fetchmerchantns_attrib($USERNAME,$info->{'PROFILE'},'zoovy:address1');
	$address .= (ZOOVY::fetchmerchantns_attrib($USERNAME,$info->{'PROFILE'},'zoovy:address2') ne '')?
			"<br>".ZOOVY::fetchmerchantns_attrib($USERNAME,$info->{'PROFILE'},'zoovy:address2'):'';
	$address .= "<br>".ZOOVY::fetchmerchantns_attrib($USERNAME,$info->{'PROFILE'},'zoovy:city');
	$address .= ", ".ZOOVY::fetchmerchantns_attrib($USERNAME,$info->{'PROFILE'},'zoovy:state');
	$address .= " ".ZOOVY::fetchmerchantns_attrib($USERNAME,$info->{'PROFILE'},'zoovy:zip');	
	$GTOOLS::TAG{'<!-- ADDRESS -->'} = $address;
	
	my $payment = ($ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'} eq '')?$info->{'ACCT_PAYMENT_TYPE'}:$ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'};
	if ($payment eq 'CREDIT') {
		$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_CREDIT -->'} = 'checked';
		$GTOOLS::TAG{'<!-- ACCT_CC_NUMBER -->'} = ($info->{'ACCT_CC_NUMBER'})?$info->{'ACCT_CC_NUMBER'}:$ZOOVY::cgiv->{'ACCT_CC_NUMBER'};
		$GTOOLS::TAG{'<!-- ACCT_CC_EXP_DATE -->'} = ($info->{'ACCT_CC_EXP_DATE'})?$info->{'ACCT_CC_EXP_DATE'}:$ZOOVY::cgiv->{'ACCT_CC_EXP_DATE'};
		$GTOOLS::TAG{'<!-- ACCT_CC_CODE -->'} = ($info->{'ACCT_CC_CODE'})?$info->{'ACCT_CC_CODE'}:$ZOOVY::cgiv->{'ACCT_CC_CODE'};
		}
	elsif ($payment eq 'PAYPAL') {
		$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_PAYPAL -->'} = "checked";
		$GTOOLS::TAG{'<!-- ACCT_PAYPAL_EMAIL -->'} = ($info->{'ACCT_PAYPAL_EMAIL'})?$info->{'ACCT_PAYPAL_EMAIL'}:$ZOOVY::cgiv->{'ACCT_PAYPAL_EMAIL'};
		}
	else {
		$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_OTHER -->'} = "checked";
		}


	$template_file = 'payment.shtml';
	push @BC, { name=>"Payment Setup" };
	}

##
## 
##
if (($ACTION eq 'EDIT') || ($ACTION eq 'JEDI-EDIT') || ($ACTION eq 'GENERIC-EDIT') || ($ACTION eq 'API-EDIT')) {
	$GTOOLS::TAG{'<!-- CODE -->'} = $CODE;
	$GTOOLS::TAG{'<!-- MARKUP -->'} = ($info->{'MARKUP'})?$info->{'MARKUP'}:$ZOOVY::cgiv->{'MARKUP'};

	## PROFILE addition
	my $profileref = &ZOOVY::fetchprofiles($USERNAME);
	my $selected_profile = ($info->{'PROFILE'})?$info->{'PROFILE'}:$ZOOVY::cgiv->{'PROFILE'};
	foreach my $profile (@{$profileref}) {
		my $selected = '';
		if ($profile eq $selected_profile) { $selected = "selected"; }
		$GTOOLS::TAG{'<!-- PROFILE -->'} .= qq~<option $selected value="$profile">$profile</option>~;
		} 

	$GTOOLS::TAG{'<!-- MODE -->'} = $info->{'MODE'};
	$GTOOLS::TAG{'<!-- COMPANY_PHONE -->'} = ($info->{'COMPANY_PHONE'})?$info->{'COMPANY_PHONE'}:$ZOOVY::cgiv->{'COMPANY_PHONE'};
	$GTOOLS::TAG{'<!-- COMPANY_EMAIL -->'} = ($info->{'COMPANY_EMAIL'})?$info->{'COMPANY_EMAIL'}:$ZOOVY::cgiv->{'COMPANY_EMAIL'};
	$GTOOLS::TAG{'<!-- COMPANY_NAME -->'} = ($info->{'COMPANY_NAME'})?$info->{'COMPANY_NAME'}:$ZOOVY::cgiv->{'COMPANY_NAME'};
	$GTOOLS::TAG{'<!-- COMPANY_ACCOUNT -->'} = ($info->{'COMPANY_ACCOUNT'})?$info->{'COMPANY_ACCOUNT'}:$ZOOVY::cgiv->{'COMPANY_ACCOUNT'};
	$GTOOLS::TAG{'<!-- COMPANY_WEBSITE -->'} = ($info->{'COMPANY_WEBSITE'})?$info->{'COMPANY_WEBSITE'}:$ZOOVY::cgiv->{'COMPANY_WEBSITE'};

	$GTOOLS::TAG{'<!-- CONFIGURE_SHIPPING -->'} = qq~<a href="index.cgi?ACTION=GENERIC-SHIPPING&CODE=$CODE">Click Here</a>~;
	$GTOOLS::TAG{'<!-- CONFIGURE_INVENTORY -->'} = qq~<a href="index.cgi?ACTION=GENERIC-INVENTORY&CODE=$CODE">Click Here</a>~;

	$GTOOLS::TAG{'<!-- PARTNER_USERNAME -->'} = ($info->{'PARTNER_USERNAME'})?$info->{'PARTNER_USERNAME'}:$ZOOVY::cgiv->{'PARTNER_USERNAME'};
	$GTOOLS::TAG{'<!-- PARTNER_PASSWORD -->'} = ($info->{'PARTNER_PASSWORD'})?$info->{'PARTNER_PASSWORD'}:$ZOOVY::cgiv->{'PARTNER_PASSWORD'};

	print STDERR "MODE: ".$info->{'MODE'}."\n";

	if ($info->{'MODE'} eq 'GENERIC') {
		$template_file = 'generic-edit.shtml';
		push @BC, { name=>"Generic Setup" };

		if ($info->{'FORMAT'} eq 'STOCK') { 
			$GTOOLS::TAG{'<!-- CONFIGURE_SHIPPING -->'} = "Stock Shipping uses your Zoovy store configuration"; 
			$GTOOLS::TAG{'<!-- CONFIGURE_INVENTORY -->'} = "<a href=\"index.cgi?ACTION=STOCK-INVENTORY&CODE=<!-- CODE -->\">Click Here</a>"; 
			}
		}
	elsif ($info->{'MODE'} eq 'ATLAST') {
		$template_file = 'atlast-edit.shtml';
		push @BC, { name=>"AtLast Setup" };
		}
	elsif ($info->{'MODE'} eq 'DOBA') {
		$template_file = 'doba-edit.shtml';
		push @BC, { name=>"DOBA Setup" };
		}
	elsif ($info->{'MODE'} eq 'SHIPWIRE') {
		$template_file = 'shipwire-edit.shtml';
		push @BC, { name=>"Shipwire Setup" };
		}
	elsif ($info->{'MODE'} eq 'QB') {
		$template_file = 'qb-edit.shtml';
		push @BC, { name=>"Quickbooks Setup" };
		}
	elsif ($info->{'MODE'} eq 'AMZ') {
		$template_file = 'amz-edit.shtml';
		push @BC, { name=>"Fulfillment by Amazon Setup" };
		}
	elsif ($info->{'MODE'} eq 'JEDI') {

		#my $prodsref = &PRODUCT::BATCH::list_by_attrib($USERNAME,'zoovy:prod_supplier',$CODE);
		#my $c = '';
		#foreach my $k (@{$prodsref}) {
		#	$c .= "<tr><td>$k</td></tr>";
		#	}
		#$GTOOLS::TAG{'<!-- PRODUCTS -->'} = $c;
		
		$GTOOLS::TAG{'<!-- JEDI_USERNAME -->'} = $info->{'JEDI_USERNAME'};
		$GTOOLS::TAG{'<!-- JEDI_CUSTOMER -->'} = $info->{'JEDI_CUSTOMER'};
		$template_file = 'jedi-edit.shtml';
		push @BC, { name=>"JEDI Setup" };
		}
	elsif ($info->{'MODE'} eq 'API') {

		$GTOOLS::TAG{'<!-- DISPATCH_WARNING -->'} = '';

		$GTOOLS::TAG{'<!-- DISPATCH_ON_CREATE_0 -->'} = ($info->{'DISPATCH_ON_CREATE'}==0)?'selected':'';
		$GTOOLS::TAG{'<!-- DISPATCH_ON_CREATE_1 -->'} = ($info->{'DISPATCH_ON_CREATE'}==1)?'selected':'';


		if ($info->{'DISPATCH_ON_CREATE'}==1) {
		$GTOOLS::TAG{'<!-- DISPATCH_WARNING -->'} .= qq~
<i>WARNING: Normally orders should NOT be processed/dispatched until they have been successfully PAID, ie the customer's
order should not be shipped until you have received their funds, please mark "No" for this mode. If you are 
using a Supplier that will perform charging on your behalf, you should select "YES". If there's any confusion with 
this setting, please select "NO"!!!</i><br>
~;		
			}

		$GTOOLS::TAG{'<!-- DISPATCH_FULL_ORDER_0 -->'} = ($info->{'DISPATCH_FULL_ORDER'}==0)?'selected':'';
		$GTOOLS::TAG{'<!-- DISPATCH_FULL_ORDER_1 -->'} = ($info->{'DISPATCH_FULL_ORDER'}==1)?'selected':'';

		if ($info->{'DISPATCH_FULL_ORDER'}==1) {
		$GTOOLS::TAG{'<!-- DISPATCH_WARNING -->'} .= qq~
<i>WARNING: Normally Full orders should NOT be dispatched - the program receiving the order will need to be 
aware of how to deal with multiple suppliers, and how to handle discount codes. 
Under most circumstances you only want to send the portion of the order which is directly relevant to the supplier receiving it.</i>
~;		
			}
		
	
		$GTOOLS::TAG{'<!-- API_ORDERURL -->'} = $info->{'API_ORDERURL'};	
		$GTOOLS::TAG{'<!-- API_INVURL -->'} = $info->{'API_INVURL'};	
		$GTOOLS::TAG{'<!-- API_INVHDR -->'} = $info->{'API_INVHDR'};	
		$GTOOLS::TAG{'<!-- API_SHIPURL -->'} = $info->{'API_SHIPURL'};	
		$GTOOLS::TAG{'<!-- API_VERSION_1 -->'} = ($info->{'API_VERSION'}==1)?'selected':'';	
		$GTOOLS::TAG{'<!-- API_VERSION_4 -->'} = ($info->{'API_VERSION'}==4)?'selected':'';	
		$GTOOLS::TAG{'<!-- API_VERSION_108 -->'} = ($info->{'API_VERSION'}==108)?'selected':'';	

		

		if ($info->{'API_INVURL'} ne '') {
			my $csvurl = "http://static.zoovy.com/merchant/".$USERNAME."/".$CODE."_inv.csv";
			$GTOOLS::TAG{'<!-- API_INVCSV -->'} = qq~ (<a href="$csvurl">view</a>)~;
			}
	
		$template_file = 'api-edit.shtml';
		push @BC, { name=>"API Setup" };			
		}
				
	}


	

##
##
##
if ($ACTION eq 'REMOVE') {
	$template_file = 'remove-confirm.shtml';
	push @BC, { name=>"Remove" };
	}

if ($ACTION eq 'REMOVE-CONFIRM') {
	my $qtCODE = $dbh->quote($CODE);
	my $pstmt = "delete from SUPPLIERS where MID=$MID and CODE=$qtCODE";
	#print STDERR $pstmt."\n";
	$dbh->do($pstmt);
	$ACTION = '';

	require PRODUCT::BATCH;
	my $arref = &PRODUCT::BATCH::list_by_attrib($USERNAME,'zoovy:prod_supplier',$CODE);

	if ($ZOOVY::cgiv->{'products'} == 0) {
		## remove products with supplier.
		foreach my $pid (@{$arref}) {
			&ZOOVY::deleteproduct($USERNAME,$pid);
			}
		}
	elsif ($ZOOVY::cgiv->{'products'} == 1) {
		## convert to normal products.
		foreach my $pid (@{$arref}) {
			my $prodref = &ZOOVY::fetchproduct_as_hashref($USERNAME,$pid);
			delete $prodref->{'zoovy:virtual'};
			delete $prodref->{'zoovy:prod_supplier'};
			delete $prodref->{'zoovy:prod_supplierid'};
			$prodref->{'zoovy:inv_enable'} -= ($prodref->{'zoovy:inv_enable'} & 16);
			delete $prodref->{'zoovy:prod_supplierid'};
			delete $prodref->{'zoovy:shipping_apiurl'};
			delete $prodref->{'zoovy:inventory_apiurl'};
			delete $prodref->{'zoovy:order_apiurl'};
			&ZOOVY::saveproduct_from_hashref($USERNAME,$pid,$prodref);
			}
		}
	elsif ($ZOOVY::cgiv->{'products'} == 2) {
		## Blah.. leave everything alone!
		}

	}

##
## 
##
if ($ACTION eq '') {
	my $c = '';
	
	my $pstmt = "select CODE,COMPANY_NAME,MODE,FORMAT from SUPPLIERS where MID=$MID";
	my $sth = $dbh->prepare($pstmt);
	$sth->execute();
	my $count = 0;
	while ( my ($code,$name,$mode,$format) = $sth->fetchrow() ) {
		$count++;
		if ($mode eq '') {  $mode = '**INVALID**';  }
		$c .= "<tr class=\"table_bg".(($count%2)+1)."\">".
				
				"<td nowrap><a href=\"index.cgi?ACTION=EDIT&CODE=$code\">$code</a> </td>".
				"<td nowrap>$name</td>".
				"<td nowrap>[<a href=\"index.cgi?ACTION=ORDERS&CODE=$code\">Orders</a>] | [<a href=\"index.cgi?ACTION=PRODUCTS&CODE=$code\">Products</a>]</td>".
				"<td nowrap>$mode</td><td nowrap>$format</td></tr>";
		}
	$sth->finish();
	
	if ($c eq '') {
		$GTOOLS::TAG{'<!-- SUPPLIERS -->'} = '<tr class="table_bg1"><td colspan="5"><i>No suppliers currently exist.</i></td>'; 
		}
	else {
		$GTOOLS::TAG{'<!-- SUPPLIERS -->'} = "$c";
		}
	push @BC, { name=>"Suppliers" };
	}




&GTOOLS::output(
	'file'=>$template_file,
	'title'=>$title,
	'header'=>1,
	'help'=>"#50694",
	'bc'=>\@BC,
	'tabs'=>\@TABS,
	);

&DBINFO::db_zoovy_close();
