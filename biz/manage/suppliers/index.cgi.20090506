#!/usr/bin/perl

use lib "/httpd/modules";
use GTOOLS;
use ZOOVY;
use SUPPLIER;
use SUPPLIER::STOCK;
use INVENTORY;
use ZTOOLKIT;
use ORDER;
use LUSER;
use PRODUCT::BATCH;
use Data::Dumper;
use strict;
use SITE::EMAILS;

my $title = "Utilities: Supply Chain Management";
my $template_file = 'index.shtml';	
my $q = new CGI; 

## authenticate
require LUSER;
my ($LU) = LUSER->authenticate(flags=>'_ADMIN');
if (not defined $LU) { exit; }

my ($MID,$USERNAME,$LUSERNAME,$FLAGS,$PRT) = $LU->authinfo();
if ($MID<=0) { exit; }

## Supply Chain (SC) Flag required
if ($FLAGS !~ /,SC,/) {
	my ($helplink, $helphtml) = GTOOLS::help_link('Supply Chain Webdoc', 50694);
	$GTOOLS::TAG{'<!-- WEBDOC -->'} = $helphtml;  
	$template_file = 'deny.shtml'; 
	}


my $dbh = &DBINFO::db_zoovy_connect();
my $VERB = $ZOOVY::cgiv->{'VERB'};
## hack until CUSTOMER MGR can be fixed and changed to VERB vs ACTION
if ($ZOOVY::cgiv->{'ACTION'} ne '') { $VERB = $ZOOVY::cgiv->{'ACTION'}; }

my $CODE = uc($ZOOVY::cgiv->{'CODE'});

## define SUPPLIER
my $S = undef;
##
## only grab SUPPLIER (and info) if this is a pre-existing SUPPLIER
##  (does profile need to be added here??)
if ($CODE ne '' && $VERB ne 'NEW-SAVE') { 
	($S) = SUPPLIER->new($USERNAME,$CODE); 
	}
print STDERR "SUPPLIER: VERB: $VERB CODE: $CODE\n";


## breadcrumbs
my @BC = ();
push @BC, { 'name'=>'Utilities', 'link'=>'/biz/utilities', 'target'=>'_top'};
push @BC, { 'name'=>'Supply Chain', link=>'/biz/utilities/suppliers', 'target'=>'_top'};
if (defined $S) { push @BC, { name=>"$CODE", link=>"/biz/manage/suppliers/index.cgi?VERB=EDIT&CODE=$CODE", target=>'_top' }; }

## TABS
my @TABS = ();
if ($CODE ne '') {
	push @TABS, { 'name'=>"$CODE Setup", link=>"?VERB=EDIT&CODE=$CODE" };
	push @TABS, { 'name'=>"$CODE Products", link=>"?VERB=PRODUCTS&CODE=$CODE" };
	push @TABS, { 'name'=>"$CODE Orders", link=>"?VERB=ORDERS&CODE=$CODE" };
	}
else {
	push @TABS, { 'name'=>"Non-Confirmed Orders", link=>"?VERB=NON_CONF_ORDERS" };	
	}


$GTOOLS::TAG{'<!-- CODE -->'} = $CODE;


##
## SAVE New Supplier
##
if ($VERB eq 'NEW-SAVE') {
	require WHOLESALE;
	my $ERROR = '';

	## create directory to store SC orders
	my $path = &ZOOVY::resolve_userpath($USERNAME);
	mkdir($path.'/SC',0777);

	if (!-d $path.'/SC') {
		$ERROR = 'Could not create directory for supply chain orders.';
		}

	## validation checks
	if ($CODE eq '') { $ERROR .= "<br>Supplier Code cannot be blank"; }
	if (SUPPLIER::exists($USERNAME,$CODE)) { $ERROR .= "<br>Supplier Code [$CODE] already exists"; }
	if ($CODE !~ /^([0-9A-Z]+)$/) { $ERROR .= "<br>Supplier Code is invalid."; }
	if ($CODE eq 'GIFTCARD') { $ERROR .= "The Code 'GIFTCARD' is reserved."; }
	if (not &WHOLESALE::validate_formula($ZOOVY::cgiv->{'MARKUP'})) { $ERROR .= "<br>Markup formula does not appear to be valid."; }
	if ($ZOOVY::cgiv->{'FORMAT'} eq '') {	$ERROR .= "<br>Supplier Order Format does not appear to be set";}
	if ($ZOOVY::cgiv->{'MODE'} eq '') { $ERROR .= "<br>Supplier Data Integration Type does not appear to be set"; }
	if (uc($ZOOVY::cgiv->{'MODE'}) eq 'API' && $FLAGS !~ /,API/) { $ERROR .= "<br>API bundle needs to be added to your account."; }

	if ($ERROR eq '') {
		my ($S) = SUPPLIER->new($USERNAME,$CODE,NEW=>1);
		$S->save_property('MARKUP', $ZOOVY::cgiv->{'MARKUP'});
		$S->save_property('PROFILE', $ZOOVY::cgiv->{'PROFILE'});

		if (uc($ZOOVY::cgiv->{'MODE'}) =~ /PARTNER_(.*)/) {
			my $PARTNER = $1;
			$S->save_property('MODE','PARTNER');
			$S->save_property('PARTNER',$PARTNER);
			}
		else {
			$S->save_property('MODE',uc($ZOOVY::cgiv->{'MODE'}));
			}
		$S->save_property('FORMAT',uc($ZOOVY::cgiv->{'FORMAT'}));	
		$S->save_property('CREATED_GMT',time());	
		
		## ADD A JEDI SUPPLIER
		if (uc($ZOOVY::cgiv->{'MODE'}) eq 'JEDI') {
			require SUPPLIER::JEDI;

			my ($jedi_error) = SUPPLIER::JEDI::setup($USERNAME,$ZOOVY::cgiv->{'.jedi.username'},$ZOOVY::cgiv->{'.jedi.email'},$ZOOVY::cgiv->{'.jedi.email'});
			if ($jedi_error ne '') { $ERROR .= "<br>$jedi_error"; }

			else{
				$S->save_property('NAME',&ZOOVY::fetchmerchant_attrib($ZOOVY::cgiv->{'.jedi.username'},'zoovy:company_name',''));
				$S->save_property('PHONE',&ZOOVY::fetchmerchant_attrib($ZOOVY::cgiv->{'.jedi.username'},'zoovy:company_phone',''));
				$S->save_property('EMAIL',&ZOOVY::fetchmerchant_attrib($ZOOVY::cgiv->{'.jedi.username'},'zoovy:company_email',''));
				$S->save_property('.jedi.mid',$ZOOVY::cgiv->{'.jedi.mid'});
				$S->save_property('.jedi.name',$ZOOVY::cgiv->{'.jedi.username'});
				$S->save_property('.jedi.customer',$ZOOVY::cgiv->{'.jedi.email'});

				$S->save();
				}
			} ## end of JEDI SUPPLIER ADD
		
		## ADD A NON-JEDI SUPPLIER | API OR GENERIC
		else {
			## validation checks (this info is not needed for JEDI)
			if ($ZOOVY::cgiv->{'NAME'} eq '') { $ERROR .= "<br>Name is required."; }
			if ($ZOOVY::cgiv->{'ACCOUNT'} eq '') {	$ERROR .= "<br>Account is required."; }
			if (&ZTOOLKIT::validate_phone($ZOOVY::cgiv->{'PHONE'}) == 0) { $ERROR .= "<br>Phone is invalid."; }
			if (&ZTOOLKIT::validate_email($ZOOVY::cgiv->{'EMAIL'}) == 0) { $ERROR .= "<br>Email is invalid."; }
			if ($ZOOVY::cgiv->{'WEBSITE'} eq '') {	$ERROR .= "<br>Website is required."; }
			
			if($ERROR eq ''){
				$S->save_property('NAME',$ZOOVY::cgiv->{'NAME'});
				$S->save_property('ACCOUNT',$ZOOVY::cgiv->{'ACCOUNT'});
				$S->save_property('PHONE',$ZOOVY::cgiv->{'PHONE'});
				$S->save_property('EMAIL',$ZOOVY::cgiv->{'EMAIL'});
				$S->save_property('WEBSITE',$ZOOVY::cgiv->{'WEBSITE'});
	
				$S->save();
				}
			}
		$LU->log('SUPPLIER.SAVE',"[CODE: $CODE] was saved",'INFO');
		}

	## MESSAGE back to merchant
	if ($ERROR ne '') {	
		$GTOOLS::TAG{'<!-- RESULT -->'} = &GTOOLS::errmsg($ERROR);
		$VERB = 'NEW';
		}
	else {	
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Your Supplier has been successfully added.</font>";
		$VERB = 'EDIT';
		}
	}


##
## Form for creating new Supplier
## 
## note: USETHEFORCE is passed to automatically setup a new JEDI business
##
if (($VERB eq 'NEW') || ($VERB eq 'USETHEFORCE')) { 
	$template_file = 'new.shtml';
	
	print STDERR "Adding new supplier\n";
	$GTOOLS::TAG{'<!-- CODE -->'} = ($ZOOVY::cgiv->{'CODE'})?$ZOOVY::cgiv->{'CODE'}:'';
	$GTOOLS::TAG{'<!-- MODE_JEDI -->'} = '';
	$GTOOLS::TAG{'<!-- MODE_GENERIC -->'} = '';
	$GTOOLS::TAG{'<!-- MODE_API -->'} = '';
	$GTOOLS::TAG{'<!-- PARTNER_ATLAST -->'} = '';
	$GTOOLS::TAG{'<!-- PARTNER_SHIPWIRE -->'} = '';
	$GTOOLS::TAG{'<!-- PARTNER_DOBA -->'} = '';
	$GTOOLS::TAG{'<!-- PARTNER_QB -->'} = '';
	$GTOOLS::TAG{'<!-- PARTNER_AMZ -->'} = '';

	## http://www.zoovy.com/biz/utilities/suppliers/index.cgi?VERB=USETHEFORCE&USERNAME=ZSMC&MID=16804&LOGIN=brian@zoovy.com
	## IF VERB eq USETHEFORCE
	if ($VERB eq 'USETHEFORCE') {
		$GTOOLS::TAG{'<!-- MODE_JEDI -->'} = 'checked';
		$GTOOLS::TAG{'<!-- JEDI_USER -->'} = ($ZOOVY::cgiv->{'USERNAME'})?$ZOOVY::cgiv->{'USERNAME'}:'';
		$GTOOLS::TAG{'<!-- JEDI_MID -->'} = ($ZOOVY::cgiv->{'MID'})?$ZOOVY::cgiv->{'MID'}:'';
		$GTOOLS::TAG{'<!-- JEDI_EMAIL -->'} = ($ZOOVY::cgiv->{'LOGIN'})?$ZOOVY::cgiv->{'LOGIN'}:'';
		}
	else {
		$GTOOLS::TAG{'<!-- JEDI_USER -->'} = ($ZOOVY::cgiv->{'.jedi.username'})?$ZOOVY::cgiv->{'.jedi.username'}:'';
		$GTOOLS::TAG{'<!-- JEDI_MID -->'} = ($ZOOVY::cgiv->{'.jedi.mid'})?$ZOOVY::cgiv->{'.jedi.mid'}:'';
		$GTOOLS::TAG{'<!-- JEDI_EMAIL -->'} = ($ZOOVY::cgiv->{'.jedi.email'})?$ZOOVY::cgiv->{'.jedi.email'}:'';
		}

	if ($ZOOVY::cgiv->{'MODE'}) {
		$GTOOLS::TAG{'<!-- MODE_'.($ZOOVY::cgiv->{'MODE'}).' -->'} = 'checked';
		}

	$GTOOLS::TAG{'<!-- NAME -->'} = ($ZOOVY::cgiv->{'NAME'})?$ZOOVY::cgiv->{'NAME'}:'';
	$GTOOLS::TAG{'<!-- ACCOUNT -->'} = ($ZOOVY::cgiv->{'ACCOUNT'})?$ZOOVY::cgiv->{'ACCOUNT'}:'';
	$GTOOLS::TAG{'<!-- PHONE -->'} = ($ZOOVY::cgiv->{'PHONE'})?$ZOOVY::cgiv->{'PHONE'}:'';
	$GTOOLS::TAG{'<!-- EMAIL -->'} = ($ZOOVY::cgiv->{'EMAIL'})?$ZOOVY::cgiv->{'EMAIL'}:'';
	$GTOOLS::TAG{'<!-- WEBSITE -->'} = ($ZOOVY::cgiv->{'WEBSITE'})?$ZOOVY::cgiv->{'WEBSITE'}:'';	
	
	$GTOOLS::TAG{'<!-- MARKUP -->'} = ($ZOOVY::cgiv->{'MARKUP'})?$ZOOVY::cgiv->{'MARKUP'}:'';

	## PROFILE addition
	my $profileref = &ZOOVY::fetchprofiles($USERNAME);
	foreach my $profile (@{$profileref}) {
		my $selected = '';
		if ($profile eq 'DEFAULT') { $selected = "selected"; }
		$GTOOLS::TAG{'<!-- PROFILE -->'} .= qq~<option $selected value="$profile">$profile</option>~;
		} 
	
	$GTOOLS::TAG{'<!-- FORMAT_NONE -->'} = ($ZOOVY::cgiv->{'FORMAT'} eq 'NONE')?'checked':'';
	$GTOOLS::TAG{'<!-- FORMAT_STOCK -->'} = ($ZOOVY::cgiv->{'FORMAT'} eq 'STOCK')?'checked':'';
	$GTOOLS::TAG{'<!-- FORMAT_FULFILL -->'} = ($ZOOVY::cgiv->{'FORMAT'} eq 'FULFILL')?'checked':'';
	$GTOOLS::TAG{'<!-- FORMAT_DROPSHIP -->'} = ($ZOOVY::cgiv->{'FORMAT'} eq 'DROPSHIP')?'checked':'';

	push @BC, { name=>'Add New Supplier' };
	}


##
## Remove Supplier 
##
if ($VERB eq 'REMOVE') {
	$template_file = 'remove-confirm.shtml';
	push @BC, { name=>"Remove" };
	}

if ($VERB eq 'REMOVE-CONFIRM') {
	$VERB = '';
	SUPPLIER::remove_supplier($USERNAME,$CODE,products=>$ZOOVY::cgiv->{'products'});
	}


############### INVENTORY
##
## "Update Now" button
##
if ($VERB eq 'UPDATE-INVENTORY') {
	my $FORMAT = $S->fetch_property('FORMAT');

	## STOCK
	if ($FORMAT eq 'STOCK') {
		my $itemsref = SUPPLIER::STOCK::add_open_items($USERNAME,$CODE);
		
		my $count = scalar(keys %{$itemsref});		
		
		if ($count == 0) {
			$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=\"blue\">$CODE items did not need updating at this time ".
														  "(none of the minimum qtys were below in stock qtys).</font><br>";
			}
		else {
			my $items = '';
			foreach my $item (keys %{$itemsref}) {
				$items .= $item.": $itemsref->{$item}<br>";
				}
			use Data::Dumper;
		
			$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=\"blue\">$CODE Successfully updated the following items:</font><br>$items<p>";
			}
		}
	## GENERIC
	else {
		require SUPPLIER::GENERIC;
		&SUPPLIER::GENERIC::update_inventory($S);
		
		my $count = $S->fetch_property('.inv.update_rows');
		my $error = $S->fetch_property('.inv.update_errors');
		my $gmt = ZTOOLKIT::pretty_date($S->fetch_property('.inv.update_gmt'),1);

		$GTOOLS::TAG{'<!-- RESULT -->'} = "Inventory updated $gmt<br>";
		if ($count == 0) { $GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color='red'>ERRORS: $error</font>"; }
		else { $GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color=\"blue\">Successfully imported $count items.</font>"; }
		}

	$VERB = 'INVENTORY';
	}

##
## save Inventory Settings for automatic inventory updates
##  (only used for GENERIC)
##
if ($VERB eq 'SAVE-INVENTORY') {
  	$S->save_property('USERNAME',$USERNAME);
	$S->save_property('.inv.url',$ZOOVY::cgiv->{'GEN_INVURL'});
   $S->save_property('.inv.type',$ZOOVY::cgiv->{'GEN_INVTYPE'});
   $S->save_property('.inv.updateauto',$ZOOVY::cgiv->{'GEN_INVAUTO'});
	$S->save_property('.inv.type_other',$ZOOVY::cgiv->{'GEN_INVTYPE_OTHER'});
   $S->save_property('.inv.pos.sku',$ZOOVY::cgiv->{'GEN_INVSKU'});
   $S->save_property('.inv.pos.instock',$ZOOVY::cgiv->{'GEN_INVSTOCK'});
   $S->save_property('.inv.pos.ship',$ZOOVY::cgiv->{'GEN_INVSHIP'});
   $S->save_property('.inv.pos.avail',$ZOOVY::cgiv->{'GEN_INVAVAIL'});
   $S->save_property('.inv.pos.cost',$ZOOVY::cgiv->{'GEN_INVCOST'});
   $S->save();

   $GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited inventory for $CODE</font><br><br>";
   $VERB = 'INVENTORY';

	$LU->log('SUPPLIER.INVENTORY.SAVE',"[CODE: $CODE] inventory settings were updated",'INFO');
	}

##
## displays main Inventory configuration page
##
## inventory updates are available for STOCK & GENERIC
##	-- note: STOCK updates are way simple and manual
##
if ($VERB eq 'INVENTORY') {
	my $FORMAT = $S->fetch_property('FORMAT');

	## STOCK inventory
	##  just display UPDATE-NOW button
	if ($FORMAT eq 'STOCK') { $template_file = 'stock-inventory.shtml'; }

	## GENERIC inventory
	else {
		## Separation Type
		$GTOOLS::TAG{'<!-- INV_TYPE_CSV -->'} = ($S->fetch_property('.inv.type') eq 'CSV')?'selected':'';
		$GTOOLS::TAG{'<!-- INV_TYPE_TAB -->'} = ($S->fetch_property('.inv.type') eq 'TAB')?'selected':'';

		## Other Separation type (#,^)	
		if($S->fetch_property('.inv.type') eq 'OTHER'){ 
			$GTOOLS::TAG{'<!-- INV_TYPE_OTHER -->'} = 'selected'; 
			$GTOOLS::TAG{'<!-- GEN_INTYPE_OTHER -->'} = $S->fetch_property('.inv.type_other'); 
			}
		else{ 
			$GTOOLS::TAG{'<!-- INV_TYPE_OTHER -->'} = ''; 
			$GTOOLS::TAG{'<!-- GEN_INTYPE_OTHER -->'} = ''; 
			}
	
		$GTOOLS::TAG{'<!-- INV_AUTO_NO -->'} = ($S->fetch_property('.inv.updateauto') == 0)?'selected':'';
		$GTOOLS::TAG{'<!-- INV_AUTO_YES -->'} = ($S->fetch_property('.inv.updateauto') == 1)?'selected':'';
 		$GTOOLS::TAG{'<!-- GEN_INVURL -->'} = $S->fetch_property('.inv.url');
 		$GTOOLS::TAG{'<!-- GEN_INVSKU -->'} = $S->fetch_property('.inv.pos.sku');
 		$GTOOLS::TAG{'<!-- GEN_INVSTOCK -->'} = $S->fetch_property('.inv.pos.instock');
 		$GTOOLS::TAG{'<!-- GEN_INVSHIP -->'} = $S->fetch_property('.inv.pos.ship');
 		$GTOOLS::TAG{'<!-- GEN_INVAVAIL -->'} = $S->fetch_property('.inv.pos.avail');
 		$GTOOLS::TAG{'<!-- GEN_INVCOST -->'} = $S->fetch_property('.inv.pos.cost');

		my $count = $S->fetch_property('.inv.update_rows');
		my $errors = $S->fetch_property('.inv.update_errors');
		my $gmt = ZTOOLKIT::pretty_date($S->fetch_property('.inv.update_gmt'),1);

		$GTOOLS::TAG{'<!-- RESULT -->'} = "Inventory updated $gmt<br>";
		if ($count == 0) { $GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color='red'>ERRORS: $errors</font>"; 	}
		else { $GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color=\"blue\">Successfully imported $count items.</font>"; }

   	$template_file = 'inventory.shtml';
		}

   push @BC, { name=>"Config Inventory" };

	}

########### end of INVENTORY



########### PRODUCTS

##
## Saves a CSV import for a GENERIC supplier
##
if ($VERB eq 'SAVE-IMPORT') {
	my $ERROR = 0;
	my $BUFFER = '';
	my ($fieldref,$lineref,$optionsref);
	
	my $filename = $q->param("GEN_PRODFILE");
	my $url = $q->param("GEN_PRODURL");

	## get contents from client file
	if ($filename ne '') {
	
		my $fh = $q->upload("GEN_PRODFILE");
	
		## excel file
		if ($filename =~ /\.xls$/i) { 
			$ERROR = 1; 	
			$GTOOLS::TAG{'<!-- RESULT -->'} = "Filename has an .xls extension - should be .csv"; 
			}
		## zipped file
		elsif ($filename =~ /\.zip$/i) { 
			while (<$fh>) { $BUFFER .= $_; }
			require Archive::Zip;
			my $zip = Archive::Zip->new();
			open F, ">/tmp/$USERNAME-csv.zip";
			print F $BUFFER;
			close F;
			$zip->read("/tmp/$USERNAME-csv.zip");
			# $zip->readFromFileHandle($fh);
			my @names = $zip->memberNames();
			foreach my $m (@names) {
				next unless (($m =~ /.txt$/i) || ($m =~ /.csv/i));
				$BUFFER = $zip->contents($m);
				}
			}
		## regular file
		else {
			print STDERR "getting content from $filename\n";
			#while (<$fh>) { $BUFFER .= $_; print STDERR "BUFFER: $BUFFER\n";}
			while (<$filename>) { $BUFFER .= $_; }
			}
		
		## no contents
		if (length($BUFFER)<10) { 
			$ERROR = 1; 
			$GTOOLS::TAG{'<!-- RESULT -->'} = "File $filename had no contents.\n"; 
			}

		## find header
		if (not $ERROR) {
			require ZCSV;
			my @header = ();
			my $cols = 10;
			for (my $n=0;$n<$cols;$n++) {
				$header[$n] = $ZOOVY::cgiv->{'GEN_PROD'.$n} if ($ZOOVY::cgiv->{'GEN_PROD'.$n} ne '');
				}
			

			#print STDERR "Header: ".Dumper(@header);
			## find header in file
			if (scalar(@header) == 0) {
				($fieldref,$lineref,$optionsref) = &ZCSV::readHeaders($BUFFER);
				}
			
			## declared in UI
			else {
				require SUPPLIER::GENERIC;
				$fieldref = \@header;
				($fieldref, $lineref, $ERROR) = SUPPLIER::GENERIC::import_prods($USERNAME, $CODE, $fieldref, 'FILE', $BUFFER);
				}
				
			}
		}
	
	## get contents from URL
	## this needs testing
	elsif ($url ne '') {
		require SUPPLIER::GENERIC;
		($fieldref, $lineref, $ERROR) = SUPPLIER::GENERIC::import_prods($USERNAME, $CODE, undef, 'URL', $url);
	
		#print STDERR Dumper($fieldref);
		#print STDERR Dumper($lineref->[0], $lineref->[1]);
		}

	if (not $ERROR) {
		require ZCSV::PRODUCT;
		#require IMPORT;
		#$optionsref->{'MODE'} = $MODE;
		$optionsref->{'SUPPLIER'} = $CODE;
		$optionsref->{'TYPE'} = 'SUPPLIER';
		if (defined $q->param('ALLOW_CRLF')) { $optionsref->{'ALLOW_CRLF'}++; }

		$IMPORT::SILENT = 1;

		#print STDERR Dumper($fieldref,$lineref,$optionsref);
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<br><pre>Filter ".Dumper($fieldref,$lineref,$optionsref)."</pre>";

		&ZCSV::logImport($USERNAME,$LU,$fieldref,$lineref,$optionsref);
		
		my ($lines, $output) = &ZCSV::PRODUCT::parseproduct($LU,$fieldref,$lineref,$optionsref);
			
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<font color='blue'>Successfully imported $lines lines</font><br>";
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<br>$output<br>";
		}
	else {
		$GTOOLS::TAG{'<!-- RESULT -->'} .= "<br><font color='red'>$ERROR</font><br>";
		}

	print STDERR "$GTOOLS::TAG{'<!-- RESULT -->'}\n";
	$VERB = 'IMPORT';
	}

##
##	Displays the generic CSV import screen
##
if ($VERB eq 'IMPORT') {

	## REIMPORT of WATCHLISTS
	## update status, status notes, process all callbacks, log it
	if ($S->fetch_property('PARTNER') eq 'DOBA') {
		## reimport only runable by SUPPORT
		if ($LUSERNAME eq 'SUPPORT') {
			require SUPPLIER::DOBA;
			SUPPLIER::DOBA::reimport_watchlists($USERNAME,$LUSERNAME,$S);
			}
		$VERB = 'EDIT';
		}

	else {
		$GTOOLS::TAG{'<!-- GEN_PRODDATA_URL -->'} = '';
		$GTOOLS::TAG{'<!-- GEN_PRODDATA_FILE -->'} = '';
		$GTOOLS::TAG{'<!-- GEN_PRODURL -->'} = '';
  		$GTOOLS::TAG{'<!-- GEN_PRODFILE -->'} = '';

		for (my $n=0;$n<16;$n++) { $GTOOLS::TAG{'<!-- GEN_PROD'.$n.' -->'} = ''; }

		my ($helplink, $helphtml) = GTOOLS::help_link('Advanced Product Import Guide', 50285);
		$GTOOLS::TAG{'<!-- WEBDOC -->'} = $helphtml;
	
		$template_file = 'import.shtml';
		push @BC, { name=>'Import Products' };
		}
	}

## Disassociate product from SUPPLIER
## (this doesn't remove product from Zoovy Store)
if ($VERB eq 'DISASSOCIATE') {
	my @prods = ();
	foreach my $var (keys %{$ZOOVY::cgiv}){
		next unless ($var =~ /^SKU_/);
		push @prods, $ZOOVY::cgiv->{$var};
		}

	if (scalar(@prods) > 0) {
		SUPPLIER::disassociate_products($USERNAME, $ZOOVY::cgiv->{'CODE'}, \@prods);
		}

	$VERB = 'PRODUCTS';	
	}


##
##
##
if ($VERB eq 'PRODUCTS') {
	require POGS;

	my ($sup_to_prodref,$prod_to_supref) = $S->fetch_supplier_products();
	my @prods = (sort keys %{$prod_to_supref});
	my $c = '';

	my $PAGE = int($ZOOVY::cgiv->{'PAGE'});	## current page we are on, starts at zero.
	my $PAGESIZE = 500;
	my $PAGES = int(scalar(@prods)/$PAGESIZE);
	$GTOOLS::TAG{'<!-- PAGES -->'} = $PAGES;	
	$GTOOLS::TAG{'<!-- PAGE -->'} = $PAGE+1;
	
	if ($PAGE+1>1) {
		$GTOOLS::TAG{'<!-- NAVIGATION -->'} .= qq~&nbsp; <a href="/biz/manage/suppliers/?VERB=PRODUCTS&CODE=$CODE&PAGE=~.($PAGE-1).qq~">&lt;&lt; Last</a>~;
		}
	if ($PAGE<$PAGES) {
		$GTOOLS::TAG{'<!-- NAVIGATION -->'} .= qq~&nbsp; <a href="/biz/manage/suppliers/?VERB=PRODUCTS&CODE=$CODE&PAGE=~.($PAGE+1).qq~">Next &gt;&gt;</a> ~;
		}

	@prods = splice(@prods, $PAGE*$PAGESIZE, $PAGESIZE);

	if (scalar(@prods) > 1000) {
		$c .= "<tr><td colspan=10>Sorry, you have more than 500 SKUs (you have: ".scalar(@prods)."), cannot display</td></tr>";	
		}
	else {
		my $jedi_username = lc($S->fetch_property('.jedi.username'));
		my ($invref) = &INVENTORY::fetch_qty($USERNAME,\@prods);

		my $count = 0;
		my $pidsref = &ZOOVY::fetchskus_into_hashref($USERNAME,\@prods,{});
	
		foreach my $pid (sort (@prods)) {
			my $class = ($count++%2)?'table_bg1':'table_bg2';

			if ($pid =~ /:/) { POGS::apply_options($USERNAME,$pid,$pidsref->{$pid}); }
			
			## VERB CHECKBOX
			$c .= qq~<tr class="$class">~;
			$c .= qq~<td nowrap><input type="checkbox" name="SKU_$count" value="$pid"></td>~;

			## COUNT
			$c .= qq~<td>$count</td>~;
			
			## SKU
			$c .= qq~<td nowrap><a target="_new" href="http://$USERNAME.zoovy.com/product/$pid">$pid</a> ~.
					qq~<a target="_new" href="http://www.zoovy.com/biz/product/index.cgi?VERB=QUICKSEARCH&VALUE=$pid">[Edit]</a></td>~;
			

			my $inv_enable = '';
			## SUPPLIER SKU (JEDI)
			if ($S->{'INFO'}->{'MODE'} eq 'JEDI') {
			      $c .= "<td><a href=\"http://$jedi_username".".zoovy.com/product/".
			      		$pid."\">".
			      		$pid."</a></td>";
					$inv_enable = &ZOOVY::fetchproduct_attrib($jedi_username,$pid,'zoovy:inv_enable');
					}
			## MANUFACTURER SKU (NON-JEDI)
			else { 
				#if ($pidsref->{$pid}->{'zoovy:prod_mfgid'} ne '') {$c .= "<td>$pidsref->{$pid}->{'zoovy:prod_mfgid'}</td>"; }
				#else {$c .= "<td>$pidsref->{$pid}->{'zoovy:prod_supplierid'}</td>"; }
				$c .= "<td>$prod_to_supref->{$pid}</td>"; 				

				$inv_enable = $pidsref->{$pid}->{'zoovy:inv_enable'};
				}

	
			## INVENTORY
			## check if Unlimited
			if (($inv_enable & 32) > 0) { $c .= "<td>Unlimited</td>"; }
			else { 
				## check the sku level
				if ($invref->{$pid} eq ''){
					require PRODUCT;
					require SUPPLIER::JEDI;
					my $invref = &SUPPLIER::JEDI::fetch_inventory($USERNAME,$jedi_username,[$pid]);
					my ($self) = PRODUCT->new($USERNAME,$pid);
					$c .= "<td>";
					foreach my $sku (keys %{$invref}){
   						my ($id) = substr($sku, -2, 2);
   						my ($prompt) = &PRODUCT::pog_option_fetch($self,"#Z",$id,"prompt");
						$c .= "$prompt: $invref->{$sku}<br>";
						}
					$c .= "</td>";
					}
				## inv at the product level
				else {
					$c .= "<td>$invref->{$pid}</td>";
					}
				}
			
			## PRODUCT NAME
			$c .= "<td>$pidsref->{$pid}->{'zoovy:prod_name'}</td>";
			
			## SHIPPING
			if (defined $pidsref->{$pid}->{'zoovy:ship_cost1'} && $pidsref->{$pid}->{'zoovy:ship_cost1'} > 0) {
				$c .= "<td>\$".sprintf("%.2f",$pidsref->{$pid}->{'zoovy:ship_cost1'})."</td>";
				}
			else { $c .= "<td>TBD</td>"; }

			## COST, PRICE
			foreach my $k ('zoovy:base_cost','zoovy:base_price') {
				$c .= "<td>\$".sprintf("%.2f",$pidsref->{$pid}->{$k})."</td>";
				}
			$c .= "</tr>";
			}
		}

	if ($c eq '') {
		$c .= "<tr><td colspan='5'>No products found - please add some</td></tr>";
		}
	$GTOOLS::TAG{'<!-- PRODUCTS -->'} = $c;

	$template_file = 'products.shtml';
   push @BC, { name=>"Products" };

	}



## for now, only used to update STOCK Supplier Order Items
## (change quantity, add to order)
if ($VERB eq 'ORDERITEM-UPDATE') {
	use Data::Dumper;

	my $c = '';

	foreach my $var (keys %{$ZOOVY::cgiv}){
		$c .= "$var $ZOOVY::cgiv->{$var}<br>";
		if ($var =~ /^(.*)_QTY$/) {
			my $qtyID = $1;
 			my $QTY = $ZOOVY::cgiv->{$qtyID.'_QTY'};
			SUPPLIER::update_orderitem($qtyID,$MID,QTY=>$QTY);
			}
		if ($var =~ /^(.*)_DISPATCH$/) {
			my $disID = $1;
			SUPPLIER::update_orderitem($disID,$MID,STATUS=>'MANUAL_DISPATCH');		
			}
		}
	## create an order
	my $orderref = SUPPLIER::create_order($MID,$CODE,$S->{'INFO'}->{'FORMAT'},check_stock_limits=>0);	

	$VERB = 'ORDERS';	
	}



##
##
## Allow merchant to confirm, redispatch, receive orders
##
##
if ($VERB eq 'ORDER-UPDATE') {

	my $results = '';
	my @OIDS = ();
	foreach my $var (keys %{$ZOOVY::cgiv}){
		if ($var =~ /^(.*)_ID$/) {
			push @OIDS, $1;
			}
		}

	if ($ZOOVY::cgiv->{'update'} eq 'CLOSE') {
		## only orders which are open 
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=blue>The following orders have been selected for closing:<br> ";
		foreach my $ID (@OIDS) {
			my $pstmt = "update SUPPLIER_ORDERS set WAIT_GMT=".time()." where STATUS='OPEN' and SRCMID=$MID /* $USERNAME */ and ID=$ID";
			print STDERR $pstmt."\n";
			if ($dbh->do($pstmt)>0) {
				$GTOOLS::TAG{'<!-- RESULT -->'} .= $ID." success<br>";
				}
			else {
				$GTOOLS::TAG{'<!-- RESULT -->'} .= $ID." FAILED<br>";
				}
			}
		}
	elsif ($ZOOVY::cgiv->{'update'} eq 'RECEIVE') {
		foreach my $ID (@OIDS) {
			my ($srcorder) = SUPPLIER::receive_order($USERNAME,$ID);
			}
		$results = join(',',@OIDS);
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=blue>The following orders have been received:<br> $results</font>";
		## stub..patti put code here.		
		}
	elsif ($ZOOVY::cgiv->{'update'} eq 'ARCHIVE') {
		foreach my $ID (@OIDS) {
			SUPPLIER::archive_order($USERNAME,$ID);
			}
		$results = join(',',@OIDS);
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=blue>The following orders have been archived:<br> $results</font>";
		}
	elsif ($ZOOVY::cgiv->{'update'} eq 'REDISPATCH') {
		foreach my $ID (@OIDS) {
			my ($srcorder) = SUPPLIER::redispatch_order($USERNAME,$ID);
			}
		$results = join(',',@OIDS);
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=blue>The following orders are set to be redispatched (dispatchment will take place in the next hour):<br> $results</font>";
		}

	elsif ($ZOOVY::cgiv->{'update'} eq 'CONFIRM') {
		print STDERR "confirming orders with $ZOOVY::cgiv->{'name'} $ZOOVY::cgiv->{'email'}\n";
		if ($ZOOVY::cgiv->{'name'} eq '' || $ZOOVY::cgiv->{'email'} eq '') {
			$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=red>Both name and email are required when confirming orders from this screen.</font>";
			}
		elsif (not ZTOOLKIT::validate_email($ZOOVY::cgiv->{'email'})) {
			$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color=red>Email is invalid.</font>";
			}
		else {
			foreach my $ID (@OIDS) {
				print STDERR "confirming $ID\n";
				my $pstmt = "select srcorder from SUPPLIER_ORDERS where id = ".$dbh->quote($ID);
				my $sth = $dbh->prepare($pstmt);
				$sth->execute();
				my ($orderid)=$sth->fetchrow();
				$sth->finish();

				##USERNAME,srcorder,supplierorderid,conf_ordertotal,ship_method,ship_num,conf_person,conf_email
				my (@errors) = SUPPLIER::confirm_order($USERNAME,$orderid,'NA','','','',$ZOOVY::cgiv->{'name'},$ZOOVY::cgiv->{'email'});
				print STDERR Dumper(@errors);
				}
			}	
		}

		$VERB = 'ORDERS';	
		if ($CODE eq '') { $VERB = "NON_CONF_ORDERS"; }
	
	}
	



##
## Orders tab for a particular Supplier
## 
if ($VERB eq 'ORDERS') {
	if ($S->fetch_property('FORMAT') eq 'STOCK') {
		$VERB = 'STOCK_ORDERS';
		}
	}

if ($VERB eq 'ORDERS') {
	my $c = '';
	$template_file = 'orders.shtml';

	my $orefs = $S->list_orderitems();
	##	
	## BUILD ITEMS TO BE ORDERED	
	##
	my $count = 0;
	foreach my $supoid (sort keys %{$orefs}) {
		my $class = ($count++%2)?'r0':'r1';
		my ($SKU,$QTY,$STATUS,$SRCOID,$CTS,$SOID,$ID) = split(/\|/,$orefs->{$supoid});

		next unless ($STATUS eq 'NEW' || $STATUS eq 'ADDED'); 
		my $VERBS = '';
		$c .= qq~<tr class="$class">~;
		$c .= qq~<td></td>~;
		$c .= qq~<td><a target=_new href="https://www.zoovy.com/biz/orders/view.cgi?ID=$SRCOID">$SRCOID</a></td>~;
		$c .= qq~<td>$SKU</td>~;
		$c .= qq~<td>$QTY</td>~;
		$c .= qq~<td></td>~;
		if ($STATUS eq 'NEW') {
			$c .= qq~<td>$STATUS</td>~;
			}
		else {
			$c .= qq~<td>$STATUS to $SOID</td>~;
			}

		$c .= qq~<td>~.&ZTOOLKIT::pretty_date($CTS).qq~</td>~;
		$c .= qq~</tr>~;
		}

	if ($c eq '') { $c = "<tr class='table_bg2'><td colspan='7'><i>No New order items found for this supplier</td></tr>"; }
	$GTOOLS::TAG{'<!-- ORDERITEMS -->'} = $c;

	## JEDI orders aren't "redispatchable"
	$GTOOLS::TAG{'<!-- VERBS -->'} .= qq~<option value="CLOSE">Close</option>~;
	$GTOOLS::TAG{'<!-- VERBS -->'} .= qq~<option value="ARCHIVE">Archive</option>~;
	if ($S->fetch_property('MODE') ne 'JEDI') {
		$GTOOLS::TAG{'<!-- VERBS -->'} .= qq~<option value="REDISPATCH">Redispatch</option>~;
		}

	$orefs = $S->list_orders();
	##
	## Build ORDERS table
	## 
	$c = '';
	my $nowts = time();
	foreach my $id (reverse sort keys %{$orefs}) {
		my ($O) = ORDER->new($USERNAME,$orefs->{$id}->{'SRCORDER'});
		my $class = ($count++%2)?'r0':'r1';
		my $CREATED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CREATED_GMT'});
		my $DISPATCHED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'DISPATCHED_GMT'});
		my $CONFIRMED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CONF_GMT'});
		
		
		$c .= qq~<tr class="$class">~;
		$c .= qq~<td><input type="checkbox" name="$orefs->{$id}->{'ID'}_ID"></td>~;

		## Store order
		$c .= qq~<td><a target=_new href="https://www.zoovy.com/biz/orders/view.cgi?ID=$orefs->{$id}->{'SRCORDER'}">$orefs->{$id}->{'SRCORDER'}</a> ~;
		if (defined $O) { $c .= "(".$O->get_attrib('pool').")"; } 
		$c .= qq~</td>~;
			
		## JEDI ORDER
		if ($S->fetch_property('MODE') eq 'JEDI') {
			$c .= qq~<td><a target=_new href="https://ssl.zoovy.com/$S->fetch_property('.jedi.username')/order_status.cgis?order_id=$orefs->{$id}->{'SUPPLIERORDERID'}">$orefs->{$id}->{'SUPPLIERORDERID'}</a></td>~;
			}
		else { 
			$c .= qq~<td>$orefs->{$id}->{'SUPPLIERORDERID'}</td>~; 
			}
		
		my $confirmed = $CONFIRMED_GMT . qq~ <a href="mailto:$orefs->{$id}->{'CONF_EMAIL'}">~ . 
			($orefs->{$id}->{'CONF_PERSON'} eq ''?$orefs->{$id}->{'CONF_EMAIL'}:$orefs->{$id}->{'CONF_PERSON'})."</a>";
			
		if (($orefs->{$id}->{'STATUS'} eq 'OPEN') && ($orefs->{$id}->{'WAIT_GMT'}<=$nowts)) {
			$c .= qq~<td>OPEN (will be closed)</td>~;
			}
		else {
			$c .= qq~<td>$orefs->{$id}->{'STATUS'}</td>~;
			}
			
		$c .= qq~
			<td>$CREATED_GMT</td>
			<td>$DISPATCHED_GMT</td>
			<td>$confirmed</td></tr>~;
		}

	if ($c eq '') { $c = "<tr class='table_bg2'><td colspan='7'><i>No orders found for this supplier</td></tr>"; }

	$GTOOLS::TAG{'<!-- ORDERS -->'} = $c;
	$GTOOLS::TAG{'<!-- MODE -->'} = $S->{'INFO'}->{'MODE'};
		
	$template_file = 'orders.shtml';
  	push @BC, { name=>"Orders" };
	}


##
##
##
if ($VERB eq 'STOCK_ORDERS') {

	my $c = '';
	$template_file = 'stock-orders.shtml';

	## make srcorder the key to sort on

	my $itemref = $S->list_orderitems();
	my %H = %{$itemref};

	##
	## BUILD ITEMS TO BE ORDERED
	##
	my $count = 0;
	my $stock_new_count = 0;
	foreach my $supoid (sort keys %H) {
		my $class = ($count++%2)?'r0':'r1';
		my ($SKU,$QTY,$STATUS,$SRCOID,$CTS,$SOID,$ID) = split(/\|/,$H{$supoid});
		

		next unless ($STATUS eq 'NEW' || $STATUS eq 'ADDED'); 

		my $cost = "\$".SUPPLIER::STOCK::order_item_total($MID,ID=>$ID);
		$c .= qq~<tr class="$class">~;
      if ($STATUS eq 'NEW') {
			$c .= qq~<td><input type="checkbox" name="${ID}_DISPATCH">Order?</td>~;
			}
		else {
			$c .= qq~<td></td>~;
			}

		$c .= qq~<td>STOCK</td>~;
		$c .= qq~<td>$SKU</td>~;
		
      if ($STATUS eq 'NEW') {
			$c .= qq~<td><input type="textbox" size="4" name="${ID}_QTY" value="$QTY"></td>~;
			}
		else {
			$c .= qq~<td>$QTY</td>~;
			}
	
		$c .= qq~<td>$cost</td>~;
		$c .= qq~<td>$STATUS to $SOID</td>~;
		$c .= qq~<td>~.&ZTOOLKIT::pretty_date($CTS).qq~</td>~;
		$c .= qq~</tr>~;
		}


	if ($c eq '') {
		$c = "<tr class='table_bg2'><td colspan='7'><i>No New order items found for this supplier</td></tr>";
		}
	
	## add UPDATE button
	elsif ($c ne '' && $stock_new_count>0) {
		$c .= qq~<tr><td colspan=6 align=center><input type="submit" src="/images/bizbuttons/update.gif" value="Update">
   	      </td></tr>~;
		}

	$GTOOLS::TAG{'<!-- ORDERITEMS -->'} = $c;

	

	use Data::Dumper;
   #print STDERR Dumper($orefs);

	##
	## Build ORDERS table
	## 
	my $orefs = $S->list_orders();
	my $c = '';

	foreach my $id (reverse sort keys %{$orefs}) {

		#my ($O) = ORDER->new($USERNAME,$orefs->{$id}->{'SRCORDER'});
		my $class = ($count++%2)?'r0':'r1';
		my $CREATED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CREATED_GMT'});
		my $DISPATCHED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'DISPATCHED_GMT'});
		my $CONFIRMED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CONF_GMT'});
		my $RECEIVED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'RECEIVED_GMT'});
	
		my $TOTAL_COST = $orefs->{$id}->{'TOTAL_COST'};;

		if (int($TOTAL_COST) == 0) {
			$TOTAL_COST = SUPPLIER::STOCK::order_item_total($S->fetch_property('MID'),SUPPLIEROID=>$orefs->{$id}->{'ID'});
			}

		$c .= qq~<tr class="$class">~;
		## VERB
		$c .= qq~<td><input type="checkbox" name="$orefs->{$id}->{'ID'}_ID"></td>~;
		## Zoovy Order ID
		$c .= qq~<td><a target=_new href="?VERB=STOCK_ORDER&CODE=$CODE&ID=~.$orefs->{$id}->{'ID'}.
		      qq~">$orefs->{$id}->{'ID'}</a> </td> ~;
		## Supplier Order ID
		$c .= qq~<td>$orefs->{$id}->{'SUPPLIERORDERID'}</td>~; 
		## Total Cost
		$c .= qq~<td>\$~.sprintf("%.2f",$TOTAL_COST).qq~</td>~;
		
		## Status, Created, Dispatched, Confirmed
		my $confirmed = $CONFIRMED_GMT . qq~ <a href="mailto:$orefs->{$id}->{'CONF_EMAIL'}">~ . 
			($orefs->{$id}->{'CONF_PERSON'} eq ''?$orefs->{$id}->{'CONF_EMAIL'}:$orefs->{$id}->{'CONF_PERSON'})."</a>";
		$c .= qq~<td>$orefs->{$id}->{'STATUS'}</td>
			<td>$CREATED_GMT</td>
			<td>$DISPATCHED_GMT</td>
			<td>$confirmed</td>
			<td>$RECEIVED_GMT</td></tr>~;			
		}

	if ($c eq '') {
		$c = "<tr class='table_bg2'><td colspan='7'><i>No orders found for this supplier</td></tr>";
		}

	$GTOOLS::TAG{'<!-- ORDERS -->'} = $c;
	$GTOOLS::TAG{'<!-- VERBS -->'} = qq~Action: <select name="update">
				<option value="">-</option>
				<option value="RECEIVE">Receive Order</option>
				<option value="REDISPATCH">Redispatch</option>
				</select><input type="submit" class="button" value="Go">~;

   push @BC, { name=>"Orders" };
	}
	

##
## individual STOCK ORDER display
##
if ($VERB eq 'STOCK_ORDER') {
	$template_file = 'stock_order.shtml';
	push @BC, { name=>"Orders",link=>"/biz/utilities/suppliers/index.cgi?VERB=ORDERS&CODE=$CODE" };

	my $itemref = SUPPLIER::STOCK::order_detail($S->fetch_property('MID'), $ZOOVY::cgiv->{'ID'});
use Data::Dumper;

	my $c = '';
	my $total = 0;
	foreach my $item (@{$itemref}) {
		print STDERR Dumper ($item);
		$total += ($item->{'cost'}*$item->{'qty'});
		$c .= "<tr><td>$item->{'added'}</td><td>$item->{'sku'}</td><td>$item->{'desc'}</td><td>$item->{'qty'}</td><td>".
				'$'.sprintf("%.2f",($item->{'cost'}*$item->{'qty'}))."</td></tr>";
		}
	
	$c .= "<tr><td colspan=4 halign=right><b>TOTAL:</b></td><td>".'$'.sprintf("%.2f",($total))."</td></tr>";

	$GTOOLS::TAG{'<!-- ORDER_ID -->'} = $ZOOVY::cgiv->{'ID'};		
	$GTOOLS::TAG{'<!-- ORDER_ITEMS -->'} = $c;		
	}
	
##
## Non-Confirmed Orders tab for all Suppliers
## 
if ($VERB eq 'NON_CONF_ORDERS') {

	my $c = '';
	my $count = 0;
	
	my $orefs = SUPPLIER::list_nonconf_orders($USERNAME);

	use Data::Dumper;

	foreach my $id (reverse sort keys %{$orefs}) {
		my ($O) = ORDER->new($USERNAME,$orefs->{$id}->{'SRCORDER'});
		my $class = ($count++%2)?'table_bg1':'table_bg2';
		#my ($SRCOID,$SUPPLIEROID,$STATUS,$CREATED_GMT,$DISPATCHED_GMT,undef,undef,undef,$CODE) = split(/\|/,$orefs->{$id});
		my $CREATED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'CREATED_GMT'});
		my $DISPATCHED_GMT = &ZTOOLKIT::pretty_date($orefs->{$id}->{'DISPATCHED_GMT'});
		
		my $VERBS = '';
		
		
		$c .= qq~<tr class="$class">~;
		
		if ($orefs->{$id}->{'FORMAT'} ne 'JEDI') {
			$c .= qq~<td><input type="checkbox" name="$orefs->{$id}->{'ID'}_ID"></td>~; 
			}
		else { $c .= "<td></td>"; }
		
		$c .= qq~<td><a href="?VERB=ORDERS&CODE=$orefs->{$id}->{'SUPPLIERCODE'}">$orefs->{$id}->{'SUPPLIERCODE'}</a></td>~;

		if ($orefs->{$id}->{'FORMAT'} ne 'STOCK') {
			$c .= qq~<td><a target=_new href="https://www.zoovy.com/biz/orders/view.cgi?ID=$orefs->{$id}->{'SRCORDER'}">$orefs->{$id}->{'SRCORDER'}</a></td>~;
			}
		else {
			$c .= qq~<td><a target=_new href="?VERB=STOCK_ORDER&CODE=$orefs->{$id}->{'SUPPLIERCODE'}&ID=$orefs->{$id}->{'ID'}">$orefs->{$id}->{'ID'}</a> </td> ~;
			}

		if (defined $O) { $c .= "<td>".$O->get_attrib('pool')."</td>"; }
		else { $c .= "<td>DELETED</td>"; }
		
		$c .= qq~ 
	<td>$CREATED_GMT</td>
	<td>$DISPATCHED_GMT</td>
	<td>$orefs->{$id}->{'DISPATCHED_COUNT'}</td>
	<td><a target="_new" href="http://$USERNAME.zoovy.com/confirm.cgis?reference=$orefs->{$id}->{'SRCORDER'}">Never</a></td></tr>~;
		}

	if ($c eq '') {
		$c = "<tr class='table_bg2'><td colspan='7'><i>No non-confirmed orders found.</td></tr>";
		}

	$GTOOLS::TAG{'<!-- ORDERS -->'} = $c;

	$template_file = 'non_conf_orders.shtml';
	push @BC, { name=>"Non-Confirmed Orders" };
	}



##
##
##
if ($VERB eq 'SAVE-ADDPRODUCTS')  {
	my $SKU = $ZOOVY::cgiv->{'sku'};
	my $MODE = $S->fetch_property('MODE');		## e.g. JEDI, API, GENERIC

	## get current product information
	my $prodref = ZOOVY::fetchproduct_as_hashref($USERNAME,$SKU);
	
	## if values are put in, use those otherwise you current properties
	$prodref->{'zoovy:prod_name'} = ($ZOOVY::cgiv->{'prod_name'} ne ''?$ZOOVY::cgiv->{'prod_name'}:$prodref->{'zoovy:prod_name'});
	$prodref->{'zoovy:base_cost'} = ($ZOOVY::cgiv->{'cost'} ne ''?$ZOOVY::cgiv->{'cost'}:$prodref->{'zoovy:base_cost'});
	
	$prodref->{'zoovy:ship_cost1'} = ($ZOOVY::cgiv->{'suppliership'} ne ''?$ZOOVY::cgiv->{'suppliership'}:$prodref->{'zoovy:ship_cost1'});
	$prodref->{'zoovy:base_weight'} = ($ZOOVY::cgiv->{'base_weight'} ne ''?$ZOOVY::cgiv->{'base_weight'}:$prodref->{'zoovy:base_weight'});
	$prodref->{'zoovy:prod_supplierid'} = ($ZOOVY::cgiv->{'suppliersku'} ne ''?$ZOOVY::cgiv->{'suppliersku'}:$prodref->{'zoovy:prod_supplierid'});;
	$prodref->{'zoovy:prod_supplier'} = $CODE;
	$prodref->{'zoovy:virtual'} = "$MODE:$CODE";
	$prodref->{'zoovy:inv_enable'}=(defined $prodref->{'zoovy:inv_enable'}?$prodref->{'zoovy:inv_enable'}:1); 
	if (defined $ZOOVY::cgiv->{'inv_unlimited'} && $prodref->{'zoovy:inv_enable'} & 1) { 
		$prodref->{'zoovy:inv_enable'} = 33; 
		INVENTORY::add_incremental($USERNAME,$SKU,'I',9999);
		}


	## set price based on MARKUP
	if ($prodref->{'zoovy:base_price'} eq '') {
		my $formula = $S->fetch_property('MARKUP');
		my $price = '';

		require Math::Symbolic;
		my $tree = Math::Symbolic->parse_from_string($formula);         
		if (defined $tree) {
			$tree->implement('COST'=> sprintf("%.2f",$prodref->{'zoovy:base_cost'}) );
			$tree->implement('BASE'=> sprintf("%.2f",$prodref->{'zoovy:base_price'}) );
			$tree->implement('SHIP'=> sprintf("%.2f",$prodref->{'zoovy:ship_cost1'}) );
			$tree->implement('MSRP'=> sprintf("%.2f",$prodref->{'zoovy:prod_msrp'}) );

			my ($sub) = Math::Symbolic::Compiler->compile_to_sub($tree);
			$price = sprintf("%.2f",$sub->());
			}
		$prodref->{'zoovy:base_price'} = $price;
		}
			

	&ZOOVY::saveproduct_from_hashref($USERNAME,$SKU,$prodref,"/$CODE");
	$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited product $SKU</font><br><br>";
	$LU->log('SUPPLIER.PRODUCT.MAP',"[CODE: $CODE] product $SKU was associated",'INFO');
	$VERB = 'ADDPRODUCTS';
	}


if ($VERB eq 'ADDPRODUCTS') {
	$GTOOLS::TAG{'<!-- MODE -->'} = $S->fetch_property('MODE');	
	$template_file = 'addproducts.shtml';	
	push @BC, { name=>"Add Product" };
	}


##
##
if ($VERB eq 'SAVE-SHIPPING') {
	# deal with SHIPPING METHOD checkboxes
	# add up all the values for bitwise comparison
	my $total_shipping_method = ($ZOOVY::cgiv->{'.ship.methods_1'}?1:0) + 
		($ZOOVY::cgiv->{'.ship.methods_2'}?2:0) + 
		($ZOOVY::cgiv->{'.ship.methods_4'}?4:0) + 
		($ZOOVY::cgiv->{'.ship.methods_32'}?32:0);

	## setting 4 (API shipping) is predatory and cannot be enabled with others.
	if ($total_shipping_method&4) { $total_shipping_method = 4; }

	if (defined $ZOOVY::cgiv->{'.ship.methods_0'}) {	
		$total_shipping_method = 0;
		}

	# deal with SHIPPING OPTIONS checkboxes
	# add up all the values for bitwise comparison
	my $total_shipping_options = ($ZOOVY::cgiv->{'.ship.options_1'}?1:0); 

	$S->save_property('USERNAME',$USERNAME);
	$S->save_property('.ship.methods',$total_shipping_method);
	$S->save_property('.ship.origzip', $ZOOVY::cgiv->{'.ship.origzip'});
	$S->save_property('.ship.origstate', $ZOOVY::cgiv->{'.ship.origstate'});
	$S->save_property('.ship.provider', $ZOOVY::cgiv->{'.ship.provider'});
	$S->save_property('.ship.account', $ZOOVY::cgiv->{'.ship.account'});
	$S->save_property('.ship.options', $total_shipping_options);
	$S->save_property('.ship.hnd.perorder', $ZOOVY::cgiv->{'.ship.hnd.perorder'});
	$S->save_property('.ship.hnd.peritem', $ZOOVY::cgiv->{'.ship.hnd.peritem'});
	$S->save_property('.ship.hnd.perunititem', $ZOOVY::cgiv->{'.ship.hnd.perunititem'});
	$S->save();
	
	$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited shipping for $CODE</font><br><br>";
	$LU->log('SUPPLIER.SHIPPING.SAVE',"[CODE: $CODE] shipping settings were updated.",'INFO');
	$VERB = 'SHIPPING';
	}

if ($VERB eq 'SHIPPING') {
		# bitwise compare
		$GTOOLS::TAG{'<!-- .ship.methods_0 -->'} = ($S->fetch_property('.ship.methods')==0)?"checked":"";
		$GTOOLS::TAG{'<!-- .ship.methods_1 -->'} = ($S->fetch_property('.ship.methods') & 1)?"checked":"";
		$GTOOLS::TAG{'<!-- .ship.methods_2 -->'} = ($S->fetch_property('.ship.methods') & 2)?"checked":"";
		$GTOOLS::TAG{'<!-- .ship.methods_4 -->'} = ($S->fetch_property('.ship.methods') & 4)?"checked":"";
		$GTOOLS::TAG{'<!-- .ship.methods_32 -->'} = ($S->fetch_property('.ship.methods') & 32)?"checked":"";


		## Origin Zip Code, State, Provider, Account
		$GTOOLS::TAG{'<!-- .ship.origzip -->'} = $S->fetch_property('.ship.origzip');
		$GTOOLS::TAG{'<!-- .ship.origstate -->'} = $S->fetch_property('.ship.origstate');	
	
		## Configure veribiage for Shipping Meter
		my $params = &ZTOOLKIT::parseparams($S->fetch_property('.ship.meter'));

		if($params->{'type'} eq "UPS"){
			$GTOOLS::TAG{'<!-- .ship.meter -->'} = $params->{'type'} ." Shipper #: ". $params->{'shipper_number'}. "<br>License: ". $params->{'license'};
			}	
		elsif($params->{'type'} eq "FEDEX"){
			$GTOOLS::TAG{'<!-- .ship.meter -->'} = $params->{'type'} ." Account #: ". $params->{'account_number'}. "<br>Meter: ". $params->{'meter'};
			}	
		else{ $GTOOLS::TAG{'<!-- .ship.meter -->'} = "None confirmed at this time..."; }
		##

		my ($webdb) = &ZWEBSITE::fetch_website_dbref($USERNAME);
		if ($webdb->{'google_api_env'}==0) {}
		elsif ($webdb->{'google_dest_zip'} eq '00000') {
			$GTOOLS::TAG{'<!-- SHIP_WARNINGS -->'} .= "<font color='red'>Warning: your google checkout settings are incompatible with zone based shipping.</font>";
			}


		$GTOOLS::TAG{'<!-- .ship.options_1 -->'} = ($S->fetch_property('.ship.options') & 1)?"checked":"";

		$GTOOLS::TAG{'<!-- .ship.hnd.perorder -->'} = $S->fetch_property('.ship.hnd.perorder');
		$GTOOLS::TAG{'<!-- .ship.hnd.peritem -->'} = $S->fetch_property('.ship.hnd.peritem');
		$GTOOLS::TAG{'<!-- .ship.hnd.perunititem -->'} = $S->fetch_property('.ship.hnd.perunititem');


	## brian did this don't yell at patti.
	$GTOOLS::TAG{'<!-- START_SHOW_IF_PARTNER -->'} = '<!--';
	$GTOOLS::TAG{'<!-- END_SHOW_IF_PARTNER -->'} = '-->';


	if ($S->partner() eq 'DOBA') {
		$GTOOLS::TAG{'<!-- START_SHOW_IF_PARTNER -->'} = '';
		$GTOOLS::TAG{'<!-- END_SHOW_IF_PARTNER -->'} = '';
		}
	

	$template_file = 'shipping.shtml';
	push @BC, { name=>"Config Shipping" };
	}





################################################################
## ORDER SETUP Handler
##
## FORMAT
##		- NONE - no automatic orders
##		- DROPSHIP - dropshipping
##		- FULFILL - fulfillment
##		- STOCK - stock (inventory mode)
##
## GEN_ORDERTYPE
##    - email (1)
##    - fax (2)
## 	- defaults to 0
##
if ($VERB eq 'SAVE-ORDERING') {
	if ($S->fetch_property('MODE') eq 'GENERIC') {
		if ($S->fetch_property('FORMAT') eq 'NONE') {
			}
		elsif ($S->fetch_property('FORMAT') eq 'STOCK') {
			## Stock mode has specific settings limit which days/amounts orders may be placed.
			$S->save_property('.stock.limit_amount',$ZOOVY::cgiv->{'LIMIT_AMOUNT'});
			$S->save_property('.stock.limit_time',$ZOOVY::cgiv->{'LIMIT_TIME'});
			$S->save_property('.stock.limit_days',$ZOOVY::cgiv->{'LIMIT_DAYS'});
			$S->save_property('.stock.limit_comboamount',$ZOOVY::cgiv->{'LIMIT_COMBOAMOUNT'});
			$S->save_property('.stock.limit_combodays',$ZOOVY::cgiv->{'LIMIT_COMBODAYS'});
			my $v = 0;
			foreach my $i (0..6) {
				print STDERR "V:$v\n";
				$v += (defined $ZOOVY::cgiv->{'LIMIT_DOW_'.$i})?(1<<$i):0;
				}
			$S->save_property('.stock.limit_dow',$v);
			}
		else {
			$S->save_property('.stock.limit_dow',$ZOOVY::cgiv->{'LIMIT_DOW'});
			}

 	 	$S->save_property('.order.type',$ZOOVY::cgiv->{'GEN_ORDERTYPE'});
   	$S->save_property('.order.subject',$ZOOVY::cgiv->{'GEN_ORDERSUBJECT'});
	  	$S->save_property('.order.body',$ZOOVY::cgiv->{'GEN_ORDERBODY'});
		$S->save_property('.order.notes',(defined $ZOOVY::cgiv->{'GEN_ORDERNOTES'}?1:0));
 	  	$S->save_property('.order.email',$ZOOVY::cgiv->{'GEN_ORDEREMAIL'});
		$S->save_property('.order.bcc',$ZOOVY::cgiv->{'GEN_ORDERBCC'});
    	$S->save_property('.order.email_src', $ZOOVY::cgiv->{'GEN_ORDEREMAIL_SRC'});
     	$S->save_property('.order.fax',$ZOOVY::cgiv->{'GEN_ORDERFAX'});
   	$S->save_property('.order.msgid',$ZOOVY::cgiv->{'GEN_ORDERMSGID'});
   	$S->save_property('.order.field_cost',(defined $ZOOVY::cgiv->{'GEN_ORDERFIELD_COST'}?1:0));
   	$S->save_property('.order.field_vendor',(defined $ZOOVY::cgiv->{'GEN_ORDERFIELD_VENDOR'}?1:0));
		}
	## JEDI, ATLAST, SHIPWIRE, etc
	else {
		$S->save_property('.stock.limit_dow',$ZOOVY::cgiv->{'LIMIT_DOW'});
		}

	$S->save(1);

	my $dbh = &DBINFO::db_zoovy_connect();
	my $pstmt = "update SUPPLIER_ORDERS set WAIT_GMT=0 where SRCMID=$MID and STATUS='OPEN'";
	#print STDERR $pstmt."\n";
	$dbh->do($pstmt);
	&DBINFO::db_zoovy_close();

	$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited order setup for $CODE</font><br><br>";
	$LU->log('SUPPLIER.ORDER.SAVE',"[CODE: $CODE] order settings were updated.",'INFO');

   $VERB = 'ORDERING';
   }


if ($VERB eq 'ORDERING') {
	if ($S->fetch_property('FORMAT') eq 'NONE') {		
		## None
		}
	elsif ($S->fetch_property('FORMAT')eq 'STOCK') {
		## Stock mode

		## created 2007-03-21
		## determines what time orders should be dispatched daily
		my $limit_time = $S->fetch_property('.stock.limit_time');
		my $time_menu = qq~<select name="LIMIT_TIME">\n<option value=''>\n~;
		foreach my $type ('am','pm') {
			foreach my $i (12,1..11) {
				my $selected = '';
				my $time = $i.":00 ".$type;
				my $value = '';
				if ($type eq 'am') {
					if ($i == 12) { $value = '00'; }
					elsif ($i == 11 || $i == 10) { $value = $i; } 
					else { $value = '0'.$i; }
					}
				else {
					if ($i == 12) { $value = '12'; }
					else { $value = ($i+12); }
					}
				if ($limit_time eq "$value") { $selected = 'selected'; }
				$time_menu .= qq~<option $selected value="$value">$time\n~;
				}
			}
		$time_menu .= "</select>";

		my $limit_amount = $S->fetch_property('.stock.limit_amount');
		my $limit_comboamount = $S->fetch_property('.stock.limit_comboamount');
		my $limit_combodays = '';
		my $limit_days = '';
		foreach my $i (0..14) {
			$limit_combodays .= "<option ".(($S->fetch_property('.stock.limit_combodays') == $i)?'selected':'')." value=\"$i\">$i</option>\n";
			$limit_days .= "<option ".(($S->fetch_property('.stock.limit_days') == $i)?'selected':'')." value=\"$i\">$i</option>\n";
			}
		my @dow = ();
		foreach my $i (0..6) {
			$dow[$i] =  (($S->fetch_property('.stock.limit_dow') & (1<<$i))>0)?'checked':'';
			}

		$GTOOLS::TAG{'<!-- ORDER_LIMIT -->'} = qq~

<b>Automatic Order Closing:</b><br>
Some suppliers may require certain minimum orders in order to
qualify for free shipping, or discounted rates. The "Automatic Order Close" feature lets the system
automatically delay orders (by keeping them open) in order to qualify for those discounts. <br>
<br>
Allowed Days for Ordering:<br>
			<input type="checkbox" $dow[0] name="LIMIT_DOW_0"> Monday |
			<input type="checkbox" $dow[1] name="LIMIT_DOW_1"> Tuesday |
			<input type="checkbox" $dow[2] name="LIMIT_DOW_2"> Wednesday |
			<input type="checkbox" $dow[3] name="LIMIT_DOW_3"> Thursday |
			<input type="checkbox" $dow[4] name="LIMIT_DOW_4"> Friday |
			<input type="checkbox" $dow[5] name="LIMIT_DOW_5"> Saturday |
			<input type="checkbox" $dow[6] name="LIMIT_DOW_6"> Sunday<br><br>
			Process Orders at this time (PST/PDT): $time_menu &nbsp;&nbsp;<i>**NOTE: this time is NOT exact. It is starting at this time and within an hour.</i><br>
			Hold orders for <select name="LIMIT_DAYS">$limit_days</select> days to increase order size.<br>
			Hold order until it reaches \$<input type="textbox" size="5" value="$limit_amount" name="LIMIT_AMOUNT"> dollars.<br>
			Hold order until it reaches \$<input type="textbox" size="5" value="$limit_comboamount" name="LIMIT_COMBOAMOUNT"> dollars or <select name="LIMIT_COMBODAYS">$limit_combodays</select> days.<br>
<br>
Open vs. Closed Orders: As long as an order is open, additional items can be added.
An order will not be placed with the supplier until after it is closed.
An open orer is created whenever one or more items to a particular supplier needs to be ordered.
If you want to manually close orders then leave all the days of the week unchecked and no automatic closing will occur 
and you will manually need to close each order.<br>
<br>
<i>REMEMBER: The most restrictive set of selected options will always be used.
For example if "place orders on Monday", and "limit ordering to every 3 days"
are used together - then if the first item to be ordered is found on Saturday, the resulting
order will not be placed until the following Monday. 
(Since on 3 days would not have elapsed until Tuesday, so the first Monday would have been skipped!)</i><br> 

<hr>
~;
		}
	else {
		## DROPSHIP and FULFILL MODES
		my $DOW0 = ($S->fetch_property('.stock.limit_dow')==0)?'selected':'';
		my $DOW255 = ($S->fetch_property('.stock.limit_dow')>0)?'selected':'';
		
		$GTOOLS::TAG{'<!-- ORDER_LIMIT -->'} = "
Order Mode: ".$S->fetch_property('MODE')." - ".$S->fetch_property('FORMAT').qq~<br>
<br>
<b>Automatically Close Orders: </b>
<br>
<select name="LIMIT_DOW">
	<option $DOW255 value="255">Yes [RECOMMENDED]</option>
	<option $DOW0 value="0">No</option>
	</select><br>
<font class="hint">
Hint: if you do not automatically close orders, then you will need to manually close each order. 
Some merchants who receive a relatively small volume and wish to approve each order individually prefer
this option. Orders will NOT be transmitted to the supplier until they are closed.<br><br>
</font>
~;
		
		}


	if ($S->fetch_property('MODE') eq 'JEDI') {
		$template_file = 'simple-ordering.shtml';
		}
	if ($S->fetch_property('MODE') eq 'GENERIC') {
		## re-initializing to get .order.body properly w/all the \r\n's
		$S = SUPPLIER->new($USERNAME,$CODE); 
		## see if the merchant has chosen to deliver order via email and/or fax
		
		$GTOOLS::TAG{'<!-- GEN_ORDERTYPE_1 -->'} = ($S->fetch_property('.order.type') == 1 || $ZOOVY::cgiv->{'GEN_ORDERTYPE'} == 1)?'checked':'';
		$GTOOLS::TAG{'<!-- GEN_ORDERTYPE_2 -->'} = ($S->fetch_property('.order.type') == 2 || $ZOOVY::cgiv->{'GEN_ORDERTYPE'} == 2)?'checked':'';

		my ($se) = SITE::EMAILS->new($USERNAME,PROFILE=>$S->fetch_property('PROFILE'));
		my $msgs = $se->available('SUPPLY');
		if (not defined $msgs) {
			$GTOOLS::TAG{'<!-- MESSAGES -->'} = '<i>No supply chain emails defined.</i>'; 
			}
		else {
			$GTOOLS::TAG{'<!-- MESSAGES -->'} = '';
			foreach my $ref (@{$msgs}){
				my ($selected) = ($ref->{'MSGID'} eq $S->fetch_property('.order.msgid'))?' selected ':'';
				$GTOOLS::TAG{'<!-- MESSAGES -->'} .= "<option $selected value=\"$ref->{'MSGID'}\">$ref->{'MSGID'}: $ref->{'MSGTITLE'}</option>";
				}
			}
		
		## confirmation required
	   if($S->fetch_property('.order.conf') == 1 || $ZOOVY::cgiv->{'GEN_ORDERCONF'} == 1){ 
			$GTOOLS::TAG{'<!-- GEN_ORDERCONF -->'} = "checked";
			}
		else{$GTOOLS::TAG{'<!-- GEN_ORDERCONF -->'} = ''; }

		## include Order Notes (from the original order)
		if($S->fetch_property('.order.notes') == 1 || $ZOOVY::cgiv->{'GEN_ORDERNOTES'} == 1){ 
			$GTOOLS::TAG{'<!-- GEN_ORDERNOTES -->'} = "checked";
			}
		else{$GTOOLS::TAG{'<!-- GEN_ORDERNOTES -->'} = ''; }


		## other params
		$GTOOLS::TAG{'<!-- GEN_ORDEREMAIL -->'} = $S->fetch_property('.order.email');
		$GTOOLS::TAG{'<!-- GEN_ORDERBCC -->'} = $S->fetch_property('.order.bcc');
		$GTOOLS::TAG{'<!-- GEN_ORDERFAX -->'} = $S->fetch_property('.order.fax');
		$GTOOLS::TAG{'<!-- GEN_ORDERSUBJECT -->'} = $S->fetch_property('.order.subject');
		$GTOOLS::TAG{'<!-- GEN_ORDERBODY -->'} = $S->fetch_property('.order.body');
		#$GTOOLS::TAG{'<!-- GEN_ORDERBODY -->'} =~ s/\n\r/<br>/g;
		$GTOOLS::TAG{'<!-- CONFIRMATION_PAGE -->'} = "http://".lc($USERNAME).".zoovy.com/confirm.cgis"; 
		$GTOOLS::TAG{'<!-- CHK_GEN_ORDERFIELD_COST -->'} = ($S->fetch_property('.order.field_cost'))?'checked':'';
		$GTOOLS::TAG{'<!-- CHK_GEN_ORDERFIELD_VENDOR -->'} = ($S->fetch_property('.order.field_vendor'))?'checked':'';

		## changed to PROFILEs
	   #require AUTOEMAIL;
  		#$GTOOLS::TAG{'<!-- GEN_ORDEREMAIL_SRC -->'} = &AUTOEMAIL::find_email($USERNAME);
		my $PROFILE = ($S->fetch_property('PROFILE')?$S->fetch_property('PROFILE'):'DEFAULT');
		$GTOOLS::TAG{'<!-- PROFILE -->'} = $PROFILE;
		my $srcemail = ZOOVY::fetchmerchantns_attrib($USERNAME,$PROFILE,"zoovy:support_email");
		if ($srcemail eq '') { $srcemail = "<font color=red>You don't have this set!! THIS IS VERY BAD, your Supplier emails will NOT be delivered.</font>"; }
		$GTOOLS::TAG{'<!-- GEN_ORDEREMAIL_SRC -->'} = $srcemail;
		
		$template_file = 'generic-ordering.shtml'; 
		}
	else {
		$template_file = 'simple-ordering.shtml';
		}

	$GTOOLS::TAG{'<!-- CODE -->'} = $CODE;
	push @BC, { name=>"Config Ordering" };
	}


##
## only used for JEDI
## 
if ($VERB eq 'PAYMENT-SAVE') {
	my $ERRORS = '';

	print STDERR "saving ACCT_PAYMENT_TYPE: ".$ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'}."\n";
	$S->save_property('.jedi.payment_type',$ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'});

	## validation on Credit Card info
	if ($ZOOVY::cgiv->{'.jedi.payment_type'} eq 'CREDIT') {
		require ZPAY;
		## check Credit Card number
		unless (&ZPAY::cc_verify_checksum($ZOOVY::cgiv->{'ACCT_CC_NUMBER'}) &&
				  &ZPAY::cc_verify_length($ZOOVY::cgiv->{'ACCT_CC_NUMBER'}) ) { 
			$ERRORS .= 'Credit card number must be a valid credit card number.<br>' 
			}
		
		## check credit card type is valid
		print STDERR "username: ".lc($S->fetch_property('.jedi.username'))."\n";
		unless (&ZPAY::cc_verify_type_for_merchant(lc($S->fetch_property('.jedi.username')),$ZOOVY::cgiv->{'ACCT_CC_NUMBER'})) {
			$ERRORS .= 'Credit card is not a type this merchant accepts.<br>';
			}

		## check expiration date
		my ($mm, $yyyy) = split("-", $ZOOVY::cgiv->{'ACCT_CC_EXP_DATE'});
		print STDERR "month: $mm year: $yyyy\n";
		unless (&ZPAY::cc_verify_expiration($mm,$yyyy)) {
			$ERRORS .= 'Credit card has expired or is invalid.<br>';
			}

		unless (&ZPAY::cc_verify_cvvcid($ZOOVY::cgiv->{'ACCT_CC_NUMBER'},$ZOOVY::cgiv->{'ACCT_CC_CODE'})) {
			$ERRORS .= 'CID or CVV number is invalid for card type.<br>';
			}
		}
	
	elsif ($ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'} eq 'PAYPAL') {
		require ZTOOLKIT;
		unless (&ZTOOLKIT::validate_email($ZOOVY::cgiv->{'ACCT_PAYPAL_EMAIL'})) {
			$ERRORS .= 'Paypal email is invalid.<br>';
			}
		}

	if ($ERRORS eq '') {
		$S->save_property('.jedi.cc.number',$ZOOVY::cgiv->{'ACCT_CC_NUMBER'});
		$S->save_property('.jedi.cc.exp_date',$ZOOVY::cgiv->{'ACCT_CC_EXP_DATE'});
		$S->save_property('.jedi.cc.code',$ZOOVY::cgiv->{'ACCT_CC_CODE'});
		$S->save_property('.jedi.paypal.email',$ZOOVY::cgiv->{'ACCT_PAYPAL_EMAIL'});

		print STDERR "Saving Supplier\n";
		$S->save();
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited Payment Information for $CODE</font><br><br>";
		}
	else { $GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='red'>$ERRORS</font><br><br>"; }
	$LU->log('SUPPLIER.PAYMENT.SAVE',"[CODE: $CODE] payment settings were updated.",'INFO');

   $VERB = 'PAYMENT-EDIT';
   }


##
## only used for JEDI
##
if ($VERB eq 'PAYMENT-EDIT') {
	my $PROFILE = $S->fetch_property('PROFILE');
	$GTOOLS::TAG{'<!-- CODE -->'} = $CODE;
	$GTOOLS::TAG{'<!-- JEDI_CUSTOMER -->'} = $S->fetch_property('.jedi.customer');
	
	$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_CREDIT -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_PAYPAL -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_PAYPAL_EMAIL -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_OTHER -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_CC_NUMBER -->'} = "";
	$GTOOLS::TAG{'<!-- ACCT_CC_EXP_DATE -->'} ="";
	$GTOOLS::TAG{'<!-- ACCT_CC_CODE -->'} = "";
	$GTOOLS::TAG{'<!-- PROFILE -->'} = ($PROFILE)?$PROFILE:'DEFAULT';
	
	## get billing address
	my $address = ZOOVY::fetchmerchantns_attrib($USERNAME,$PROFILE,'zoovy:company_name');
	$address .= "<br>".ZOOVY::fetchmerchantns_attrib($USERNAME,$PROFILE,'zoovy:address1');
	$address .= (ZOOVY::fetchmerchantns_attrib($USERNAME,$PROFILE,'zoovy:address2') ne '')?
			"<br>".ZOOVY::fetchmerchantns_attrib($USERNAME,$PROFILE,'zoovy:address2'):'';
	$address .= "<br>".ZOOVY::fetchmerchantns_attrib($USERNAME,$PROFILE,'zoovy:city');
	$address .= ", ".ZOOVY::fetchmerchantns_attrib($USERNAME,$PROFILE,'zoovy:state');
	$address .= " ".ZOOVY::fetchmerchantns_attrib($USERNAME,$PROFILE,'zoovy:zip');	
	$GTOOLS::TAG{'<!-- ADDRESS -->'} = $address;
	
	my $payment = ($ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'} eq '')?$S->fetch_property('.jedi.payment_type'):$ZOOVY::cgiv->{'ACCT_PAYMENT_TYPE'};
	if ($payment eq 'CREDIT') {
		$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_CREDIT -->'} = 'checked';
		$GTOOLS::TAG{'<!-- ACCT_CC_NUMBER -->'} = ($S->fetch_property('.jedi.cc.number'))?$S->fetch_property('.jedi.cc.number'):$ZOOVY::cgiv->{'ACCT_CC_NUMBER'};
   	$GTOOLS::TAG{'<!-- ACCT_CC_EXP_DATE -->'} = ($S->fetch_property('.jedi.cc.exp_date'))?$S->fetch_property('.jedi.cc.exp_date'):$ZOOVY::cgiv->{'ACCT_CC_EXP_DATE'};
		$GTOOLS::TAG{'<!-- ACCT_CC_CODE -->'} = ($S->fetch_property('.jedi.cc.code'))?$S->fetch_property('.jedi.cc.code'):$ZOOVY::cgiv->{'ACCT_CC_CODE'};
		}
	elsif ($payment eq 'PAYPAL') {
		$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_PAYPAL -->'} = "checked";
		$GTOOLS::TAG{'<!-- ACCT_PAYPAL_EMAIL -->'} = ($S->fetch_property('.jedi.paypal.email'))?$S->fetch_property('.jedi.paypal.email'):$ZOOVY::cgiv->{'ACCT_PAYPAL_EMAIL'};
		}
	else {
		$GTOOLS::TAG{'<!-- ACCT_PAY_TYPE_OTHER -->'} = "checked";
		}


	$template_file = 'payment.shtml';
	push @BC, { name=>"Payment Setup" };
	}


##
##
## 
if ($VERB eq 'SAVE-EDIT') {
	## MODE is ATLAST, DOBA, SHIPWIRE, GENERIC, or API
	my $MODE = $S->fetch_property('MODE');
	my $ERROR = '';
	
	## validation
	if ($MODE eq 'PARTNER') {}
	else {
		require WHOLESALE;
		if ($ZOOVY::cgiv->{'NAME'} eq '') { $ERROR .= "<br>Name is required."; }
		if ($ZOOVY::cgiv->{'ACCOUNT'} eq '') {	$ERROR .= "<br>Account is required."; }
		if (&ZTOOLKIT::validate_phone($ZOOVY::cgiv->{'PHONE'}) == 0) { $ERROR .= "<br>Phone is invalid."; }
		if (&ZTOOLKIT::validate_email($ZOOVY::cgiv->{'EMAIL'}) == 0) { $ERROR .= "<br>Email is invalid."; }
		if (not &WHOLESALE::validate_formula($ZOOVY::cgiv->{'MARKUP'})) { $ERROR .= "<br>Markup formula does not appear to be valid."; }
		}

	if ($ERROR ne '') {
		$GTOOLS::TAG{'<!-- RESULT -->'} = &GTOOLS::errmsg($ERROR);
		}
	else {
		$S->save_property('MARKUP', $ZOOVY::cgiv->{'MARKUP'});
		$S->save_property('PROFILE', $ZOOVY::cgiv->{'PROFILE'});
		$S->save_property('NAME',$ZOOVY::cgiv->{'NAME'});
		$S->save_property('ACCOUNT',$ZOOVY::cgiv->{'ACCOUNT'});
		$S->save_property('PHONE',$ZOOVY::cgiv->{'PHONE'});
		$S->save_property('EMAIL',$ZOOVY::cgiv->{'EMAIL'});
		$S->save_property('WEBSITE',$ZOOVY::cgiv->{'WEBSITE'});
		$S->save_property('ITEM_NOTES',($ZOOVY::cgiv->{'ITEM_NOTES'} eq 'on')?1:0);
		$S->save_property('.partner.username',$ZOOVY::cgiv->{'.partner.username'});
		$S->save_property('.partner.password',$ZOOVY::cgiv->{'.partner.password'});
		$S->save_property('.partner.retailer_id',$ZOOVY::cgiv->{'.partner.retailer_id'});
		$S->save_property('.partner.product_prefix',$ZOOVY::cgiv->{'.partner.product_prefix'});
		$S->save_property('.partner.prepay',($ZOOVY::cgiv->{'.partner.prepay'} eq 'on')?1:0);
		if ($ZOOVY::cgiv->{'.partner.status'} eq '') { 
			$S->save_property('.partner.status','new'); 
			}

		if ($S->fetch_property('MODE') eq 'API') {
			$S->save_property('.api.dispatch_on_create', $ZOOVY::cgiv->{'.api.dispatch_on_create'});
			$S->save_property('.api.dispatch_full_order', $ZOOVY::cgiv->{'.api.dispatch_full_order'});
			$S->save_property('.api.version',$ZOOVY::cgiv->{'.api.version'});
			$S->save_property('.api.invurl',$ZOOVY::cgiv->{'.api.shipurl'});
			$S->save_property('.api.invhdr',$ZOOVY::cgiv->{'.api.invurl'});
			$S->save_property('.api.shipurl',$ZOOVY::cgiv->{'.api.shipurl'});
			$S->save_property('.api.orderurl',$ZOOVY::cgiv->{'.api.orderurl'});
			}

		$S->save();
		
		$GTOOLS::TAG{'<!-- RESULT -->'} = "<font color='blue'>Successfully edited Company Information for $CODE</font><br><br>";
		}

	$LU->log('SUPPLIER.PARTNER.SAVE',"[CODE: $CODE] partner settings were updated.",'INFO');
   $VERB = 'EDIT';
   }



##
## 
## needs @LINKS, @FIELDS
if ($VERB eq 'EDIT') {
	## reget object, because things may have been updated
	$S = SUPPLIER->new($USERNAME,$CODE);	

	$GTOOLS::TAG{'<!-- CODE -->'} = $CODE;
	$GTOOLS::TAG{'<!-- MARKUP -->'} = ($S->fetch_property('MARKUP'))?$S->fetch_property('MARKUP'):$ZOOVY::cgiv->{'MARKUP'};

	## PROFILE addition
	my $profileref = &ZOOVY::fetchprofiles($USERNAME);
	my $selected_profile = ($S->fetch_property('PROFILE'))?$S->fetch_property('PROFILE'):$ZOOVY::cgiv->{'PROFILE'};
	foreach my $profile (@{$profileref}) {
		my $selected = '';
		if ($profile eq $selected_profile) { $selected = "selected"; }
		$GTOOLS::TAG{'<!-- PROFILE -->'} .= qq~<option $selected value="$profile">$profile</option>~;
		} 

	$GTOOLS::TAG{'<!-- MODE -->'} = $S->fetch_property('MODE');
	
	my @FIELDS = ();
	my @LINKS = ();
	## ALL ???
	push @FIELDS, { id=>'MARKUP', title=>'Markup', type=>'text', size=>10, maxlength=>15 };
	push @FIELDS, { id=>'NAME', title=>'Name', type=>'text', size=>30, maxlength=>40 };
	push @FIELDS, { id=>'PHONE', title=>'Phone', type=>'text', size=>12, maxlength=>12 };
	push @FIELDS, { id=>'EMAIL', title=>'Email', type=>'text', size=>30, maxlength=>40 };
	push @FIELDS, { id=>'ACCOUNT', title=>'Account', type=>'text', size=>30, maxlength=>40 };
	push @FIELDS, { id=>'WEBSITE', title=>'Website', type=>'text', size=>30, maxlength=>40 };
	push @FIELDS, { id=>'ITEM_NOTES', title=>'Item Notes', type=>'checkbox', hint=>'Choose to display Supplier Code / Tracking info on Invoice (under each Item)'};

	## GENERIC
	if ($S->fetch_property('MODE') eq 'GENERIC') {
		if ($S->fetch_property('FORMAT') eq 'STOCK') {
			push @LINKS, {title=>'Shipping - Configuration', note=>'Stock Shipping uses your Zoovy store configuration' };
			}
		else {
			push @LINKS, {title=>'Shipping - Configuration', link=>"index.cgi?VERB=SHIPPING&CODE=$CODE" };
			}
		push @LINKS, {title=>'Products - Add Individual', link=>"index.cgi?VERB=ADDPRODUCTS&CODE=$CODE" };
		push @LINKS, {title=>'Products - Import Batch', link=>"index.cgi?VERB=IMPORT&CODE=$CODE" };
		#push @LINKS, {title=>'Products - Associate Existing', link=>"index.cgi?VERB=IMPORT&CODE=$CODE" };		
		push @LINKS, {title=>'Products - Report', link=>"index.cgi?VERB=PRODUCTS&CODE=$CODE" };		
		push @LINKS, {title=>'Orders - Delivery Configuration', link=>"index.cgi?VERB=ORDERING&CODE=$CODE" };
		push @LINKS, {title=>'Orders - Report', link=>"index.cgi?VERB=ORDERS&CODE=$CODE" };
		push @LINKS, {title=>'Inventory - Update Configuration', link=>"index.cgi?VERB=INVENTORY&CODE=$CODE" };
		}

	## API
	elsif ($S->fetch_property('MODE') eq 'API') {
		push @FIELDS, { id=>"*", title=>"API Link Configuration" };
		push @FIELDS, { 
			type=>'select',
			title=>'API Version',
			id=>".api.version",
			options=>[
				{ p=>"ORDER v3.108", v=>108 },
				{ p=>"XCBL v4", v=>4 },
				{ p=>"ORDER v1 (deprecated)", v=>1 }
				], 
			};
		push @FIELDS, {
			type=>'select',
			title=>'Automatically Dispatch Orders upon Creation',
			id=>".api.dispatch_on_create",
			options=>[
				{ p=>"No [RECOMMENDED]", v=>"0" },
				{ p=>"Yes", v=>"1" },
				],
			};
		push @FIELDS, {
			type=>'select',
			title=>'Transmit Full Order Contents upon Creation',
			id=>".api.dispatch_full_order",
			options=>[
				{ p=>"No [RECOMMENDED]", v=>"0" },
				{ p=>"Yes", v=>"1" },
				],
			};
		push @FIELDS, {
			type=>'text',
			title=>'API Order URL',
			id=>'.api.orderurl',  
			size=>90, maxlength=>128,
			};
		push @FIELDS, {
			type=>'text',
			title=>'ShipQuote URL',
			id=>'.api.shipurl',  
			size=>90, maxlength=>128,
			};
		push @FIELDS, {
			type=>'text',
			title=>'Inventory URL',
			id=>'.api.invurl',  
			size=>90, maxlength=>128,
			};
		push @FIELDS, {
			type=>'textarea',
			title=>'Inventory Header',
			id=>'.api.invhdr',  
			cols=>90, rows=>4,
			};
		push @FIELDS, {
			type=>'*hint',
			title=>'Note: it is completely acceptable for all URLs to be the same value.',
			};

		push @LINKS, {title=>'Products - Add Individual', link=>"index.cgi?VERB=ADDPRODUCTS&CODE=$CODE" };
		push @LINKS, {title=>'Products - Import Batch', link=>"index.cgi?VERB=IMPORT&CODE=$CODE" };
		#push @LINKS, {title=>'Products - Associate Existing', link=>"index.cgi?VERB=IMPORT&CODE=$CODE" };		
		push @LINKS, {title=>'Products - Report', link=>"index.cgi?VERB=PRODUCTS&CODE=$CODE" };		
		push @LINKS, {title=>'Orders - Report', link=>"index.cgi?VERB=ORDERS&CODE=$CODE" };
	
		}

	## PARTNERS
	## ATLAST
	elsif ($S->fetch_property('MODE') eq 'PARTNER') {
		push @LINKS, {title=>'Shipping - Configuration', link=>"index.cgi?VERB=SHIPPING&CODE=$CODE" };

		## Products are automatically imported when the merchant adds them to their waitlist
		## if its a pre-existing merchant (on DOBA) when merchant 'Allows' Zoovy access, all their products
		## from all their waitlists are automatically imported
		if ($S->fetch_property('PARTNER') ne 'DOBA') {
			push @LINKS, {title=>'Products - Add Individual', link=>"index.cgi?VERB=ADDPRODUCTS&CODE=$CODE" };
			push @LINKS, {title=>'Products - Import Batch', link=>"index.cgi?VERB=IMPORT&CODE=$CODE" };
			}
		else {
			## changed so only SUPPORT can run reimport
			if ($LUSERNAME eq 'SUPPORT') {
				push @LINKS,  { title=>'Products - (Re)Import Watchlists - please run this import sparingly.', link=>"index.cgi?VERB=IMPORT&CODE=$CODE" };
				}
			else {
				push @LINKS,  { title=>'Products - (Re)Import Watchlists - please submit a ticket to have your reimport run.', link=>"/biz/support/index.cgi?VERB=TICKET-CREATE" };
				}
			}
		#push @LINKS, {title=>'Products - Associate Existing', link=>"index.cgi?VERB=IMPORT&CODE=$CODE" };		
		push @LINKS, {title=>'Products - Report', link=>"index.cgi?VERB=PRODUCTS&CODE=$CODE" };		
		push @LINKS, {title=>'Orders - Delivery Configuration', link=>"index.cgi?VERB=ORDERING&CODE=$CODE" };
		push @LINKS, {title=>'Orders - Report', link=>"index.cgi?VERB=ORDERS&CODE=$CODE" };

		if ($S->fetch_property('PARTNER') eq 'ATLAST') {
			push @FIELDS, { type=>'text', title=>"AtLast Username", id=>".partner.username" };
			push @FIELDS, { type=>'text', title=>"AtLast Password", id=>".partner.password" };
			push @LINKS, {title=>'Inventory - Update Configuration', link=>"index.cgi?VERB=INVENTORY&CODE=$CODE" };
			}
		## SHIPWIRE
		elsif ($S->fetch_property('PARTNER') eq 'SHIPWIRE') {
			push @FIELDS, { type=>'*hint', hint=>qq~
<br>Signup for your <a target=_new href="http://partner.shipwire.com/o.php?id=1900">ShipWire account</a>
~ };
			push @FIELDS, { type=>'text', title=>"ShipWire Username", id=>".partner.username" };
			push @FIELDS, { type=>'text', title=>"ShipWire Password", id=>".partner.password" };

			}
		## QUICKBOOKS
		elsif ($S->fetch_property('PARTNER') eq 'QB') {
			push @FIELDS, { type=>'text', title=>"Vendor Name", id=>".partner.vendor" };
			}
		## DOBA
		elsif ($S->fetch_property('PARTNER') eq 'DOBA') {
			push @FIELDS, { type=>'text', title=>"DOBA Username", id=>".partner.username" };
			push @FIELDS, { type=>'text', title=>"DOBA Password", id=>".partner.password" };
			push @FIELDS, { type=>'text', title=>"DOBA Retailer ID", id=>".partner.retailer_id" };
			push @FIELDS, { type=>'text', title=>"DOBA Product Prefix", id=>".partner.product_prefix", size=>5, maxlength=>5, hint=>"This prefix will be prepended to the DOBA Supplier ID to create your PID [highly recommended!!]."};
			push @FIELDS, { type=>'checkbox', title=>"DOBA Prepay Merchant", id=>".partner.prepay", hint=>"Using Doba Prepay Services (prepay price will be used for product cost)." };
			push @FIELDS, { type=>'info', title=>"DOBA Status", id=>".partner.status"};
			push @FIELDS, { type=>'info', title=>"DOBA Status Notes", id=>".partner.status_notes"};
			}
		}
	## JEDI
	elsif ($S->fetch_property('MODE') eq 'JEDI') {
		push @LINKS, { title=>"Products - Subscribe from ".$S->fetch_property('.jedi.customer')." login", 
							link=>"https://ssl.zoovy.com/".$S->fetch_property('.jedi.username')."/login.cgis?login=".$S->fetch_property('.jedi.customer') };
		push @LINKS, {title=>'Products - Report', link=>"index.cgi?VERB=PRODUCTS&CODE=$CODE" };		
		push @LINKS, { title=>'Orders - Delivery Configuration', link=>"index.cgi?VERB=ORDERING&CODE=$CODE" };	
		push @LINKS, {title=>'Orders - Report', link=>"index.cgi?VERB=ORDERS&CODE=$CODE" };
		push @LINKS, { title=>'Payment Method - Configuration', link=>"index.cgi?VERB=PAYMENT-EDIT&CODE=$CODE" };	
		}
	
	## Build FIELDS
	my $out = '';
	foreach my $field (@FIELDS) {
		my $value = $S->fetch_property($field->{'id'});
		if ($field->{'type'} eq 'text') {
			$out .= qq~<tr bgcolor="#ffffff"><td size=100><b>$field->{'title'}:</b></td>~.
					  qq~<td><input class="formed" type="textbox" name="$field->{'id'}" value="$value" size="$field->{'size'}" maxlength="$field->{'maxlength'}"></td></tr>~;
			}
		elsif ($field->{'type'} eq 'textarea') { 
			$out .= qq~<tr bgcolor="#ffffff"><td size=100><b>$field->{'title'}:</b></td>~.
					  qq~<td><textarea name="$field->{'id'}" rows="$field->{'rows'}" cols="$field->{'cols'}">$value</textarea></td></tr>~;
			} 
		elsif ($field->{'type'} eq 'select') { 
			$out .= qq~<tr bgcolor="#ffffff"><td size=100><b>$field->{'title'}:</b></td>~.
					  qq~<td><select name="$field->{'id'}">~;
			foreach my $set (@{$field->{'options'}}) {
            my $selected = ($set->{'v'} eq $value)?'selected':'';
            $out .= "<option $selected value=\"$set->{'v'}\">$set->{'p'}</option>\n";
            }
         $out .= qq~</td></tr>~;
			}
		elsif ($field->{'type'} eq 'checkbox') { 
			my $checked = ($value == 1)?'checked':'';
			$out .= qq~<tr bgcolor="#ffffff"><td size=100><b>$field->{'title'}:</b></td>~.
					  qq~<td><input class="formed" type="checkbox" $checked name="$field->{'id'}"></td></tr>~;
			
			} 
		elsif ($field->{'type'} eq '*hint') { 
			
			} 
		elsif ($field->{'type'} eq 'info') {
			$out .= qq~<tr bgcolor="#ffffff"><td size=100><b>$field->{'title'}:</b></td>~.
					  qq~<td><input class="formed" type="hidden" name="$field->{'id'}" value="$value">$value</td></tr>~;
			}
		
		## add hint
		if ($field->{'hint'} ne '') {
			$out .= qq~<tr bgcolor="#ffffff"><td colspan=2><div class="hint">$field->{'hint'}</div></td></tr>~;
			}

		}
	
	
	$GTOOLS::TAG{'<!-- FIELDS -->'} = $out;


	## Build LINKS
	my $out = '';
	foreach my $link (@LINKS) {
		$out .= qq~<tr><td size=200><b>$link->{'title'}:</b></td><td size=100>~;
		if ($link->{'link'} ne '') { $out .= qq~<a href="$link->{'link'}">Click Here~; }
		if ($link->{'note'} ne '') { $out .= qq~ * $link->{'note'}~; }
		$out .= "</td></tr>";
		}
	
	
	$GTOOLS::TAG{'<!-- LINKS -->'} = $out;
	
	
	$template_file = 'edit.shtml';		
	}


	

if ($VERB eq 'SUBSCRIBE') {
	warn "No longer supported";
	$VERB = '';
	}
##
## note: SUBSCRIBE is passed from customer_main.pl to a person subscribing to a feed
##		parameters: INDEX, LOAD
##
## get db calls outta here
##
## checked
#if ($VERB eq 'SUBSCRIBE') {
#	my $SUPPLIERMID = int($ZOOVY::cgiv->{'MID'});
#	$S = SUPPLIER->new($USERNAME,"#".$SUPPLIERMID);
#	my $ERROR = '';
#	push @BC, { name=>"$CODE", link=>"/biz/manage/suppliers/index.cgi?VERB=EDIT&CODE=$CODE", target=>'_top' };
#
#	
#	my $SAFE = '';
#	my $PRETTY = '';
#
#	if (defined $S) {
#		my $INDEX = $ZOOVY::cgiv->{'INDEX'};
#		my $LOAD = $ZOOVY::cgiv->{'LOAD'};
#		my $CODE= $S->fetch_property('CODE');
#
#		require SUPPLIER::JEDI;
#		require NAVCAT;
#
#		my $PRODUCTSTR = ''; my $INFO = '';
#		($ERROR,$PRODUCTSTR,$INFO) = &SUPPLIER::JEDI::load_subscription($USERNAME,$INDEX,$LOAD);
#	
#		$PRETTY = $INFO->{'pretty'};
#		my $SRCUSER = $INFO->{'merchant'};		
#
#		if ($ERROR eq '') {
#			my $dbh = &DBINFO::db_zoovy_connect();
#
#			## determine if subscription already exists
#			my $pstmt = "select SRCSAFE,CREATED_GMT from SUPPLIER_SUBSCRIPTIONS ".
#							"where CODE=".$dbh->quote($CODE)." and SRCMID=".$dbh->quote($S->fetch_property('JEDI_MID')).
#							" and SRCUSER=".$dbh->quote($SRCUSER).
#							" and DSTMID=".$dbh->quote($MID)." and DSTUSER=".$dbh->quote($USERNAME).
#							" and PRETTY=".$dbh->quote($PRETTY);
#			print STDERR $pstmt."\n";
#			my $sth = $dbh->prepare($pstmt);
#			$sth->execute();
#			my ($current_SAFE,$current_CREATED) = $sth->fetchrow();
#			$sth->finish();
#
#			my $CREATED = '';
#			## insert
#			if ($current_SAFE eq '') {
#				$SAFE = $INFO->{'uuid'};
#				$SAFE =~ s/[^A-Z0-9a-z\_]//g;    # lets just be safe.
#				$SAFE = '$'.$SAFE;
#				$CREATED = time();
#				}
#			## update
#			else { 
#				$SAFE = $current_SAFE; 
#				$CREATED = $current_CREATED;
#				}
#
#			&DBINFO::insert($dbh,'SUPPLIER_SUBSCRIPTIONS',{
#				'CODE'=>$CODE,
#				'SRCMID'=>$S->fetch_property('JEDI_MID'),
#				'SRCUSER'=>$SRCUSER,
#				'DSTMID'=>$MID,
#				'DSTUSER'=>$USERNAME,
#				'SRCSAFE'=>$SAFE,
#				'DSTSAFE'=>$SAFE,
#				'PRETTY'=>$PRETTY,
#				'CREATED_GMT'=>$CREATED,
#				'UPDATED_GMT'=>time(),	
#				'PRODUCT_COUNT'=>$INFO->{'product_count'},			
#				},key=>['CODE','SRCMID','DSTMID','SRCSAFE']
#				 ,update=>1);
#
#			&DBINFO::db_zoovy_close();
#
#			## create list for JEDI Supplier Products
#			my %M = ();
#			$M{'VIRTUAL'} = 1;
#			$M{'INDEX'} = $ZOOVY::cgiv->{'INDEX'};
#			$M{'LOAD'} = $ZOOVY::cgiv->{'LOAD'};
#			my $meta = &NAVCAT::encode_meta(\%M);
#			
#			my ($NC) = NAVCAT->new($USERNAME);
#			print STDERR "Creating navcat: $SAFE, pretty=>$PRETTY, products=>$PRODUCTSTR\n"; 
#			$NC->set( $SAFE, pretty=>$PRETTY, products=>$PRODUCTSTR, metaref=>\%M ); 
#			$NC->save();
#			undef $NC;
#			}
#		}
#	else { $ERROR = "Supplier no longer defined!"; }
#	
#	if ($ERROR eq '') { $GTOOLS::TAG{'<!-- MESSAGE -->'} = "<font color='blue'>Successfully added LIST[$PRETTY] from SUPPLIER[$CODE]</font>"; }
#	else { $GTOOLS::TAG{'<!-- MESSAGE -->'} = &GTOOLS::errmsg($ERROR); }
#	
#	$LU->log('SUPPLIER.SUBSCRIBE.SAVE',"[CODE: $CODE] subscription settings were updated.",'INFO');
#	$VERB = '';
#	
#	}


##
## 
##
if ($VERB eq '') {
	my $c = '';

	my ($supref) = SUPPLIER::list_suppliers($MID);
	my $count = 0;
	foreach my $code (sort keys %{$supref}) {
		print STDERR Dumper($supref->{$code}->{'FORMAT'});
		#die();
		$count++;
		if ($supref->{'MODE'} eq '') {  $supref->{'MODE'} = '**INVALID**';  }
		$c .= "<tr class=\"table_bg".(($count%2)+1)."\">".
				
				"<td nowrap><a href=\"index.cgi?VERB=EDIT&CODE=$code\">$code</a> </td>".
				"<td nowrap>$supref->{$code}->{'NAME'}</td>".
				"<td nowrap>[<a href=\"index.cgi?VERB=ORDERS&CODE=$code\">Orders</a>] | [<a href=\"index.cgi?VERB=PRODUCTS&CODE=$code\">Products</a>]</td>".
				"<td nowrap>$supref->{$code}->{'MODE'}</td><td nowrap>$supref->{$code}->{'FORMAT'}</td></tr>";
		}
	
	if ($c eq '') { $GTOOLS::TAG{'<!-- SUPPLIERS -->'} = '<tr class="table_bg1"><td colspan="5"><i>No suppliers currently exist.</i></td>'; }
	else { $GTOOLS::TAG{'<!-- SUPPLIERS -->'} = "$c"; }

	push @BC, { name=>"Suppliers" };
	}




&GTOOLS::output(
	'file'=>$template_file,
	'title'=>$title,
	'header'=>1,
	'help'=>"#50694",
	'bc'=>\@BC,
	'tabs'=>\@TABS,
	);

&DBINFO::db_zoovy_close();
