#!/usr/bin/perl

#############################################################################
##  shipquote.cgi	v1.0
##
##  By: Brian Horakh <brian@zoovy.com>
##
##  This script and it's contents are copyright Zoovy, Inc. 2002
##	 You may modify and distribute this code freely, however it must always
##	 retain this header at the top of the file.
##
##	 No warranty is given, or implied. Use this script at your own risk.
##  This script is simply an example, and should not be used in production,
##	 no technical support will be provided.
##
#############################################################################
#
# Purpose: access Zoovy WebAPI to provide a accurate shipping quotes, by zip 
#			  code, weight, and product id to a customer, for a single product. 
#			  (you only need to include the items which directly affect you, 
#			  if you don't use rules, then you don't need a product id, etc.)
#
# Operational Theory:
#		Pass this script a productid, weight, and zip via a form POST
#		it will query Zoovy via the webapi and download a list of available
#		shipping methods, which it will then attempt to display to the customer.
#
# Usage: 
#	  your usage will vary, but most commonly people embed a hidden form inside
#	a html page (such as an html wizard) which looks something like this:
#
#	<form action="http://www.someurl.com/path/to/shipquote.cgi" method="POST">
#	<input type="hidden" name="productid" value="<!-- PRODUCTID -->">
#	<input type="hidden" name="weight" value="<!-- WEIGHT -->">
#	Zip Code: <input type="textbox" size="5" name="zip">
#	<input type="submit" value=" Get Quote ">
#	</form>
#
#	Hint: Adding a target="_blank" to the <form> tag will cause it to pop into a new 
#	window
#
#	Then adding the following variables to the html wizard definition file
#	<INPUT TYPE="SKU" SUB="<!-- PRODUCTID -->" NAME="channel:zoovy:sku" PROMPT="Product ID">
#	<INPUT TYPE="READONLY" SUB="<!-- WEIGHT -->" NAME="product:zoovy:base_weight" PROMPT="Weight">
#
# Script Installation:
# 	install to any UNIX host, which has Perl, LWP::UserAgent, and
#	HTTP::Request::Common. 
#	If you plan to perform queries to the SSL version of the webapi then you'll
#	want to have the OpenSSL or SSLeay options compiled into your LWP (duh!)
# 
#	Make sure the script is executable. Do not put your password in the script if other 
#	users on the system can read the script, it may result in a security breach of
#  your zoovy account.
#
# Testing: 
#	if you go directly to the form, and do not pass any parameters it will
#	create a make shift form, which you can use to see if the script works.
#	(just point your browser at the form)
#
# Gotchas:
#	USPS Insurance needs you to pass a price. Since this script is really for educational 
#	purposes, it certainly isn't intended to be a comprehensive script.
#


# zoovy account username
$zoovy_username = 'someuser';

# zoovy account password
# NOTE: not needed if store allows world readable shipping 
# which can be enabled in ship api configuration. (leave it blank)
# to enable word readable shipping (recommended) go to setup | shipping | ship api
$zoovy_password = ''; 		

# the URL to contact, if password is set then this should ALWAYS be 
# https, otherwise leaving it as http is fine.
$zoovy_calcshippingurl = 'http://www.zoovy.com/webapi/merchant/calcshipping.cgi';

use LWP::UserAgent;
use HTTP::Request::Common;

## Parse CGI parameters into %o hash
my $o;
read(STDIN,$o,$ENV{'CONTENT_LENGTH'});
my %o;
for (split(/&/,$o)) {
    $_ =~ s/\+/ /g;
    my($key,$val) = split(/=/,$_,2);
    for ($key,$val) {
        $_ =~ s/%([0-9a-fA-F][0-9a-fA-F])/chr(hex($1))/ge;
    }
    $o{$key} = $val;
}


if ( (not defined $o{'zip'}) || 
	  (not defined $o{'productid'}) || 
	  (not defined $o{'weight'}) ) {
	## if we don't have a zip, product id, or weight, create a simple form
	## the form has no action, most browsers will cause this to call itself
	## but if you have difficulty then add an action to the form.
	print "Content-type: text/html\n\n";
	print qq~
<html>
<head><title>Please Provide Required Information</title></head>
<body>
<form method="POST">
For an accurate shipping quote, please provide the following information:<br>
<table>
<tr>
	<td>Product ID:</td>
	<td><input type="textbox" name="productid" size="20" value="$o{'productid'}"></td>
</tr>
<tr>
	<td>Weight:</td>
	<td><input type="textbox" name="weight" size="5" value="$o{'weight'}"></td>
</tr>
<tr>
	<td>Zip Code:</td>
	<td><input type="textbox" name="zip" size="5" value="$o{'zip'}"></td>
</tr>
</table>
<input type="submit" value=" Request Quote ">
</form>
</body>
</html>
	~;
	}
else {

	my $agent = new LWP::UserAgent;
	$agent->agent('shipquote-demo/1.0');

	$cart = "<cart>";
	$cart = "<product id=\"$o{'productid'}\" wt=\"$o{'weight'}\" price=\"0.00\">";
	$cart .= "</cart>";

	$result = $agent->request(POST $zoovy_calcshippingurl,
	Content_Type   => 'application/x-www-urlencoded',
	Referer=>'http://www.whitehouse.gov/zoovy/rocks.asp',
	Content =>[ 
		'USERNAME'=>$zoovy_username,
		'PASSWORD'=>$zoovy_password,
		'ZIP'=>$o{'zip'},
		'CART'=>$cart,
		]);

	if ($result->content_type() =~ /error/i) {
		# this handles a webapi error which results in a content type of text/error 
		print "Content-type: text/html\n\n";
		print "<html>ERROR: ".$result->content()."</html>";
		}
	elsif ($result->is_success()) {

		$c = $result->content();
		# REFERENCE: at this point $c should look something like:
		# <method id="key" value="price">pretty name</method>
		# <method id="key" value="price">pretty name</method>
		#
		%methods = ();
		# use split to parse the XML result, (its much faster than
		# loading a big bulky XML parser.
		foreach $method (split(/\<\/method>/is,$c)) {
			# validate we have a valid method, not some garbage
			if ($method =~ /<METHOD/i) {
				$price = undef;
				if ($method =~ /value=\"(.*?)\"/i) { $price = $1; }
				next if (not defined $price);

				$name = 'shipping';	# default value
				if ($method =~ /id=\"(.*?)\"/is) { $name = $1; }

				# create a method hash key is name, value is price
				$methods{$name} = $price;
				}
			}
	## Build a table of the quotes:
	$QUOTETABLE = '<table>';
	foreach $method (keys %methods) {
		$QUOTETABLE .= "<tr><td>$method</td><td>$methods{$method}</td></tr>\n";
		}
	$QUOTETABLE .= '</table>';

	## Output
	print "Content-type: text/html\n\n";
	# Put your own HTML Below:
	print qq~
<html>
<body>
<b>Shipping Quote for $o{'zip'}</b><br>
$QUOTETABLE
</body>
</html>
	~;
		}
	else {
		## Error handler only run if zoovy is down.
		print "Content-type: text/html\n\n";
		print "<html><body><h1><font color='red'>ERROR: could not contact $zoovy_calcshippingurl</font></h1><br>Response:<br>".$result->content()."</body></html>";
		}
	}

