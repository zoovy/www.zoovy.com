#!/usr/bin/perl

use lib '/httpd/modules';
use ZOOVY;
use DBINFO;
use Data::Dumper;
use Tie::DB_Lock(VERBOSE=>1);
use DB_File;
use Fcntl;

$dbh = &DBINFO::db_zoovy_connect();

@attriblist = 'zoovy:prod_name,zoovy:prod_desc';

$USERNAME = 'wftp';
$qtUSERNAME = $dbh->quote($USERNAME);
$LASTINDEX = 0;

$LASTINDEX = int($LASTINDEX);
$pstmt = "select PRODUCT,PRODUCT_NAME,DATA from ZUSER_PRODUCTS where MERCHANT=$qtUSERNAME and TS>$LASTINDEX";
$sth = $dbh->prepare($pstmt);
$sth->execute();

chmod(0666,&ZOOVY::resolve_userpath($USERNAME)."/SEARCH.db",'r');
tie (%AR, 'Tie::DB_Lock', &ZOOVY::resolve_userpath($USERNAME)."/SEARCH.db", 'rw') or $error =1;

# clean out database
foreach $k (keys %AR) {
	delete $AR{$k};
	}

while ( ($product,$name,$data) = $sth->fetchrow() ) {
	$product = uc($product);
	$prodref = &ZOOVY::attrib_handler_ref($data);
	# print Dumper($prodref);

	next if (length($prodref->{'zoovy:prod_desc'})<100);

	foreach $k (keys %AR) {
		# strip the product from the index.
		if ($AR{$k} =~ /$product\-[\d]+\,/) {	
			$AR{$k} =~ s/$product\-[\d]+\,//s;
			}
		}

	# build a list of the keywords for the product
	# print Dumper(find_keywords($prodref->{'zoovy:prod_desc'}));
	$wordref = find_keywords($prodref->{'zoovy:prod_desc'}.' '.$prodref->{'zoovy:prod_name'}.' '.$prodref->{'zoovy:prod_name'});	
	print Dumper($wordref);
	foreach $k (keys %{$wordref}) {
		$AR{$k} .= "$product-".$wordref->{$k}.',';
		}

	}

print Dumper(\%AR);
untie(%AR);

&DBINFO::db_zoovy_close();

sub find_keywords {
	my ($text) = @_;
	my %hash = ();

	$text = lc($text);
	$text =~ s/\<.*?\>//gs;	# remove html	
	$text =~ s/\,\://g;		# these are kill characters, which means they shouldn't wrap
	$text =~ s/[ \:\;\[\]\(\)\'\"\$\.\!\?\|\n\r]+/_/gs;	# take out all non-relevant characters
	# take out extended ascii characters
	foreach (split(//,$text)) {
		if (ord($_)>128) { $text =~ s/$_//g; }
		if (ord($_)<32) { $text =~ s/$_//g; }
		}
	
	foreach $word (split('_',$text)) {
		if ($word =~ /[\d]+/) {
			# this is a number ?? do we want to do any validation??
			} else {
			next if (length($word)<3);
			}
		if (!defined($hash{$word})) { $hash{$word} = 0; }
		$hash{$word}++;
		}

	return(\%hash);
}