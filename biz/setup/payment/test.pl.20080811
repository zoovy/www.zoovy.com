#!/usr/bin/perl


use lib "/httpd/modules";
use ZPAY::AMZPAY;

#<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/cba/js/jquery.js"></script><script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/cba/js/widget/sandbox/widget.js"></script>
#<form method=POST action="https://payments-sandbox.amazon.com/checkout/A3U8OHMI7N1JUB">
#<input type="hidden" name="order-input" value="type:cba-signed-order/sha1-hmac/1;order:
#PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPz48T3JkZXIgeG1sbnM9J2h0dHA6
#Ly9wYXltZW50cy5hbWF6b24uY29tL2NoZWNrb3V0LzIwMDgtMDYtMTUvJz48Q2FydD48SXRlbXM+
#PEl0ZW0+PFNLVT5URVNUPC9TS1U+PE1lcmNoYW50SWQ+QTNVOE9ITUk3TjFKVUI8L01lcmNoYW50
#SWQ+PFRpdGxlPlRlc3QgSXRlbTwvVGl0bGU+PERlc2NyaXB0aW9uPkl0ZW0gVGVzdDwvRGVzY3Jp
#cHRpb24+PFByaWNlPjxBbW91bnQ+MS4wMDwvQW1vdW50PjxDdXJyZW5jeUNvZGU+VVNEPC9DdXJy
#ZW5jeUNvZGU+PC9QcmljZT48UXVhbnRpdHk+MTwvUXVhbnRpdHk+PFdlaWdodD48QW1vdW50PjU8
#L0Ftb3VudD48VW5pdD5sYi48L1VuaXQ+PC9XZWlnaHQ+PEZ1bGZpbGxtZW50TmV0d29yaz5NRVJD
#SEFOVDwvRnVsZmlsbG1lbnROZXR3b3JrPjwvSXRlbT48L0l0ZW1zPjwvQ2FydD48L09yZGVyPg==
#;signature:E1IMV4RUrFZyL1kG2ZiooddG1LE=">
#<input alt="Checkout with Amazon Payments" src="https://payments-sandbox.amazon.com/gp/cba/button?ie=UTF8&color=orange&background=white&size=medium" type="image">
#</form>


$b64 = q~
PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPz48T3JkZXIgeG1sbnM9J2h0dHA6
Ly9wYXltZW50cy5hbWF6b24uY29tL2NoZWNrb3V0LzIwMDgtMDYtMTUvJz48Q2FydD48SXRlbXM+
PEl0ZW0+PFNLVT5URVNUPC9TS1U+PE1lcmNoYW50SWQ+QTNVOE9ITUk3TjFKVUI8L01lcmNoYW50
SWQ+PFRpdGxlPlRlc3QgSXRlbTwvVGl0bGU+PERlc2NyaXB0aW9uPkl0ZW0gVGVzdDwvRGVzY3Jp
cHRpb24+PFByaWNlPjxBbW91bnQ+MS4wMDwvQW1vdW50PjxDdXJyZW5jeUNvZGU+VVNEPC9DdXJy
ZW5jeUNvZGU+PC9QcmljZT48UXVhbnRpdHk+MTwvUXVhbnRpdHk+PFdlaWdodD48QW1vdW50PjU8
L0Ftb3VudD48VW5pdD5sYi48L1VuaXQ+PC9XZWlnaHQ+PEZ1bGZpbGxtZW50TmV0d29yaz5NRVJD
SEFOVDwvRnVsZmlsbG1lbnROZXR3b3JrPjwvSXRlbT48L0l0ZW1zPjwvQ2FydD48L09yZGVyPg==
~;


$b64 = qq~PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPE9yZGVyIHhtbG5zPSJodHRwOi8vcGF5bWVudHMuYW1hem9uLmNvbS9jaGVja291dC8yMDA4LTA2LTE1LyI+CiAgPENhcnQ+CiAgICA8SXRlbXM+CiAgICAgIDxJdGVtPgogICAgICAgIDxTS1U+NDA3MTE2PC9TS1U+CiAgICAgICAgPE1lcmNoYW50SWQ+QTFZVjVWR0VCMlFMNk88L01lcmNoYW50SWQ+CiAgICAgICAgPFRpdGxlPlN0ZXAgQnJvdGhlcnMgLSA8L1RpdGxlPgogICAgICAgIDxQcmljZT4KICAgICAgICAgIDxBbW91bnQ+MjkuOTk8L0Ftb3VudD4KICAgICAgICAgIDxDdXJyZW5jeUNvZGU+VVNEPC9DdXJyZW5jeUNvZGU+CiAgICAgICAgPC9QcmljZT4KICAgICAgICA8UXVhbnRpdHk+MTwvUXVhbnRpdHk+CiAgICAgICAgPFNoaXBwaW5nTWV0aG9kSWRzPgogICAgICAgICAgPFNoaXBwaW5nTWV0aG9kSWQ+Mi0zV2Vla3NSZWd1bGFyTWFpbDwvU2hpcHBpbmdNZXRob2RJZD4KICAgICAgICA8L1NoaXBwaW5nTWV0aG9kSWRzPgogICAgICAgIDxJbWFnZXM+CiAgICAgICAgICA8SW1hZ2U+CiAgICAgICAgICAgIDxVUkw+aHR0cDovL3d3dy5tb3ZpZWdvb2RzLmNvbS9hc3NldHMvcHJvZHVjdF9pbWFnZXMvMTAwMC80MDcxMTYuMTAwMC5hLmpwZzwvVVJMPgogICAgICAgICAgPC9JbWFnZT4KICAgICAgICA8L0ltYWdlcz4KICAgICAgPC9JdGVtPgogICAgICA8SXRlbT4KICAgICAgICA8U0tVPjQxMTE4MDwvU0tVPgogICAgICAgIDxNZXJjaGFudElkPkExWVY1VkdFQjJRTDZPPC9NZXJjaGFudElkPgogICAgICAgIDxUaXRsZT5Td2luZyBWb3RlIC0gMjcgeCA0MCBNb3ZpZSBQb3N0ZXIgLSBTdHlsZSBBPC9UaXRsZT4KICAgICAgICA8UHJpY2U+CiAgICAgICAgICA8QW1vdW50PjI5Ljk5PC9BbW91bnQ+CiAgICAgICAgICA8Q3VycmVuY3lDb2RlPlVTRDwvQ3VycmVuY3lDb2RlPgogICAgICAgIDwvUHJpY2U+CiAgICAgICAgPFF1YW50aXR5PjE8L1F1YW50aXR5PgogICAgICAgIDxTaGlwcGluZ01ldGhvZElkcz4KICAgICAgICAgIDxTaGlwcGluZ01ldGhvZElkPjItM1dlZWtzUmVndWxhck1haWw8L1NoaXBwaW5nTWV0aG9kSWQ+CiAgICAgICAgPC9TaGlwcGluZ01ldGhvZElkcz4KICAgICAgICA8SW1hZ2VzPgogICAgICAgICAgPEltYWdlPgogICAgICAgICAgICA8VVJMPmh0dHA6Ly93d3cubW92aWVnb29kcy5jb20vYXNzZXRzL3Byb2R1Y3RfaW1hZ2VzLzEwMDAvNDExMTgwLjEwMDAuYS5qcGc8L1VSTD4KICAgICAgICAgIDwvSW1hZ2U+CiAgICAgICAgPC9JbWFnZXM+CiAgICAgIDwvSXRlbT4KICAgIDwvSXRlbXM+CiAgPC9DYXJ0PgogIDxEZWZhdWx0VGF4VGFibGU+CiAgICA8VGF4VGFibGVJZD5kZWZhdWx0LXRheC10YWJsZTwvVGF4VGFibGVJZD4KICAgIDxUYXhSdWxlcz4KICAgICAgPFRheFJ1bGU+CiAgICAgICAgPFJhdGU+LjA3NzU8L1JhdGU+CiAgICAgICAgPElzU2hpcHBpbmdUYXhlZD5mYWxzZTwvSXNTaGlwcGluZ1RheGVkPgogICAgICAgIDxVU1N0YXRlUmVnaW9uPk5WPC9VU1N0YXRlUmVnaW9uPgogICAgICA8L1RheFJ1bGU+CiAgICA8L1RheFJ1bGVzPgogIDwvRGVmYXVsdFRheFRhYmxlPgogIDxTaGlwcGluZ01ldGhvZHM+CiAgICA8U2hpcHBpbmdNZXRob2Q+CiAgICAgIDxTaGlwcGluZ01ldGhvZElkPjItM1dlZWtzUmVndWxhck1haWw8L1NoaXBwaW5nTWV0aG9kSWQ+CiAgICAgIDxTZXJ2aWNlTGV2ZWw+U3RhbmRhcmQ8L1NlcnZpY2VMZXZlbD4KICAgICAgPFJhdGU+CiAgICAgICAgPFNoaXBtZW50QmFzZWQ+CiAgICAgICAgICA8QW1vdW50PjguNDk8L0Ftb3VudD4KICAgICAgICAgIDxDdXJyZW5jeUNvZGU+VVNEPC9DdXJyZW5jeUNvZGU+CiAgICAgICAgPC9TaGlwbWVudEJhc2VkPgogICAgICA8L1JhdGU+CiAgICAgIDxJbmNsdWRlZFJlZ2lvbnM+CiAgICAgICAgPFByZWRlZmluZWRSZWdpb24+VVNDb250aW5lbnRhbDQ4U3RhdGVzPC9QcmVkZWZpbmVkUmVnaW9uPgogICAgICA8L0luY2x1ZGVkUmVnaW9ucz4KICAgIDwvU2hpcHBpbmdNZXRob2Q+CiAgPC9TaGlwcGluZ01ldGhvZHM+CjwvT3JkZXI+Cg==~;

use MIME::Base64;
$xml = MIME::Base64::decode_base64($b64);
#print "XML: $xml\n";


	use lib "/httpd/modules";
	use ZWEBSITE;
	($webdbref) = &ZWEBSITE::fetch_website_dbref("hotnsexymama");
	$sk = $webdbref->{'amzpay_secretkey'};
	print Dumper($xml,$sk);

	use Digest::HMAC;
	use Digest::HMAC_SHA1;
	#my ($hmac) = Digest::HMAC->new($webdbref->{'amzpay_secretkey'}, "Digest::HMAC_SHA1");
	# $hmac->add($xml);
	$sk = '13EMEBM9Q57T5V52Q382';
	$digest = Digest::HMAC_SHA1::hmac_sha1($xml,$sk);

	#my $digest = $hmac->b64digest;
	#my $digest2 = $hmac->digest;
	$digest2 = MIME::Base64::encode_base64($digest);
	print "DIGEST:  $digest\n";
	print "DIGEST2: $digest2";

	print "SHOULDBE:E1IMV4RUrFZyL1kG2ZiooddG1LE=\n";


exit;
my ($c) = CART->new("hotnsexymama","d2gd6gvjHWG6XyHWvk868RaJv");
print ZPAY::AMZPAY::xmlCart($c);


exit;

use XML::Simple;


my $xml = qq~<Order xmlns="http://payments.amazon.com/checkout/2008-06-15/">
  <Cart>
    <Items>
      <Item>
        <SKU>ABC123</SKU>
        <MerchantId>AEIOU1234AEIOU</MerchantId>
        <Title>Red Fish</Title>
        <Price>
          <Amount>19.99</Amount>
          <CurrencyCode>USD</CurrencyCode>
        </Price>
        <Quantity>1</Quantity>
      </Item>
      <Item>
        <SKU>ABC123</SKU>
        <MerchantId>AEIOU1234AEIOU</MerchantId>
        <Title>Red Fish</Title>
        <Price>
          <Amount>19.99</Amount>
          <CurrencyCode>USD</CurrencyCode>
        </Price>
        <Quantity>1</Quantity>
      </Item>
    </Items>
  </Cart>
</Order>~;

my $ref = XML::Simple::XMLin($xml,keep_root=>1,force_array=>1);

use Data::Dumper; print Dumper($ref);
print XML::Simple::XMLout($ref,keep_root=>1);

use lib "/httpd/modules";
use ZPAY::AMZPAY;

print ZPAY::AMZPAY::xmlCart();

exit;

use lib "/httpd/modules";
use Data::Dumper;
use ZPAY;

$webdbref->{'google_pixelurls'} = qq~https://www.bizrate.com/roi/index.xpml?cust_type=1&mid=76131&order_id=[order-id]&order_value=[order-subtotal]~;

   if ($webdbref->{'google_pixelurls'} ne '') {
      foreach my $line (split(/[\n\r]+/,$webdbref->{'google_pixelurls'})) {
			print "LINE: $line\n";
         next if ($line eq '');
         my ($url,$paramsline) = split(/\?/,$line,2);
         my $pref = &ZTOOLKIT::parseparams($paramsline);
         my %url_params = ();
         foreach my $k (keys %{$pref}) {
            ## look for key=[value]
            if ($pref->{$k} =~ /^\[(.*)\]$/) {
               $url_params{$k} = $1;
               delete $pref->{$k};
               }
            }
         $url .= '?'.&ZTOOLKIT::buildparams($pref,1);
			print Dumper($url,\%url_params);
#         my $purls = Google::Checkout::General::ParameterizedUrl->new(
#            url=>$url, url_params => \%url_params);
#         $checkout_flow->add_parameterized_url($purls);
         }
      }


exit;

foreach $k (ZPAY::payment_methods_array('brian','Iran'))
	{ print $k."\n"; }
