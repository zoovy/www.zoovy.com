



<hr>

<!--

	my $PANEL = 'DOMAIN:'.$d->{'DOMAIN'};
	my ($USERNAME) = $LU->username();
	my ($LUSER) = $LU->luser();
	my $FLAGS = $LU->flags();
	my ($PRT) = $LU->prt();
	my ($prtinfo) = &ZOOVY::fetchprt($USERNAME,$d->prt());

#$VAR1 = {
#          'techinvasion-cart' => 'Rz5oTrCpSNbPxs5Y4XOeusdo2',
#          'session_id' => 'brian*SUPPORT@ws3P1qnha0rD0aIQS9CVtJZOk@882589@@BASIC,FM,PKG=STORE,SC,SHIP,WEB,XSELL,ZM,ZOM,ZPM,_P=255,_S=255,_O=255,_M=255',
#          '_panel' => 'DOMAIN:brian.zoovy.com',
#          'VERB' => 'ADD-ALIAS',
#          '404-cart' => '*',
#          'DOMAIN' => 'brian.zoovy.com',
#          '_pid' => '',
#          'm' => 'DOMAINEDIT/Save',
#          'DOMAIN:brian.zoovy.com!state' => 1
#        };
	my $ALIAS_ERRORS = '';
	my $MAP_ERRORS = '';
	my @ERRORS = ();

	if ($formref->{'VERB'} ne '') {
		$VERB = $formref->{'VERB'};
		}
	if ($VERB eq 'LOAD') { $VERB = ''; }


	if ($VERB eq 'ADD-ALIAS') {
		require ZTOOLKIT;
		if (not &ZTOOLKIT::validate_email($formref->{'ALIAS'}.'@something.com')) {
			$ALIAS_ERRORS = "<font color='red'>Alias [$formref->{'ALIAS'}] is invalid.</font>";
			}
		elsif ($d->{'EMAIL_TYPE'} eq 'ZM') {
			$d->add_alias($formref->{'ALIAS'},'',NEWSLETTER=>1);		
			}
		elsif (not &ZTOOLKIT::validate_email($formref->{'TARGET_EMAIL'})) {
			$ALIAS_ERRORS = "<font color='red'>Target email [$formref->{'TARGET_EMAIL'}] is invalid.</font>";
			}
#		elsif ($d->{'EMAIL_TYPE'} eq 'FWD') {
#			$d->add_alias($formref->{'ALIAS'},$formref->{'TARGET_EMAIL'},NEWSLETTER=>0,AUTORESPONDER_MSG=>$formref->{'AUTORESPONDER_MSG'});
#			}
		$VERB = '';
		}
	
	if ($VERB eq 'KILL-ALIAS') {
		$d->del_alias($formref->{'ALIAS'});
		$VERB = '';
		}


	if ($VERB eq 'ADD-MAP') {
		$d->add_map($formref->{'PATH'},$formref->{'TARGETURL'});		
		$VERB = '';
		}

	if ($VERB eq 'KILL-MAP') {
		$d->del_map($formref->{'PATH'});		
		$VERB = '';
		}

	# print STDERR "VERB: $VERB\n";

	my $foundnews = 0;
	my $statusmsg = $d->{'STATUS_TXT'};
	my $out = '';

	# my $FLAGS = ',CRM,WEB,XSELL,';
	if (($FLAGS =~ /,CRM,/) && ($foundnews==0)) {
		}	
	my $domain = $d->{'DOMAIN'};
	
		$out .= qq~
<input type="hidden" name="DOMAIN" value="$d->{'DOMAIN'}">
<input type="hidden" name="VERB" value="">
		~;




	if ($VERB eq 'NUKE') {
		$out .= qq~
<br>
<font color='red'>WARNING:</font> You are about to completely remove all traces of the domain $d->{'DOMAIN'} from the Zoovy system. 
This is an unrecoverable act, once it is done the domain will cease to function, all traffic sent to this domain will be lost.
This will more than likely negatively impact your sales.<br>
<br>
To continue and remove the domain press "Proceed", to stop and go back press "Cancel".<br>
<br>
<input class='button' style='width: 120px;' type='button' value='Cancel' onClick="savePanel('$PANEL');">
<input class='button' style='width: 120px;' type='button' value='Proceed' onClick="this.form.VERB.value='REALLY-NUKE'; this.form.submit();">
<br>
<br>

		~;
		}


	##
	##
	##
	if (($VERB eq 'UPDATE-EDIT') || ($VERB eq 'UPDATE-SAVE')) {
		# print STDERR Dumper($formref);
		$d->{'HOST_TYPE'} = $formref->{'HOST_TYPE'};	
		$d->{'REDIR_DOMAIN'} = '';
		$d->{'SUB_MASTER'} = '';
		$d->{'EMAIL_TYPE'} = $formref->{'EMAIL_TYPE'};

		if ($d->{'HOST_TYPE'} eq 'REDIR') {
			$d->{'REDIR_DOMAIN'} = $formref->{'REDIR_DOMAIN'};
			}
		elsif ($d->{'HOST_TYPE'} eq 'SPECIALTY') {
			$d->{'PROFILE'} = $formref->{'PROFILE'};
			}
		elsif ($d->{'HOST_TYPE'} eq 'SPLASH') {
			$d->{'EMAIL_TYPE'} = 'NONE';
			$d->{'SPLASH_URL'} = $formref->{'SPLASH_URL'};
			$d->{'REDIR_DOMAIN'} = $formref->{'REDIR_DOMAIN'};
			}
		elsif ($d->{'HOST_TYPE'} eq 'PRIMARY') {
			my ($PROFILE) = &ZWEBSITE::prt_get_profile($USERNAME,$d->prt());
			$d->{'PROFILE'} = $PROFILE;
			}
		else {
			}

		if ($d->{'EMAIL_TYPE'} eq 'ZM') {
			}
		elsif ($d->{'EMAIL_TYPE'} eq 'MX') {
			$d->{'EXTERNAL_MX1'} = $formref->{'EXTERNAL_MX1'};
			$d->{'EXTERNAL_MX2'} = $formref->{'EXTERNAL_MX2'};
			}
#		elsif ($d->{'EMAIL_TYPE'} eq 'FWD') {
#			if ( &ZTOOLKIT::validate_email($formref->{'FWD_TARGET_EMAIL'}) || ($formref->{'FWD_TARGET_EMAIL'} eq '') ) {
#				$d->{'FWD_TARGET_EMAIL'} = $formref->{'FWD_TARGET_EMAIL'};
#				}
#			else {
#				push @ERRORS, "Default email [$formref->{'FWD_TARGET_EMAIL'}] is invalid";
#				$d->{'FWD_TARGET_EMAIL'} = '';
#				}
#			}

		$d->save(); 
		$LU->log('SETUP.DOMAINS',"Saved domain=$d->{'DOMAIN'} profile=$d->{'PROFILE'} host-type=$d->{'HOST_TYPE'} prt=$d->{'PRT'} email=$d->{'EMAIL_TYPE'}","SAVE");
		if (scalar(@ERRORS)>0) {
			$VERB = 'UPDATE-EDIT';
			}

		if ($VERB eq 'UPDATE-SAVE') { $VERB = ''; }
		else { $VERB = 'EDIT'; }
		}


	if ($VERB eq 'EDIT') {

		if (scalar(@ERRORS)) {
			foreach my $err (@ERRORS) {
				$out .= "<font color='red'>ERROR: $err<br></font>";
				}
			}
			
		$out .= qq~
	<b>Edit Domain Configuration</b><br><center><table width=90%><tr><td nowrap width=1>Hosting Type:</td><td>
		<select onChange="savePanel('$PANEL','UPDATE-EDIT');" name="HOST_TYPE">~;
		foreach my $type (keys %DOMAIN::HOST_TYPES) {
			next if (($type eq '') && ($d->{'HOST_TYPE'} ne ''));
			next if (($FLAGS !~ /,XSELL,/) && ($type eq 'SPECIALTY'));
			next if (($FLAGS !~ /,CRM,/) && ($type eq 'NEWSLETTER'));
			next if (($d->{'REG_TYPE'} eq 'VSTORE') && ($type ne 'PRIMARY') && ($type ne 'REDIR'));
			$out .= '<option '.(($d->{'HOST_TYPE'} eq $type)?'selected':'').' value="'.$type.'">('.$type.') '.$DOMAIN::HOST_TYPES{$type}.'</option>'; 
			}
		$out .= qq~</select>
		</td></tr><tr><td colspan='2'>~;



		if ($d->{'HOST_TYPE'} eq 'PRIMARY') {
			my ($PROFILE) = &ZWEBSITE::prt_get_profile($USERNAME,$d->prt());
			}
		elsif ($d->{'HOST_TYPE'} eq 'NEWSLETTER') {
			## newsletter domain
			$out .= qq~
~;
			}
		elsif ($d->{'HOST_TYPE'} eq 'SPLASH') {
			$out .= qq~
			}
		elsif ($d->{'HOST_TYPE'} eq 'SPECIALTY') {
			$out .= "<b>Specialty Site Configuration:</b><br>";
			##

			my $PROFILES = '';
			my $profileref = &ZOOVY::fetchprofiles($USERNAME, 'FILTER'=>'NO_DOMAIN_MAPPED');
			#if ($d->{'SP_PROFILE'} eq '') {
			#	$PROFILES .= "<option value=\"\">DEFAULT PROFILE w/LEGACY LOGO SUPPORT (DEPRECATED - DO NOT USE!)</option>";
			#	}
			
			unshift @{$profileref}, $d->{'PROFILE'};
				}

			$out .= qq~
<font size='2'>
Lets a single Zoovy account have multiple appearances and pricing+shipping+promotion models based on which 
domain name a customer arrives at.
</font>
						<table>
							<tr>
								<td valign='top'>Associated Profile:</td>
								<td>
									<select name="PROFILE">
									$PROFILES
									</select>
								<br>

<div class="hint">
HINT: You may create Configuration Profiles by going to Setup | Company Profiles.<br>
<br>
Configuration profiles store information such as contact information, about us, returns policy, email messages, 
and much more. Each profile may have a unique wrapper, pricing schedule, and root category, company logo, etc.
<br>
You may have only one domain associated with a profile at any time.  All other related domains should simply be 
configured as redirect domains, or splash domains (for SEO reasons).
</div>
								</td>
							</tr>
						</table>
					</td>
				</tr>
			</table>
			~;
			}
		elsif ($d->{'HOST_TYPE'} eq 'REDIR') {
			require DOMAIN::TOOLS;
			$out .= qq~
			<i>Use a redirect domain to send all traffic and robots from one domain (e.g. yourname.net) 
		to another domain that you own (e.g. yourname.com) using a HTTP 301 redirect. </i><br>
		<br>
			~;
			$out .= qq~<b>Redirect Destination Domain:</b> <select name="REDIR_DOMAIN">~;
			my (@d) = DOMAIN::TOOLS::domains($USERNAME,SKIP_VSTORE=>1,REG_TYPE=>['NEW','TRANSFER','ZOOVY'],HOST_TYPE=>['PRIMARY','SPECIALTY']);
			my $i = 0;
			foreach my $dx (@d) {
				next if ($d->{'DOMAIN'} eq $dx);
				$out .= "<option ".(($d->{'REDIR_DOMAIN'} eq $dx)?'selected':'')." value=\"$dx\">$dx</option>";
				$i++;
				}
			$out .= qq~</select><br>~;
			if ($i==0) { $out .= "<font color='red'>NO ELIGIBLE DOMAINS - PLEASE SELECT A DIFFERENT DOMAIN HOSTING TYPE!</font><br>"; }

			$out .= qq~
			<br>
			<br>
			For a domain to appear as an available destination Zoovy must be the registrar handling the domain.
			The target domain	must also be configured as either a DEFAULT or SPECIALTY hosting type.
			<br>
			<ul>
			<li> More Information: <a target="_webdoc" href="http://webdoc.zoovy.com/doc/50858">Transferring Domains Survival Guide</a>
			<li> More Information: <a target="_webdoc" href="http://webdoc.zoovy.com/doc/50971">Business Case: Why make Zoovy your Registrar</a>
			</ul>
			~;
			}


		$out .= qq~<tr><td>&nbsp;</td></tr>~;
	
		## Email Forwarding no longer supported
		## only show to merchants who already have it selected
		$out .= qq~<tr><td>Email:</td><td><select  onChange="savePanel('$PANEL','UPDATE-EDIT');"  name="EMAIL_TYPE">~;
		
		my @EMAIL_TYPES = ();


		if (($d->{'HOST_TYPE'} eq 'REDIR') || ($d->{'HOST_TYPE'} eq 'SPLASH')) {
			## SPLASH/REDIR PAGES ARE ONLY ALLOWED "NONE"
			push @EMAIL_TYPES, 'NONE';
			}
		elsif ($d->{'HOST_TYPE'} eq 'MINISITE') {
			push @EMAIL_TYPES, 'NONE';
			}
		elsif ($d->{'HOST_TYPE'} eq 'NEWSLETTER') {
			## SPLASH/REDIR PAGES ARE ONLY ALLOWED "NONE"
			push @EMAIL_TYPES, 'NONE';
			}
		elsif ($d->{'REG_TYPE'} eq 'OTHER') {
			if ($FLAGS =~ /,ZM,/) { push @EMAIL_TYPES, 'ZM'; }
			if ($FLAGS !~ /,BPP,/) { push @EMAIL_TYPES, 'GOOGLE'; }
			push @EMAIL_TYPES, 'NONE';
			push @EMAIL_TYPES, 'MX'; 
			}
		else {
			# if (($type eq 'ZM') && ($FLAGS !~ /,ZM,/)) { push @EMAIL_TYPES, 'ZM'; }
			if ($FLAGS =~ /,ZM,/) { push @EMAIL_TYPES, 'ZM'; }
			if ($FLAGS !~ /,BPP,/) { push @EMAIL_TYPES, 'MX'; }
			if ($FLAGS !~ /,BPP,/) { push @EMAIL_TYPES, 'GOOGLE'; }
			push @EMAIL_TYPES, 'NONE';
			}

		if (($d->{'EMAIL_TYPE'} ne '') && (grep($d->{'EMAIL_TYPE'},@EMAIL_TYPES))) {
			## if they have a type configured, and it wasn't shown, then let them re-select it.
			push @EMAIL_TYPES, $d->{'EMAIL_TYPE'};
			}

		if ($d->{'REG_TYPE'} eq 'VSTORE') { @EMAIL_TYPES = ('ZM'); }
		if ($d->{'EMAIL_TYPE'} eq '') { push @EMAIL_TYPES, ''; }	# currently not configured!

		foreach my $type (@EMAIL_TYPES) {
			## this only allows people with FWD to select FWD (in other words, nothing for new customers)
			# next if (($type eq 'FWD') && ($d->{'EMAIL_TYPE'} ne 'FWD'));
			
			$out .= "<option ".(($type eq $d->{'EMAIL_TYPE'})?'selected':'')." value=\"$type\">($type) ".$DOMAIN::EMAIL_TYPES{$type}."</option>";
			}
		$out .= qq~</select></td></tr>~;

		if ($d->{'EMAIL_TYPE'} eq 'NONE') {
			# $out .= qq~<tr><td colspan=2>Email functionality is currently disabled for this domain.</td></tr>~;
			}

#		## legacy default email forwarding.
#		if ($d->{'EMAIL_TYPE'} eq 'FWD') {
#			$out .= qq~
#			<tr>
#				<td colspan='2'>	
#				<i><b>Email forwarding</b> is not recommended for use by our customers and is shown here as part of 
#				legacy support for an old product.  
#				You are encouraged to schedule an appointment with Zoovy customer service to find out how to use 
#				similar functionality in the new ZoovyMail 2.0 platform.  
#				If you are having problems with your mail forwarding, you will first be asked to migrate your domains to the 
#				ZoovyMail 2.0 platform before we continue troubleshooting any issue.</i>
#	
#					<br><br>
#					The default email address is the destination where all mail sent to this domain will be delivered.<br>
#					Default Forwarding Address: 
#					<input type="text" name="FWD_TARGET_EMAIL" maxlength="45" size="45" value="$d->{'FWD_TARGET_EMAIL'}">
#					<br>
#					Leave the default email address blank if you would prefer to only forward specific aliases 
#					(which you can specify later)
#				</td>
#			</tr>~;
#			}
		elsif ($d->{'EMAIL_TYPE'} eq 'ZM') {
			}
		elsif ($d->{'EMAIL_TYPE'} eq 'MX') {
			$out .= qq~<tr><td colspan='2'>
		<b><u>External Mail Exchange (MX) Configuration</u></b><br>
		<br>
		Use this if you use a webmail service such as godaddy.com which requires you delegate MX authority to them, 
		then enter the MX servers below.
		<table>
				<tr>
				<td>Primary MX Server:</td>
				<td><input type="textbox" name="EXTERNAL_MX1" value="$d->{'EXTERNAL_MX1'}"></td>
				</tr><Tr>
				<td>Secondary MX Server:</td>
				<td><input type="textbox" name="EXTERNAL_MX2" value="$d->{'EXTERNAL_MX2'}"></td>
				</tr>
		</table>
		<i>Do not specify custom MX servers unless specifically told to by your email provider. 
		Doing so could cause you to miss important email.</i><br>
		<font color="red">Warning: Custom MX servers are NOT compatible with MANY Zoovy features
	such as the Newsletter featureset.  
	In addition you may incur additional support charges to troubleshoot mail issues. 
	</font>
			</td>
		</tr>
		</table>
			~;
			}

		$out .= qq~<input class='button' style='width: 120px;' type='button' value='Save Configuration' onClick="savePanel('$PANEL','UPDATE-SAVE');">~;
		$out .= '</td></tr></table>';
		}




	if ($VERB eq '') {
		$out = '';
		$out .= '<table width=100%>';
		$out .= "<tr><td>Status:</td><td><b>$d->{'STATUS_TXT'}</b></td></tr>";
		$out .= "<tr><td>EMail:</td><td><b>($d->{'EMAIL_TYPE'}) ".$DOMAIN::EMAIL_TYPES{$d->{'EMAIL_TYPE'}}.'</b></td></tr>';
		$out .= "<tr><td>Hosting:</td><td><b>($d->{'HOST_TYPE'}) ".$DOMAIN::HOST_TYPES{$d->{'HOST_TYPE'}}.'</b></td></tr>';
		$out .= "<tr><td>Registration:</td><td><b>($d->{'REG_TYPE'}) ".$DOMAIN::REG_TYPES{$d->{'REG_TYPE'}}.'</b> ';
		if ($d->{'REG_TYPE'} eq 'ZOOVY') {
			# | REG_STATE           | enum('','NEW','NEW-WAIT','TRANSFER','TRANSFER-WAIT','ACTIVE') 
			$out .= "<tr><td colspan=2>&nbsp; - Record Created: ".&ZTOOLKIT::pretty_date($d->{'CREATED_GMT'},1)."</td></tr>";	
			$out .= "<tr><td colspan=2>&nbsp; - Registration State: ".$d->{'REG_STATE'}." (status: $d->{'REG_STATUS'})</td></tr>";	
			}
		#elsif (($d->{'REG_TYPE'} eq 'TRANSFER') || ($d->{'REG_TYPE'} eq 'NEW')) {
		#	$out .= " Request Created: ".&ZTOOLKIT::pretty_date($d->{'CREATED_GMT'},1);
		#	}
		$out .= '</td></tr>';
		
		if ($d->{'HOST_TYPE'} eq 'REDIR') {
			$out .= qq~<tr><td></td><td>Sending all requests to: ~.(($d->{'REDIR_DOMAIN'} eq '')?'<font color=red>NOT SET!</font>':$d->{'REDIR_DOMAIN'}).qq~</td></tr>~;
			}
		elsif ($d->{'HOST_TYPE'} eq 'SPECIALTY') {
			$out .= qq~<tr><td colspan='2'>
				Profile: $d->{'PROFILE'}</td></tr>~;
			}
		$out .= '</table>';

	$out .= qq~<table><tr>~;
	$out .= qq~<td><input class='button' style='width: 120px;' type='button' value='Edit Configuration' onClick="savePanel('$PANEL','Edit');"></td>~;

	my $delete_okay = 1;
	if ($d->{'REG_TYPE'} eq 'VSTORE') { $delete_okay = 0; }
	elsif (($d->{'REG_TYPE'} eq 'ZOOVY') && ($d->{'REG_STATE'} ne 'NEW')) { $delete_okay = 0; }
	
	if ($delete_okay) {
		$out .= qq~<td><input class='button' style='width: 120px;' type='button' value='Delete Domain' onClick="savePanel('$PANEL','Nuke');"></td>~;
		}
	elsif ($d->{'REG_TYPE'} eq 'OTHER') {
		$out .= qq~<td><input class='button' style='width: 120px;' type='button' value='Transfer to Zoovy' onClick="document.location='index.cgi?VERB=TRANSFER&DOMAIN=$d->{'DOMAIN'}';"></td>~;
		}
	## only allow domains that we own, + domains that are NOT redirects to have subdomains.
	if (($d->{'REG_TYPE'} eq 'ZOOVY') && ($d->{'HOST_TYPE'} ne 'REDIR')) {
		$out .= qq~<td><input class='button' style='width: 120px;' type='button' value='Add Subdomain' onClick="document.mainFrm.VERB.value='SUBDOMAIN'; document.mainFrm.DOMAIN.value='$d->{'DOMAIN'}'; document.mainFrm.submit();"></td>~;
		}

	$out .= qq~</tr></table>~;

	my $emailout = '';

	if ($d->{'EMAIL_TYPE'} eq 'ZM') {

	
#		my $aliasref = $d->aliases();
#		$emailout .= qq~<center><table cellspacing=0 class="zoovytable">~;
#		if ($d->{'EMAIL_TYPE'} eq 'FWD') {
#			$emailout .= qq~<tr><td colspan='5'><i>August 1st, 2007 - in an effort to protect our community of merchants 
#			from spammers we plan to remove the email forwarding option in the near future.
#			Please convert your email accounts to use the ZoovyMail service. Thank you for your assistance.</i></td></tr>~;
#			$emailout .= qq~
#			<tr><td colspan='5'><b>Add Forwarding Email:</b><br>
#			Sent to: <input type="textbox" name="ALIAS">\@$d->{'DOMAIN'}<br>
#			Forwards to: <input size="60" type="textbox" name="TARGET_EMAIL"><br>
#			<br>
#			AutoResponder Message: (leave blank for none)<br>
#			<textarea cols=60 rows=3 name="AUTORESPONDER_MSG"></textarea>
#			<br>
#			<input class="button" type="button" onClick="savePanel('$PANEL','ADD-ALIAS');" value=" Add "><hr></td></tr>~;
#			}
#		if (scalar(@{$aliasref})>0) {
#			$emailout .= qq~
#				<tr>
#					<td><b>Type</b></td>
#					<td><b>Alias</b></td>
#					<td></td>
#					<td><b>Destination</b></td>
#					<td></td>
#				</tr>~;
#			
#			my $r = '';
#			foreach my $a (@{$aliasref}) {
#				$r = ($r eq 'r0')?'r1':'r0';
#				my $type = '';
#				if ($a->{'IS_NEWSLETTER'}) { $type = 'News'; }
#				elsif ($a->{'AUTORESPONDER'}) { $type = 'AutoResp'; }
#				else { $type = 'Fwd'; }
#
#				$emailout .= qq~
#				<tr class="$r">
#					<td>$type</td>
#					<td>$a->{'ALIAS'}\@$d->{'DOMAIN'}</td>
#					<td> </td>
#					<td>$a->{'TARGET_EMAIL'}</td>
#					<td><input type="button" class="button" onClick="this.form.ALIAS.value='$a->{'ALIAS'}'; savePanel('$PANEL','KILL-ALIAS');" value="Remove"></td>
#				</tr>
#				~;
#				if ($a->{'AUTORESPONDER_MSG'} ne '') {
#					$emailout .= qq~<tr class="$r"><td colspan='5'>Autoresponder Message:<br>$a->{'AUTORESPONDER_MSG'}<br></td></tr>~;
#					}
# 	
#				}
#			# $emailout .= Dumper($aliasref);
#			}
#		else {
#			## no aliases.
#			}
#		$emailout .= "</table></center><br>";
		}
	elsif ($d->{'EMAIL_TYPE'} eq 'NONE') {
		if ($d->{'HOST_TYPE'} eq 'REDIR') {}
		elsif ($d->{'HOST_TYPE'} eq 'SPLASH') {}
		else {
			$emailout .= '<font color="red">WARNING: EMAIL IS SET TO "NONE"</font>';
			}
		}
	else {
		$emailout .= qq~ Mail: $d->{'MXMODE_TXT'}~;
		}

	if ($d->{'EMAIL_TYPE'} eq '') { $emailout = ''; }
	$out .= $emailout;

	# $out .= qq~ <input class='button' style='width: 120px;' type='button' value='Edit Email Aliases' ><br>~;

	my $mapsref = $d->maps();
	if ((scalar(@{$mapsref})==0) && ($d->{'REG_TYPE'} eq 'VSTORE')) {}	# no rewrites for .zoovy.com domains
	elsif ((scalar(@{$mapsref})==0) && ($d->{'REG_TYPE'} eq 'SUBDOMAIN')) {}	# no rewrites for subdomains	
	elsif (
		(scalar(@{$mapsref})>0) ||
		(($d->{'HOST_TYPE'} eq 'PRIMARY') && ($FLAGS =~ /,WEB,/))
		) {

		my $mapsref = $d->maps();
		$out .= qq~<center><br><table>
		<tr ><td class="zoovysub1header"><b>URL Rewrite Rules</td></tr>
		<tr><td>
<div class="hint">
		A rewrite rule allows you to redirect traffic from one url to another url on your site, or another site.
		For example if you want to run a promotion at http://www.yourdomain.com/promo you would direct /promo to
		a category page such as "/category/promotion".<br>
		This feature is useful when creating print, radio, or television campaigns. The URL rewrite rules can also be useful 
		when migrating from another webhost to Zoovy and you want to retain pages which are indexed by Google or 
		other search engines.<br>
		Support issues stemming from diagnosing redirect loops, or issues about site behavior are billable.<br>
		Rewrite rules are cached on each webserver, so updates to rewrites may take up to 4 hours to be live on your site. 
</div>
		
		</td></tr>
		<tr><td>~;
		
		$out .= qq~
			<table width="100%" border=0 cellspacing=0 class="zoovytable">
				<tr>
					<td><b>Incoming URL:</b></td>
					<td><b>Rewrite To:</b></td>
				</tr>
				<tr>
					<td><input type="textbox" size="40" name="PATH"></td>
					<td><input type="textbox" size="40" name="TARGETURL"></td>
					<td><input class="button" type="button" onClick="savePanel('$PANEL','ADD-MAP');" value=" Add "></td>
				</tr>
				<tr><td colspan='3'><hr></td></tr>
				~;
			
		if (scalar(@{$mapsref})==0) {
			$out .= "<tr><td colspan=2><i>There are no URL maps configured for this domain</i></td></tr>";
			}
		elsif (scalar(@{$mapsref})>100) {
			$out .= "<tr><td colspan=2><div class=\"warning\">Cannot display URL rewrites. Too many to display (".scalar(@{$mapsref})."). Please use <a href=\"/biz/setup/import/rewriteexport.cgi/rewrites.csv\">CSV export</a> to download.</div></td></tr>";
			}
		else {
			my $r = '';
			foreach my $map (@{$mapsref}) {
				$r = ($r eq 'r0')?'r1':'r0';
				$out .= qq~
				<tr class="$r">
					<td>$map->{'PATH'}</td>
					<td>$map->{'TARGETURL'}</td>
					<td><input class="button" type="button" onClick="this.form.PATH.value='$map->{'PATH'}'; savePanel('$PANEL','KILL-MAP');" value="Remove"></td>
				</tr>
				~;
				}
			}
		$out .= qq~</table>~;
		$out .= "</td></tr></table></center>";
		}
	else {
		# $out .= "HOST_TYPE[$d->{'HOST_TYPE'}] REG_TYPE[$d->{'REG_TYPE'}]<br>";
		}


	

	my $logsar = $d->logs();
	if (scalar(@{$logsar})>0) {
		$out .= "<table border=0 width='100%'>";
		$out .= "<tr><td class=\"zoovysub1header\" colspan=2>Domain Events</td></tr>";
		my $i = 0;
		foreach my $log (reverse @{$logsar}) {
			next if (($log->{'CLASS'} & 2)==0);		# bit 2 is required to display events.
			my $class = 'r'.((++$i)%2);
			if (($log->{'CLASS'} & 1)==0) { $class = 'rs'; }		# bit 1 makes it an error.
			$out .= sprintf("<tr><td class=\"%s\">%s</td><td class=\"%s\">%s</td></tr>\n",
				$class,&ZTOOLKIT::pretty_date($log->{'CREATED_GMT'},1),$class,$log->{'TXT'} );
			}
		$out .= "</table>";
		}
	
	} # END OF $VERB eq ''



	$out .= "</td><td>";
-->
