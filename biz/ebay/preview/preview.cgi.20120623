#!/usr/bin/perl

use strict;
use CGI;
use LWP::Simple;
use Data::Dumper;
use HTTP::Request::Common;
use HTTP::Cookies;
use LWP::UserAgent;

use lib "/httpd/modules";
use ZOOVY;
use EBAY::CREATE;	## NOTE: this has always got to come first since GALLERY collides /httpd/ebayapi/modules /httpd/modules
use EBAY::ATTRIBS;

my $IS_SUPPORT = 0;

## okay - need to detect 
if ($ZOOVY::cookies->{'session_id'} =~ /SUPPORT\*/) { $IS_SUPPORT++; }
if ($ENV{'REMOTE_ADDR'} =~ /66\.240\.244/) { $IS_SUPPORT++; }

$|++;
my $q = new CGI;

$GTOOLS::TAG{'<!-- DATA -->'} = $q->param('ZOOVY');
my $USERNAME = $q->param('MERCHANT');
if ($USERNAME eq '') { $USERNAME = $q->param('USERNAME'); }
$USERNAME = lc($USERNAME);

my $PRT = $q->param('PRT');

my $PRODUCT = $q->param('PRODUCT');
if (not defined $PRODUCT) { $PRODUCT = $q->param('SKU'); }
my $DOCID = $q->param('DOCID');
my $MID = &ZOOVY::resolve_mid($USERNAME);
if (not defined $DOCID) { $DOCID = $q->param('MARKET'); }


my $FEES = '';
my $ATTRIBOUT = '';

print $q->header;
my %vars = ZOOVY::attrib_handler($q->unescape($q->param('ZOOVY')));
my $ERROR = '';

my $PROFILE = $vars{'zoovy:profile'};


#if ($vars{'ebay:title1'}) { 
#	my @titles = ();
#	if (length($vars{'ebay:title1'})>5) { push @titles, $vars{'ebay:title1'}; }
#	if (length($vars{'ebay:title2'})>10) { push @titles, $vars{'ebay:title2'}; }
#	if (length($vars{'ebay:title3'})>10) { push @titles, $vars{'ebay:title3'}; }
#	if (length($vars{'ebay:title4'})>10) { push @titles, $vars{'ebay:title4'}; }
#	if (length($vars{'ebay:title5'})>10) { push @titles, $vars{'ebay:title5'}; }
#	if (scalar(@titles)==0) { $ERROR = 'No valid titles!'; } else { $vars{'ebay:title'} = substr($titles[ ( time % scalar(@titles)  ) ],0,55); }	
#	}
	

#use EBAY::LISTING;
#my $listing = EBAY::LISTING->new($USERNAME,'EBAY',channel=>0);
#$listing->{'DATAREF'} = \%vars;
#$listing->{'CLASS'} = 'AUCTION';
#$listing->{'MERCHANT'} = $USERNAME;
#$listing->{'PRODUCT'} = $PRODUCT;
#$listing->{'MID'} = $MID;
#$listing->{'PROFILE'} = $vars{'zoovy:profile'};

my $TARGET = undef;

if ($q->param('MARKET') eq 'ebay.auction') { $TARGET = 'EBAYA'; }
elsif ($q->param('MARKET') eq 'ebaystore.listing') { $TARGET = 'EBAYS'; }
elsif ($q->param('MARKET') =~ /MOTOR/) { $TARGET = 'EBAYS'; }
elsif ($ENV{'REQUEST_URI'} =~ /store/i) { $TARGET = 'EBAYA'; }
elsif ($ENV{'REQUEST_URI'} =~ /motor/i) { $TARGET = 'EBAYFP'; }
elsif ($DOCID =~ /store/i) { $TARGET = 'EBAYS'; }
elsif ($DOCID =~ /motor/i) { $TARGET = 'EBAYFP'; }
else { $TARGET = 'EBAYA'; }

# print STDERR "CLASS: $CLASS\n";


my ($eb2) = EBAY2->new($USERNAME,PRT=>$PRT);

# my $nsref = &ZOOVY::fetchmerchantns_ref($USERNAME,$listing->{'PROFILE'});
my $hashref = {};
my $warningref = undef;

if ($USERNAME eq '') {
	$ERROR = "Username is not set - please re-login\n";
	}

my $METAREF = undef;
my $le = undef;
my $RESULT = undef;
my $SHOW_PREVIEW;

if ($ERROR ne '') {
	## !?
	}
else {
	#my $edbh = $eb2->ebay_db_connect();
	#($ERROR,$hashref,$warningref) = &EBAY::CREATE::doit2($listing,$edbh);

	require LISTING::EVENT;
	my ($le) = LISTING::EVENT->new(USERNAME=>$USERNAME,
		PROFILE=>$PROFILE,
		SKU=>$PRODUCT,
		TARGET=>$TARGET,
		PRT=>$PRT,VERB=>'PREVIEW');
	require LISTING::EBAY;
	my ($udbh) = &DBINFO::db_user_connect($USERNAME);
	($RESULT,$METAREF) = LISTING::EBAY::event_handler($udbh,$le,\%vars);
	&DBINFO::db_user_close();
	$SHOW_PREVIEW = ($METAREF->{'SUPPRESS_PREVIEW'}>0)?0:1;

	my ($status,$code,$msg) = split(/\|/,$RESULT);
	if ($status ne 'SUCCESS') {
		$SHOW_PREVIEW = 0;
		$ERROR = "[$code] $msg";	
		}
	}


my $html = $METAREF->{'HTML'};

# use Data::Dumper; $html = Dumper({metaref=>$METAREF,le=>$le,result=>$RESULT}); 
# push @{$warningref}, "testing the emergency broadcast system.";


my $ERRTXT = '';
my $DEBUGTXT = '';


$ERRTXT = "<pre>".Dumper($q)."</pre>";

if (scalar(@{$METAREF->{'@MSGS'}})>0) {
	foreach my $msg (@{$METAREF->{'@MSGS'}}) {
		my ($class,$txt) = split(/\|/,$msg);
		$txt = &ZOOVY::incode($txt);
		if ($class eq 'EBAY-ERR') {
			## we show EBAY-ERR's later.
			}
		elsif ($class eq 'ERR') {
			$ERRTXT = "<tr><td><font style=\"color: red; font-size: 8pt;\">ERROR: $txt</font></td></tr>$ERRTXT";
			}
		if ($class eq 'WARN') {
			$DEBUGTXT = "<tr><td><font style=\"color: red; font-size: 8pt;\">Warning: $txt</font></td></tr>$DEBUGTXT";
			}
		else {
			$DEBUGTXT .= "<tr><td><font style=\"font-size: 8pt;\">$class: $txt</font></td></tr>";
			}
		}
	}

if (scalar(@{$METAREF->{'@ERRORS'}})>0) {
	my $servername = &ZOOVY::servername();
	foreach my $ref (@{$METAREF->{'@ERRORS'}}) {
		my $txt = &ZOOVY::incode($ref->{'msg'});
		$ERRTXT .= "<tr><td><font style=\"color: red; font-size: 8pt;\">$ref->{'severity'} $ref->{'id'}: $txt</font></td></tr>";
		if ($ref->{'hint'}) {
			$ERRTXT .= "<tr><td><div style=\"font-size: 8pt;\" class=\"hint\">HINT: $ref->{'hint'}</div></td></tr>";
			}
		
		if ($servername eq 'newdevx') {
			$ERRTXT .= "<tr><td>".&ZOOVY::incode(Dumper($ref->{'.'}))."</td></tr>";
			}
		}
	}

if ($DEBUGTXT ne '') {
	$DEBUGTXT = "<hr>The following warnings are intended for Zoovy Technical support to diagnose a range of common issues:<br><table>".$DEBUGTXT."</table>";
	}

if ($SHOW_PREVIEW) {
	if ($vars{"ebay:use_gallery"} && ($vars{'zoovy:prod_thumb'} ne '')) {
		$GTOOLS::TAG{"<!-- GALLERY -->"} = "<img src='".&imageurl($USERNAME,$vars{"zoovy:prod_thumb"},96,96,"FFFFFF",0)."' border='0'>";
		} 
	else {
		$GTOOLS::TAG{"<!-- GALLERY -->"} = "Gallery Not Enabled for this Listing [".$vars{'ebay:use_gallery'}.'/'.$vars{'zoovy:prod_thumb'}.']';
		}

	$GTOOLS::TAG{'<!-- PRETTY -->'} = (($ERRTXT ne '')?"<table>$ERRTXT</table>":'').$html.$DEBUGTXT;
	}
else {
	$GTOOLS::TAG{'<!-- PRETTY -->'} = qq~<b>Could not Preview due to Error(s):</b><br><table>$ERRTXT</table><br>
	<br>
	<div style="font-size:7pt;" class="hint">
	Debug:<br>
	PRODUCT=[$PRODUCT] Profile=[$vars{'zoovy:profile'}] Partition=[$PRT]
	$DEBUGTXT
	</div>
	~;
	}

#if ($IS_SUPPORT) {
#  open F, "</tmp/dump.$USERNAME"; 
#  close F;
#  }


&print_form("","ebay.shtml");

exit(0);

###########################################################################
## imageurl
## handles imagelib/legacy conversion
## parameters: USERNAME, variable, height, width, background, ssl
##
sub imageurl
{
   my ($USERNAME, $var, $h, $w, $bg, $ssl, $ext) = @_;

#   print STDERR "GTOOLS::imageurl received [$var]\n";

   # if we don't have an image, pass that along.
   if (!defined($var)) { return undef; }
   if ($var eq '' || $var eq ' ') { return undef; }


   # check for legacy
   if ($var !~ /^http/i)
      {
      # is from imagelibrary
      if (!defined($bg)) { $bg = "FFFFFF"; }

      if ( (int($h)==0) && (int($w)==0) )
         {
         $var = "http://static.zoovy.com/img/$USERNAME/-/$var";
         } else {
         $var = "http://static.zoovy.com/img/$USERNAME/H$h-W$w-B$bg/$var";
         }

      if ( (defined $ext) && ($ext ne '')) {
         $var .= '.'.$ext;
         }
      }


   if (defined($ssl) && $ssl)
      {
      $var =~ s/http\:/https\:/i;
      } else {
      $var =~ s/https\:/http\:/i;
      }

   return($var);
}

sub print_form {

   my ($area_reference, $template_file, $do_header, $bex) = @_;
my $input_string = "";

# sometimes we'll call GENERAL_TOOLS with no parameters to initialize the array's above
if ($template_file ne "")
   {
   open(FILE, '<templates/'.$template_file) || die "Content-type: text/plain\n\ncould not load $template_file";
   while (<FILE>) { $input_string .= $_."\n"; }
   close FILE;
   }

#  do NOT enable study here, it runs MUCH slower.
#  study($input_string);
   my ($key_value);
   foreach my $key (keys %GTOOLS::TAG) {
      if (index($input_string,$key)>=0)
         {
         $key_value = $GTOOLS::TAG{$key};
         $input_string =~ s/$key/$key_value/gs;
         }
      }

   if ($do_header)
      {

      if (defined($ENV{'HTTP_ACCEPT_ENCODING'}) && ($ENV{'HTTP_ACCEPT_ENCODING'} =~ m/gzip/))
         {
         require Compress::Zlib;

         my $comp = "gzip";
         if ($ENV{'HTTP_ACCEPT_ENCODING'} =~ /x-gzip/) { $comp = 'x-gzip'; }

         print "Content-type: text/html\n";
         print "Content-encoding: $comp\n\n";
         print Compress::Zlib::memGzip(\$input_string);

         } else {
         print "Content-type: text/html\n\n";
         print "$input_string";
         }
      } else {
      print $input_string;
      }

}