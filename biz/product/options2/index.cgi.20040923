#!/usr/bin/perl

use lib "/httpd/modules";
use ZOOVY;
use Data::Dumper;
use GTOOLS;
use ZTOOLKIT;
use POGS;
use URI::Escape qw (uri_escape);
use strict;


my $DEBUG = 0;
my $template_file = '';
my ($USERNAME,$FLAGS) = &ZOOVY::authenticate(undef,1);
if (not defined $USERNAME) { exit; }

my $PRODUCT = $ZOOVY::cgiv->{'PRODUCT'};
if (not defined $PRODUCT) { $PRODUCT = $ZOOVY::cgiv->{'product'}; }

my $VERB = $ZOOVY::cgiv->{'VERB'};
$GTOOLS::TAG{'<!-- POG -->'} = $ZOOVY::cgiv->{'POG'};
$GTOOLS::TAG{'<!-- SOG -->'} = $ZOOVY::cgiv->{'SOG'};
$GTOOLS::TAG{'<!-- TS -->'} = $ZOOVY::cgiv->{'TS'};
$GTOOLS::TAG{'<!-- USERNAME -->'} = $USERNAME;
my $SOGID = '';

## moves a POG (designed by CGI param POG) up one position
if ($VERB eq 'PROMOTE' || $VERB eq 'DEMOTE') {
	my $CODE = $ZOOVY::cgiv->{'POG'};
	my $pogstr = &ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs');
	my @pogs = &POGS::text_to_struct($USERNAME,$pogstr,0);
	my $pos = -1; my $count = 0;
	foreach my $pog (@pogs) {
		if ($pog->{'id'} eq $CODE) { $pos = $count; }
		$count++;
		}
	## SANITY: at this point $pos is -1 if failure occurred, 
	## 			or the position in the @pogs array for the item we should promote/demote
	if (($VERB eq 'DEMOTE') && ($pos<$count)) {
		my $tmp = $pogs[$pos+1]; $pogs[$pos+1] = $pogs[$pos]; $pogs[$pos] = $tmp; 
		}
	elsif (($VERB eq 'PROMOTE') && ($pos>0)) {
		my $tmp = $pogs[$pos-1]; $pogs[$pos-1] = $pogs[$pos]; $pogs[$pos] = $tmp; 
		}
	&ZOOVY::saveproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs',&POGS::struct_to_text(\@pogs));
	$VERB = '';
	}


## Associates a SOG to the current product
if ($VERB eq 'ADDSOG') {
	my $pogstr = &ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs');
	my @pogs = &POGS::text_to_struct($USERNAME,$pogstr,0);
	my $ERROR = 0;
	my $ID = $ZOOVY::cgiv->{'SOG'};
	foreach my $pog (@pogs) {
		if ($pog->{'id'} eq $ID) {
			$ERROR++;
			$GTOOLS::TAG{'<!-- OUTPUT -->'} = '<br><b><font color="red">Sorry, the store option group '.$ID.' is already associated!</font></b><br>'; 
			}
		}

	if (not $ERROR) {
		my $soglistref = &POGS::list_sogs($USERNAME);
		my $NAME = $soglistref->{$ID};
		my $output = "<pog type=\"sog\" id=\"$ID\" sog=\"$ID-$NAME\"></pog>";
		print STDERR "OUTPUT: $output\n";
		my @pog = &POGS::text_to_struct($USERNAME,$output,1);
		## now, if this is global.. we need to re-import it without any options
		if ($pog[0]->{'global'}) { @pog = &POGS::text_to_struct($USERNAME,$output,0); }
		$pog[0]->{'id'} = $ID;
		push @pogs, $pog[0];
		&ZOOVY::saveproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs',&POGS::struct_to_text(\@pogs));
		}
	$VERB = '';
	}


##
##
##

if ($VERB eq 'SAVE-CREATEPOG' || $VERB eq 'SAVE-CREATESOG') {
	## NOTE: if we encounter an error we simply reset VERB to "CREATE"
	my $output = '';
	my $TYPE = $ZOOVY::cgiv->{'TYPE'};
	my $ERROR = 0;

	if (length($ZOOVY::cgiv->{'PROMPT'})<4) {
		$ERROR++;
		$GTOOLS::TAG{'<!-- PROMPT_ERROR -->'} = "<font color='red'>ERROR: Prompt is a required field and cannot be left blank.</font><br>";
		}

	$output = "<pog prompt=\"".&ZOOVY::incode($ZOOVY::cgiv->{'PROMPT'})."\"";
	if (defined $ZOOVY::cgiv->{'INV'}) { $output .= ' inv="'.$ZOOVY::cgiv->{'INV'}.'"'; }
	if (defined $ZOOVY::cgiv->{'GLOBAL'}) { $output .= ' global="'.$ZOOVY::cgiv->{'GLOBAL'}.'"'; }


	if ($TYPE eq 'text') {
		$output .= ' type="text">';
		if ($ZOOVY::cgiv->{'INV'}>0) { $ERROR++; $GTOOLS::TAG{'<!-- INV_ERROR -->'} = "<font color='red'>ERROR: Inventory cannot be used with text fields.</font><br>"; }
		print STDERR "$output\n";
		}
	elsif ($TYPE eq 'cb') {		
		$output .= ' type="cb">';
		$output .= '<option v="NO" m="">Not Checked</option>';
		$output .= '<option v="ON" m="">Checked</option>';
		}
	elsif ($TYPE eq 'select') {
		$output .= ' type="select">';
		}
	elsif ($TYPE eq 'radio') {
		$output .= ' type="radio">';
		}
	elsif ($TYPE eq 'textarea') {
		$output .= ' type="textarea" cols="80" rows="3">';
		}
	elsif ($TYPE eq 'number') {
		$output .= ' type="number">';
		}
	elsif ($TYPE eq 'biglist') {
		$output .= ' type="biglist">';
		}
	elsif ($TYPE eq 'imgselect') {
		$output .= ' type="imgselect" width="75" height="75" zoom="1">';
		}
	elsif ($TYPE eq 'imggrid') {
		$output .= ' type="imggrid" width="50" height="50" cols="8" zoom="1">';
		}
	elsif ($TYPE eq 'calendar') {
		$output .= ' type="calendar" flags="255">';
		}
	elsif ($TYPE eq 'readonly') {
		$output .= ' type="readonly" default="Type your Text/Instructions Here!">';
		}
	else { 
		$ERROR++;
		$GTOOLS::TAG{'<!-- ERROR -->'} = "<font color='red'>ERROR: Unknown type: $TYPE</font><br>";
		}
	$output .= '</pog>';

	print STDERR "OUTPUT: $output\n";

	my $SOGNAME = lc($ZOOVY::cgiv->{'PROMPT'});
	$SOGNAME =~ s/[^\w]+/_/g;

	print STDERR "VERB: $VERB - output: $output\n";

	## if we are creating a SOG
	if ($VERB eq 'SAVE-CREATESOG') {
		my $listref = &POGS::list_sogs($USERNAME);
		foreach my $k (keys %{$listref}) {
			if ($listref->{$k} eq $SOGNAME) {
				$ERROR++;
				$GTOOLS::TAG{'<!-- ERROR -->'} = "<font color='red'>A SOG named $SOGNAME already exists [ID=$k].</font><br>";
				}
			}

		my $CODE = '';	
		if ($ERROR) {
			$VERB = 'CREATESOG';
			}
		else {
			## SOGS are so simple
			($CODE,$output) = &POGS::register_sog($USERNAME,undef,$SOGNAME,$output);
			$VERB = 'EDITSOG';
	
			print STDERR "REGISTER_SOG: CODE=$CODE output=$output\n";
	# This automatically adds the SOG to the product.		
	#		if ($PRODUCT) {
	#			my $pogstr = &ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs');
	#			@pogs = &POGS::text_to_struct($USERNAME,$pogstr,0);
	#			@pog = &POGS::text_to_struct($USERNAME,$output,1);
	#			$pog[0]->{'id'} = $CODE;
	#			push @pogs, $pog[0];
	#			&ZOOVY::saveproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs',&POGS::struct_to_text(\@pogs));
	#			}
			}
		}

	## if we didn't have an error we ALWAYS save PRODUCT
	if ($VERB eq 'SAVE-CREATEPOG') {
		my $pogstr = &ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs');

		## step2: parse the pogs into memory
		my @pogs = &POGS::text_to_struct($USERNAME,$pogstr,0);
		foreach my $pog (@pogs) {
			if ($pog->{'iname'} eq $ZOOVY::cgiv->{'INAME'}) {
				$ERROR++;
				$GTOOLS::TAG{'<!-- ERROR -->'} = "<font color='red'>A POG iname=[$ZOOVY::cgiv->{'INAME'}] already exists [ID=$pog->{'id'}] - cannot create another one! (hint: you probably just pressed refresh on the browser)</font><br>";
				}
			}

		if ($ERROR) {
			$VERB = 'CREATEPOG';
			}
		else {
			## POGS aren't as simple! 
			## step1: load the pogs from the product.
			## step4: load the new POG into memory, and set the ID to the next ID
			my @pog = &POGS::text_to_struct($USERNAME,$output,1);
			print STDERR Dumper(\@pog);
			$pog[0]->{'id'} = &POGS::find_next_available_id(\@pogs);
			$pog[0]->{'iname'} = $ZOOVY::cgiv->{'INAME'};
			$ZOOVY::cgiv->{'POG'} = $pog[0]->{'id'};

			## step5: push the option to the end of the product.
			push @pogs, $pog[0];

			## step6: store the pogs back into the product.
			&ZOOVY::saveproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs',&POGS::struct_to_text(\@pogs));
			$VERB = 'EDITPOG';
			}
		}
	}


#######################################
if ($VERB eq 'SAVEPOG') {
	my $POGID = $ZOOVY::cgiv->{'POG'};
	my $SOGID = $ZOOVY::cgiv->{'SOG'};
	my @pogs = ();
	my $pog = undef;

	if ($POGID) {
		@pogs = &POGS::text_to_struct($USERNAME,&ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs'),0);
		$pog = &POGS::find_pog_in_pogs(\@pogs,$POGID);
		$pog->{'id'} = $POGID;
		}
	if ($SOGID) {
		@pogs = &POGS::text_to_struct($USERNAME,&POGS::load_sog($USERNAME,$SOGID));
		$pog = $pogs[0];
		$pog->{'id'} = $SOGID;
		}

	if (defined $ZOOVY::cgiv->{'PROMPT'}) { $pog->{'prompt'} = $ZOOVY::cgiv->{'PROMPT'}; }
	if (defined $ZOOVY::cgiv->{'INV'}) { $pog->{'inv'} = $ZOOVY::cgiv->{'INV'}; }
	if (defined $ZOOVY::cgiv->{'GLOBAL'}) { $pog->{'global'} = $ZOOVY::cgiv->{'GLOBAL'}; }
	if (defined $ZOOVY::cgiv->{'HINT'}) { $pog->{'hint'} = $ZOOVY::cgiv->{'HINT'}; }

	if ($pog->{'type'} eq 'imgselect' || $pog->{'type'} eq 'imggrid') {
		$pog->{'width'} = $ZOOVY::cgiv->{'WIDTH'};
		$pog->{'height'} = $ZOOVY::cgiv->{'HEIGHT'};
		$pog->{'zoom'} = $ZOOVY::cgiv->{'ZOOM'};
		if ($pog->{'type'} eq 'imggrid') {
			$pog->{'cols'} = $ZOOVY::cgiv->{'COLS'};
			}
		}

	if ($pog->{'type'} eq 'calendar') {
		$pog->{'flags'} = 0;
		}

	if ($pog->{'type'} eq 'text' || $pog->{'type'} eq 'textarea' || $pog->{'type'} eq 'number' || $pog->{'type'} eq 'readonly') {
		$pog->{'default'} = $ZOOVY::cgiv->{'DEFAULT'};
		$pog->{'maxlength'} = $ZOOVY::cgiv->{'MAXLENGTH'};
		if ($pog->{'type'} eq 'textarea') {
			$pog->{'cols'} = $ZOOVY::cgiv->{'COLS'};
			$pog->{'rows'} = $ZOOVY::cgiv->{'ROWS'};
			}
		if ($pog->{'type'} eq 'number') {
			$pog->{'min'} = $ZOOVY::cgiv->{'MIN'};
			$pog->{'max'} = $ZOOVY::cgiv->{'MAX'};
			}
		}
	$pog->{'options'} = [];

	my %ids = ();	# tracks id's already in use!
	my @needid = ();
	foreach my $kvs (split(/[\n\r]+/,$ZOOVY::cgiv->{'listorder'})) {
		my %opt = ();
		foreach my $kvss (split(/\|/,$kvs)) {
			print STDERR "kvs: $kvs KVSS: $kvss\n";
			my ($k,$v) = split(/=/,$kvss,2);
			if ($k eq 'id') { 
				if (length($v)==2) {
					$opt{'v'} = uc($v); $ids{uc($v)}++; 
					}
				}
			elsif ($k eq 'pt') { $opt{'prompt'} = $v; }
			else { $opt{'m'} = $opt{'m'}. ((defined $opt{'m'})?'|':''). "$k=$v"; }
			}
		push @{$pog->{'options'}}, \%opt;
		## NOTE: remember that needid contains a ref to the same data structure as $pog->{'options'} 
		## this means we can recurse @needid later and change $pog->{'options'} - if you don't understand this, don't muck with it!
		if ($opt{'v'} eq '') { push @needid, \%opt; }
		}
	
	if ($pog->{'type'} eq 'biglist') {
		foreach my $line (split(/[\n\r]+/,$ZOOVY::cgiv->{'biglist_contents'})) {
			print STDERR "LINE: $line\n";
			next if ($line eq '');
			my %opt = ();
			my ($opt1,$opt2) = split(/\|/,$line);
			$opt{'m'} = '';
			$opt{'prompt'} = "$opt1|$opt2";
			push @{$pog->{'options'}}, \%opt;
			push @needid, \%opt;			# needid is simply a reference into @{$pog->{'options'}} for options which need values!
			}
		}

	print STDERR Dumper(\@needid);

	## assign ID's to any option that doesn't have one!
	my $counter = -1;
	foreach my $opt (@needid) {
		while (defined $ids{ &POGS::base36( ++$counter) }) {
			## do nothing!
			};
		$opt->{'v'} = &POGS::base36($counter);
		$ids{ &POGS::base36($counter) }++;
		}

	# print "Content-type: text/html\n\n"; print "<pre>".&ZOOVY::incode(Dumper($pog))."</pre>"; exit;
	if ($POGID) {
		print STDERR &POGS::struct_to_text(\@pogs)."\n"; 
		&ZOOVY::saveproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs',&POGS::struct_to_text(\@pogs));
		if (&POGS::use_inventory(\@pogs)) {
			## has inventory - so enable inv w/options!
			&ZOOVY::saveproduct_attrib($USERNAME,$PRODUCT,'zoovy:inv_enable',4);
			}
		else {
			## no inventory options 
			if (&ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:inv_enable')>0) {
				## inventory is enabled, in some way, so lets set it to simply inventory (since we have no inv/options)
				&ZOOVY::saveproduct_attrib($USERNAME,$PRODUCT,'zoovy:inv_enable',1);
				}
			}
		}

	if ($SOGID) {
		&POGS::register_sog($USERNAME,$SOGID,$pog->{'prompt'},&POGS::struct_to_text(\@pogs));
		}

	$VERB = '';
	}




#######################################
if ($VERB eq 'KILLPOG') {
	my $POGID = $ZOOVY::cgiv->{'POG'};
	my $SOGID = $ZOOVY::cgiv->{'SOG'};

	if ($POGID) {
		my @pogs = &POGS::text_to_struct($USERNAME,&ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs'),0);
		my @new = ();
		for (my $x = 0; $x < scalar(@pogs); $x++) {
			if ($pogs[$x]->{'id'} ne $POGID) { push @new, $pogs[$x]; }
			}
		&ZOOVY::saveproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs',&POGS::struct_to_text(\@new));
		}

	$VERB = '';
	if ($SOGID) {
		$VERB = 'WARNKILLSOG';
		}
	}

#######################################
if ($VERB eq 'WARNKILLSOG') {
	$template_file = 'warnkillsog.shtml';
	}


#######################################
if ($VERB eq 'KILLSOG') {
	my $SOGID = $ZOOVY::cgiv->{'SOG'};
	print STDERR "USERNAME: $USERNAME SOG: $SOGID\n";
	if ($SOGID) { &POGS::kill_sog($USERNAME,$SOGID); }
	$VERB = '';
	}


#######################################
if ($VERB eq 'SAVEGRID') {
	my $POGID = $ZOOVY::cgiv->{'POG'};
	my @pogs = ();
	my $optionsref = undef;
	my $pog = undef;
	my $sogref = undef;
	if ($POGID) {
		@pogs = &POGS::text_to_struct($USERNAME,&ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs'),0);
		$pog = &POGS::find_pog_in_pogs(\@pogs,$POGID);
		$optionsref = $pog->{'options'};
		}

	if ($pog->{'sog'}) {
		my ($sogid,$sogname) = split(/-/,$pog->{'sog'});
		my @sogs = &POGS::text_to_struct($USERNAME,&POGS::load_sog($USERNAME,$sogid,$sogname),0);
		$sogref = pop @sogs;
		$optionsref = $sogref->{'options'};
		}

	##
	## SANITY:
	##		at this point $optionsref is populated with the list of options from the sog
	##

	my $c = '';
	my @saveoptions = ();
	foreach my $opt (@{$optionsref}) {
		my $v = $opt->{'v'};
		next unless (defined $ZOOVY::cgiv->{'check-'.$v});
		print STDERR "PARSING: $v\n";
		$opt->{'prompt'} = $ZOOVY::cgiv->{'prompt-'.$v};
		my $metaref = &POGS::parse_meta($opt->{'m'});
		$metaref->{'p'} = $ZOOVY::cgiv->{'price-'.$v};
		$metaref->{'w'} = $ZOOVY::cgiv->{'weight-'.$v};
		$opt->{'m'} = &POGS::encode_meta($metaref);
		push @saveoptions, $opt;
		}
	$pog->{'options'} = \@saveoptions;

#	print STDERR "DUMPER: ".Dumper(\@pogs);
#	print STDERR "OUTPUT: ".&POGS::struct_to_text(\@pogs);
#	print STDERR "OPTIONS: ".Dumper(\@saveoptions);

	if ($POGID) {
		# print STDERR &POGS::struct_to_text(\@pogs)."\n"; exit;
		&ZOOVY::saveproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs',&POGS::struct_to_text(\@pogs));
		}

	$VERB = 'GRIDEDIT';
	}






#######################################
if ($VERB eq 'GRIDEDIT') {
	my $POGID = $ZOOVY::cgiv->{'POG'};
	my @pogs = ();
	my $pog = undef;
	my $sogref = undef;
	my $optionsref = undef;
	my %INCLUDED = ();			# a hash of included options, along with modifiers, etc.
	if ($POGID) {
		@pogs = &POGS::text_to_struct($USERNAME,&ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs'),0);
		$pog = &POGS::find_pog_in_pogs(\@pogs,$POGID);
		$optionsref = $pog->{'options'};
		foreach my $opt (@{$optionsref}) {
			$INCLUDED{$opt->{'v'}} = $opt;
			}
		}

	if ($pog->{'sog'}) {
		my ($sogid,$sogname) = split(/-/,$pog->{'sog'});
		my @sogs = &POGS::text_to_struct($USERNAME,&POGS::load_sog($USERNAME,$sogid,$sogname),0);
		$sogref = pop @sogs;
		# print STDERR Dumper($pog,$sogref);
		$optionsref = $sogref->{'options'};
		}

	print STDERR "INCLUDED: ".Dumper(\%INCLUDED);

	##
	## SANITY:
	##		$sogref is undef if we are editing a pog, otherwise it's the complete sog
	##		$pog is a reference to the pog we're editing
	##		$optionslist is the full list of options available
	##		%INCLUDED is a hash keyed by value with the data the merchant has customized
	##
	$GTOOLS::TAG{'<!-- PROMPT -->'} = $pog->{'prompt'};
	$GTOOLS::TAG{'<!-- TYPE -->'} = $pog->{'type'};
	$GTOOLS::TAG{'<!-- POG -->'} = $POGID;
	$GTOOLS::TAG{'<!-- SOG -->'} = $SOGID;

	my $c = '';	
	my $checked = '';
	my $differs = '';
	foreach my $opt (@{$optionsref}) {
		my $v = $opt->{'v'};
		# $c .= "<tr><td colspan='5'>".Dumper($opt)."</td></tr>";
		$c .= "<tr>";
		if (defined $INCLUDED{$v}) { 
			$checked = 'checked'; 
			## compare the prompt and meta to see if they are different between sog and pog.
			if (($opt->{'prompt'} ne $INCLUDED{$v}->{'prompt'}) || ($opt->{'m'} ne $INCLUDED{$v}->{'m'})) {
				my $tmpmetaref = &POGS::parse_meta($opt->{'m'});
				$differs = qq~
					<a border="0" onClick="
					document.forms[0].elements['price-$v'].value = '$tmpmetaref->{'p'}';
					document.forms[0].elements['weight-$v'].value = '$tmpmetaref->{'w'}'; 
					document.images['recover$v'].src='/images/blank.gif';
					" href="#">
					<img name="recover$v" border="0" src="restore.gif"></a>~;
				}
			else {
				$differs = '';
				}
			} 
		else { 
			$differs = '';
			$checked = ''; 
			}


		$c .= "<td align='center'>$v &nbsp; $differs</td>";
		$c .= "<td align='center'><input type=\"checkbox\" $checked name=\"check-$v\"></td>";
		$c .= "<td><input type='textbox' name='prompt-$v' value=\"".&ZOOVY::incode($opt->{'prompt'})."\"></td>";
		my $metaref = &POGS::parse_meta($INCLUDED{$v}->{'m'});
		$c .= "<td align='center'><input size='5' type='textbox' name='price-$v' value=\"".&ZOOVY::incode($metaref->{'p'})."\"></td>";
		$c .= "<td align='center'><input size='5' type='textbox' name='weight-$v' value=\"".&ZOOVY::incode($metaref->{'w'})."\"></td>";
		$c .= "</tr>";
		}
	$GTOOLS::TAG{'<!-- GRID -->'} = $c;

	$template_file = 'gridedit.shtml';
	}


#######################################
if ($VERB eq 'EDITPOG' || $VERB eq 'EDITSOG') {

	if ($VERB eq 'EDITPOG') {
		}

	if ($VERB eq 'EDITSOG') {
		}

	my $POGID = $ZOOVY::cgiv->{'POG'};
	my $SOGID = $ZOOVY::cgiv->{'SOG'};

	print STDERR "$VERB - SOGID: $SOGID\n";
	my @pogs = ();
	my $pog = undef;
	if ($POGID) {
		@pogs = &POGS::text_to_struct($USERNAME,&ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs'),0);
		$pog = &POGS::find_pog_in_pogs(\@pogs,$POGID);
		}
	if ($SOGID) {
		@pogs = &POGS::text_to_struct($USERNAME,&POGS::load_sog($USERNAME,$SOGID));
		$pog = $pogs[0];
		$pog->{'sog'} = $SOGID;
		}

	# print "Content-type: text/plain\n\n"; print Dumper($pog); exit;
	$GTOOLS::TAG{'<!-- PROMPT -->'} = $pog->{'prompt'};
	$GTOOLS::TAG{'<!-- TYPE -->'} = $pog->{'type'};
	$GTOOLS::TAG{'<!-- POG -->'} = $POGID;
	$GTOOLS::TAG{'<!-- SOG -->'} = $SOGID;

	$GTOOLS::TAG{'<!-- IMAGE_MODIFIER -->'} = '<input type="hidden" name="img" value=""><input name="imgimg" type="image" src="/images/blank.gif" width=1 height=1>';	 	## blank is not saved.
	$GTOOLS::TAG{'<!-- HIDE_BIGLIST_START -->'} = '<!--';
	$GTOOLS::TAG{'<!-- HIDE_BIGLIST_END -->'} = '-->';
	$GTOOLS::TAG{'<!-- BIGLIST_CONTENTS -->'} = '';
	$GTOOLS::TAG{'<!-- HIDE_SELECT_START -->'} = '<!--';
	$GTOOLS::TAG{'<!-- HIDE_SELECT_END -->'} = '-->';
	$GTOOLS::TAG{'<!-- HIDE_TEXTAREA_START -->'} = '<!--';
	$GTOOLS::TAG{'<!-- HIDE_TEXTAREA_END -->'} = '-->';
	$GTOOLS::TAG{'<!-- HIDE_READONLY_START -->'} = '<!--';
	$GTOOLS::TAG{'<!-- HIDE_READONLY_END -->'} = '-->';
	$GTOOLS::TAG{'<!-- HIDE_TEXTBOX_START -->'} = '<!--';
	$GTOOLS::TAG{'<!-- HIDE_TEXTBOX_END -->'} = '-->';
	$GTOOLS::TAG{'<!-- NUMBER_FIELDS -->'} = '';						# this is replaced with min, max if a number
	$GTOOLS::TAG{'<!-- SELECT_OPTS -->'} = '';
	$GTOOLS::TAG{'<!-- REMOVE -->'} = '';
	$GTOOLS::TAG{'<!-- DEFAULT -->'} = $pog->{'default'};
	$GTOOLS::TAG{'<!-- MAXLENGTH -->'} = $pog->{'maxlength'};
	$GTOOLS::TAG{'<!-- COLS -->'} = $pog->{'cols'}; 
	$GTOOLS::TAG{'<!-- ROWS -->'} = $pog->{'rows'}; 

	$GTOOLS::TAG{'<!-- INV_CHECKED -->'} = ($pog->{'inv'})?'checked':'';

	$template_file = 'editpog.shtml';

	if ($pog->{'type'} eq 'textarea') {
		$GTOOLS::TAG{'<!-- HIDE_TEXTAREA_START -->'} = '';
		$GTOOLS::TAG{'<!-- HIDE_TEXTAREA_END -->'} = '';
		}

	if ($pog->{'type'} eq 'readonly') {
		$GTOOLS::TAG{'<!-- HIDE_READONLY_START -->'} = '';
		$GTOOLS::TAG{'<!-- HIDE_READONLY_END -->'} = '';
		}

	if ($pog->{'type'} eq 'text' || $pog->{'type'} eq 'number') {
		$GTOOLS::TAG{'<!-- HIDE_TEXTBOX_START -->'} = '';
		$GTOOLS::TAG{'<!-- HIDE_TEXTBOX_END -->'} = '';
		if ($pog->{'type'} eq 'number') {
			$GTOOLS::TAG{'<!-- NUMBER_FIELDS -->'} = qq~
				<tr><td colspan='2'><b>Number Specific Fields:</b></td></tr>
				<tr><td>Minimum Number:</td><td><input type="textbox" size="10" name="MIN" value="$pog->{'min'}"></td></tr>
				<tr><td>Maximum Number:</td><td><input type="textbox" size="10" name="MAX" value="$pog->{'max'}"></td></tr>
			~;
			}
		}

	if ($pog->{'type'} eq 'radio' || $pog->{'type'} eq 'cb' || $pog->{'type'} eq 'select' || $pog->{'type'} eq 'imgselect' || $pog->{'type'} eq 'imggrid') {
		## select, radio, cb
		$GTOOLS::TAG{'<!-- HIDE_SELECT_START -->'} = '';
		$GTOOLS::TAG{'<!-- HIDE_SELECT_END -->'} = '';
		my $out = '';
		foreach my $opt (@{$pog->{'options'}}) {
			$out .= "<option value=\"pt=$opt->{'prompt'}|id=$opt->{'v'}|$opt->{'m'}\">$opt->{'prompt'}</option>\n";
			}
		$GTOOLS::TAG{'<!-- SELECT_OPTS -->'} = $out;

		if ($pog->{'type'} ne 'cb') {
			$GTOOLS::TAG{'<!-- REMOVE -->'} = qq~<input type="button" value=" Remove " onclick="dropItem();">~;
			}

		if ($pog->{'type'} eq 'imgselect' || $pog->{'type'} eq 'imggrid') {
			$GTOOLS::TAG{'<!-- HIDE_IMGSELECT_START -->'} = '';
			$GTOOLS::TAG{'<!-- HIDE_IMGSELECT_END -->'} = '';
			$GTOOLS::TAG{'<!-- HIDE_SELECT_START -->'} = '';
			$GTOOLS::TAG{'<!-- HIDE_SELECT_END -->'} = '';
			my $t = time();
			my %serialref = ('ATTRIB'=>'img','SRC'=>'','PROMPT'=>'Select List Image','DIV'=>'thisFrm');
			my $passthis = &ZTOOLKIT::fast_serialize(\%serialref,1);
			$GTOOLS::TAG{'<!-- IMAGE_MODIFIER -->'} = qq~
				<table bgcolor="CFCFCF">
					<tr>
					<td bgcolor="CFCFCF">
						<img src="/images/image_not_selected.gif" width="75" height="75" name="imgimg">
					</td>
					<td bgcolor="CFCFCF">
						Selected Image: <input onChange="document.thisFrm.imgimg.src=imglib(document.thisFrm.img.value,50,50,'FFFFFF',0,'jpg');" type="textbox" name="img" size="20"><br>
						<input type="BUTTON" style='width: 100px;' value="Image Library" onClick="javascript:openWindow('/biz/product/channel/image.pl?SERIAL=$passthis&$t');">
						<input type="BUTTON" style='width: 100px;' value="Upload Image" onClick="javascript:openWindow('/biz/product/channel/image.pl?ACTION=UPLOAD&SERIAL=$passthis&$t');"><br>
					</td>
					</tr>
				</table>
				<br>
				~;

			my $zoom_checked = ($pog->{'zoom'})?'checked':'';
			$GTOOLS::TAG{'<!-- IMAGE_OPTIONS -->'} = qq~
				Thumbnail Height: <input size="3" type="textbox" name="HEIGHT" value="$pog->{'height'}"> (pixels)<br>
				Thumbnail Width: &nbsp;<input size="3" type="textbox" name="WIDTH" value="$pog->{'width'}"> (pixesl)<br>
				<input type="checkbox" $zoom_checked name="ZOOM"> Enable Click to Zoom on Images<br>
				~;
			if ($pog->{'type'} eq 'imggrid') {
				$GTOOLS::TAG{'<!-- IMAGE_OPTIONS -->'} .= qq~Image Columns: <input size="3" type="textbox" name="COLS" value="$pog->{'cols'}"><br>~;
				}
			}
			
		

		if ($DEBUG) { $GTOOLS::TAG{'<!-- INVENTORY_OPTIONS -->'} = "<pre>".Dumper($pog)."</pre>"; }

		if ($pog->{'inv'}) {
			$GTOOLS::TAG{'<!-- INVENTORY_OPTIONS -->'} .= qq~<font color='blue'><li> This group affects inventory<li> 100 options max.</font><br>~;
			}
		else {
			$GTOOLS::TAG{'<!-- INVENTORY_OPTIONS -->'} .= qq~<font color='blue'><li> Group does not affect Inventory<li> 1296 options max.</font><br>~;
			}
		} # end if inventoriable type (based on select)


	if ($pog->{'sog'}) {
		$GTOOLS::TAG{'<!-- INVENTORY_OPTIONS -->'} .= qq~<font color='blue'><li> This is a store option group</font><br>~;
		if ($pog->{'global'}>0) { 
			$GTOOLS::TAG{'<!-- INVENTORY_OPTIONS -->'} .= qq~<font color='blue'><li> Managed Globally</font><br>~;		
			}
		else { 
			$GTOOLS::TAG{'<!-- INVENTORY_OPTIONS -->'} .= qq~<font color='blue'><li> Managed Individually</font><br>~;	 
			}
		}


	if ($pog->{'type'} eq 'biglist') {
		$GTOOLS::TAG{'<!-- HIDE_BIGLIST_START -->'} = '';
		$GTOOLS::TAG{'<!-- HIDE_BIGLIST_END -->'} = '';
		my $out = '';
		foreach my $opt (@{$pog->{'options'}}) {
			$out .= "$opt->{'prompt'}\n";
			}
		$GTOOLS::TAG{'<!-- BIGLIST_CONTENTS -->'} = $out;
		}

	}


##
## Chooser: select type of option, and the name.
##
if ($VERB eq 'CREATESOG' || $VERB eq 'CREATEPOG') {

	$GTOOLS::TAG{'<!-- VERB -->'} = $VERB;
	if ($VERB eq 'CREATEPOG') {
		$GTOOLS::TAG{'<!-- HEADER -->'} = qq~<b>Create Product Option Group</b>~;
		}
	if ($VERB eq 'CREATESOG') {
		$GTOOLS::TAG{'<!-- HEADER -->'} = qq~<b>Create Store Option Group</b>~;
		}

	$GTOOLS::TAG{'<!-- TYPE_SELECT -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_RADIO -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_CB -->'} = '';

	$GTOOLS::TAG{'<!-- TYPE_TEXT -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_TEXTAREA -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_NUMBER -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_READONLY -->'} = '';

	$GTOOLS::TAG{'<!-- TYPE_IMGSELECT -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_BIGLIST -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_SOG_PTR -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_SOG_VAR -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_FILEUPLOAD -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_DYNAMIC -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_IMGSELECT -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_IMGGRID -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_CALENDAR -->'} = '';
	$GTOOLS::TAG{'<!-- TYPE_ASSEMBLY -->'} = '';

	$GTOOLS::TAG{'<!-- TYPE_'.uc($ZOOVY::cgiv->{'TYPE'}).' -->'} = 'checked';
	$GTOOLS::TAG{'<!-- PROMPT_VAL -->'} = &ZOOVY::incode($ZOOVY::cgiv->{'PROMPT'});
	$GTOOLS::TAG{'<!-- CB_INV -->'} = (defined $ZOOVY::cgiv->{'INV'})?'checked':'';

	if ($VERB eq 'CREATESOG') {
		## SOG SPECIFIC OPTIONS
		my $SOGID = &POGS::next_available_sogid($USERNAME);
		$GTOOLS::TAG{'<!-- SOG_OPTIONS -->'} = qq~
			<input type='hidden' name='SOG' value='$SOGID'>
			<b>Scope of Store Option Group:</b><br>
			Globally managed groups cannot select options on a product by product basis. 
			When changes are made, they are instantly added to all products associated to the group. 
			When changes are made to non-global groups it is necessary to add the new option to each product.<Br>
			<br>
			<input type="radio" checked name="GLOBAL" value="0"> <b>MANUAL:</b> I need to select options, and customize modifiers on a product by product basis.<br>
			<input type="radio" name="GLOBAL" value="1"> <b>AUTOMATIC:</b> Any changes should automatically affect all products using this group.<br>
			~;
		}
	else {
		## POG SPECIFIC OPTIONS
		$GTOOLS::TAG{'<!-- SOGPOG -->'} = qq~~;
		}
	$template_file = 'create.shtml';
	}


## this is the main menu (will probably never be used)
if ($VERB eq '') {

	## remove 2.0 options
	my $prodref = &ZOOVY::fetchproduct_as_hash($USERNAME,$PRODUCT);
	if ($prodref->{'zoovy:notes_prompt'}) {	
		delete $prodref->{'zoovy:notes_default'};
		delete $prodref->{'zoovy:notes_prompt'};
		delete $prodref->{'zoovy:notes_display'};
		&ZOOVY::saveproduct_from_hash($USERNAME,$PRODUCT,$prodref);
		}
	##


	my @pogs = &POGS::text_to_struct($USERNAME,&ZOOVY::fetchproduct_attrib($USERNAME,$PRODUCT,'zoovy:pogs'),0);
	my %pogids = ();
	if (not scalar(@pogs)) {
		$GTOOLS::TAG{'<!-- POG_OUTPUT -->'} = "<tr><Td colspan='5'><font color='blue'>This product currently has no options.</td></tr>";
		}
	else {
		my $c = '';
		my $last = scalar(@pogs);
		my $count = 0;
		foreach my $pog (@pogs) {
			$pogids{$pog->{'id'}}++;
			$c .= "<tr>";
			$c .= "<td valign='top' nowrap>";
	
			my $sogref = undef;
			$pog->{'_editable'} = 1;					# this is something that is implicity on, unless a sog turns it off.
			if ($pog->{'sog'} ne '') {
				my ($sogid,$sogname) = split(/-/,$pog->{'sog'});
				my @sogs = &POGS::text_to_struct($USERNAME,&POGS::load_sog($USERNAME,$sogid,$sogname),0);
				$sogref = pop @sogs;
				print STDERR Dumper($sogref);
				if ($sogref->{'global'}) { $pog->{'_editable'} = 0; }
				}

			if ($count++>0) {
				$c .= "	<a href=\"index.cgi?VERB=PROMOTE&PRODUCT=$PRODUCT&POG=".&uri_escape($pog->{'id'})."\"><img src=\"up.gif\" height=16 width=16 border=0></a>";
				} else { $c .= "<img src=\"/images/blank.gif\" width=16 height=16 border=0>"; }

			if ($count<$last) {
				$c .= "	<a href=\"index.cgi?VERB=DEMOTE&PRODUCT=$PRODUCT&POG=".&uri_escape($pog->{'id'})."\"><img src=\"down.gif\" border=0></a>";
				} else { $c .= "<img src=\"/images/blank.gif\" width=16 height=16 border=0>"; }

			if ($pog->{'_editable'}) {
				if ($pog->{'sog'}) {
					$c .= "	<a href=\"index.cgi?VERB=GRIDEDIT&PRODUCT=$PRODUCT&POG=".&uri_escape($pog->{'id'})."\"><img src=\"change.gif\" border=0></a>";
					}
				else {
					$c .= "	<a href=\"index.cgi?VERB=EDITPOG&PRODUCT=$PRODUCT&POG=".&uri_escape($pog->{'id'})."\"><img src=\"change.gif\" border=0></a>";
					}
				} else { $c .= "<img src=\"/images/blank.gif\" width=16 height=16 border=0>"; }
		
			if ($pog->{'sog'}) {
				$c .= "<a href=\"index.cgi?VERB=KILLPOG&PRODUCT=$PRODUCT&POG=".&uri_escape($pog->{'id'})."\"><img src=\"right.gif\" border=0></a>";
				}

			$c .= "</td>";
			if ($pog->{'sog'} ne '') {
				$c .= "<td>$sogref->{'prompt'}</td>";
				$c .= "<td nowrap>$sogref->{'type'}<br>INV: $sogref->{'inv'}<br>GLOBAL: $sogref->{'global'}";
				if ($DEBUG) { $c .= "<pre>".Dumper($sogref)."</pre>"; } 
				$c .= "</td>";
				if (defined($sogref->{'global'}) && $sogref->{'global'}) {
					if (defined $sogref->{'options'}) {
						$c .= "<td>".(scalar(@{$sogref->{'options'}}))."</td>"; 
						}
					else {	
						## note: global text areas don't have options
						$c .= "<td>n/a</td>";
						}
					}
				elsif (defined $pog->{'options'}) { 
					$c .= "<td>".(scalar(@{$pog->{'options'}}))."</td>"; 
					}
				else {
					$c .= "<td>0</td>";
					}
				
				}
			else {
				$c .= "<td valign='top'>$pog->{'prompt'} </td>";
				$c .= "<td valign='top'>$pog->{'type'} </td>";
				if (($pog->{'type'} eq 'text') || ($pog->{'type'} eq 'textarea') || ($pog->{'type'} eq 'number') || 
					 ($pog->{'type'} eq 'readonly') || ($pog->{'type'} eq 'calendar')) {
					$c .= "<td valign='top'>n/a</td>";
					}
				elsif ((not defined $pog->{'options'}) || (scalar(@{$pog->{'options'}}) == 0)) {
					$c .= "<td valign='top'><font color='red'>0 options - CORRUPT!</font></td>";
					}
				else {
					$c .= "<td valign='top'>".scalar(@{$pog->{'options'}})." options ";
					if ( (scalar(@{$pog->{'options'}})>1) && (($pog->{'type'} eq 'select') || ($pog->{'type'} eq 'radio')) ) {
						$c .= "  <a href=\"index.cgi?VERB=GRIDEDIT&PRODUCT=$PRODUCT&POG=".uri_escape($pog->{'id'})."\">[View]</a>";
						}
					$c .= "</td>";
					}
				}
			$c .= "<td valign='top'>$pog->{'id'} </td>";
			$c .= "</tr>";
			}
		$GTOOLS::TAG{'<!-- POG_OUTPUT -->'} = $c;
		}

	##
	## OUTPUT LIST OF AVAILABLE SOGS
	##	
	my $listref = &POGS::list_sogs($USERNAME);
	my $out = '';
	foreach my $id (reverse sort keys %{$listref}) {

		my @sogs = &POGS::text_to_struct($USERNAME,&POGS::load_sog($USERNAME,$id),0);
		my $sogref = pop @sogs;

		$out .= "<tr><td><table><tr>";
		if ((not defined $pogids{$id}) && ($PRODUCT ne '')) {
			$out .= "<a href=\"index.cgi?VERB=ADDSOG&PRODUCT=$PRODUCT&SOG=".&uri_escape($id)."\"><img src=\"left.gif\" border=0></a>";
			} 
		else { 
			$out .= "<td><img src=\"/images/blank.gif\" width=16 height=16 border=0></td>"; 
			}

		if ($PRODUCT eq '') {
			$out .= "<td><a href=\"index.cgi?VERB=EDITSOG&PRODUCT=$PRODUCT&SOG=".$id."\"><img src=\"change.gif\" border=0></a></td>";
			}

		$out .= "</tr></table></td>";
		if ($DEBUG) {  $out .= "<td><pre>".Dumper($sogref)."</pre></td>"; }
		$out .= "<td>$id: $listref->{$id}</a></td>";
		$out .= "</tr>";
		}
	if ($out eq '') {
		$out .= "<tr><td colspan='3'><font color='blue'>There are currently no store option groups</font></td></tr>";
		}
	$GTOOLS::TAG{'<!-- SOGS_OUTPUT -->'} .= $out;
	$GTOOLS::TAG{'<!-- TS -->'} = time();

	$template_file = 'index.shtml';
	if ($PRODUCT eq '') { $template_file = 'indexsog.shtml'; }
	}

$GTOOLS::TAG{'<!-- PRODUCT -->'} = $PRODUCT;
&GTOOLS::print_form('',$template_file,1);
